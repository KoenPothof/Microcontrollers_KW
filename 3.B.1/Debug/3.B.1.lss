
3.B.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  0000023c  000002b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d18  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000994  00000000  00000000  000010c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005dd  00000000  00000000  00001a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  0000203c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000049e  00000000  00000000  00002104  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000034f  00000000  00000000  000025a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  000028f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec e3       	ldi	r30, 0x3C	; 60
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 32       	cpi	r26, 0x22	; 34
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	6b d0       	rcall	.+214    	; 0x18a <main>
  b4:	c1 c0       	rjmp	.+386    	; 0x238 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <lcd_strobe_lcd_e>:
	init_4bits_mode();
	lcd_clear();
}

void lcd_strobe_lcd_e(void) {
	PORTC |= (1<<LCD_E);
  b8:	85 b3       	in	r24, 0x15	; 21
  ba:	88 60       	ori	r24, 0x08	; 8
  bc:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	8f ec       	ldi	r24, 0xCF	; 207
  c0:	97 e0       	ldi	r25, 0x07	; 7
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <lcd_strobe_lcd_e+0xa>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <lcd_strobe_lcd_e+0x10>
  c8:	00 00       	nop
	_delay_ms(1);
	PORTC &= ~(1<<LCD_E);
  ca:	85 b3       	in	r24, 0x15	; 21
  cc:	87 7f       	andi	r24, 0xF7	; 247
  ce:	85 bb       	out	0x15, r24	; 21
  d0:	8f ec       	ldi	r24, 0xCF	; 207
  d2:	97 e0       	ldi	r25, 0x07	; 7
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <lcd_strobe_lcd_e+0x1c>
  d8:	00 c0       	rjmp	.+0      	; 0xda <lcd_strobe_lcd_e+0x22>
  da:	00 00       	nop
  dc:	08 95       	ret

000000de <init_4bits_mode>:
	_delay_ms(1);
}

void init_4bits_mode(void) {
  de:	cf 93       	push	r28
	DDRC = 0xFF;
  e0:	8f ef       	ldi	r24, 0xFF	; 255
  e2:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
  e4:	15 ba       	out	0x15, r1	; 21

	PORTC = 0x20;
  e6:	c0 e2       	ldi	r28, 0x20	; 32
  e8:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
  ea:	e6 df       	rcall	.-52     	; 0xb8 <lcd_strobe_lcd_e>

	PORTC = 0x20;
	lcd_strobe_lcd_e();
  ec:	c5 bb       	out	0x15, r28	; 21
  ee:	e4 df       	rcall	.-56     	; 0xb8 <lcd_strobe_lcd_e>
	PORTC = 0x80;
  f0:	80 e8       	ldi	r24, 0x80	; 128
	lcd_strobe_lcd_e();
  f2:	85 bb       	out	0x15, r24	; 21

	PORTC = 0x00;
  f4:	e1 df       	rcall	.-62     	; 0xb8 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
  f6:	15 ba       	out	0x15, r1	; 21
	PORTC = 0xF0;
  f8:	df df       	rcall	.-66     	; 0xb8 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
  fa:	80 ef       	ldi	r24, 0xF0	; 240

	PORTC = 0x00;
  fc:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
  fe:	dc df       	rcall	.-72     	; 0xb8 <lcd_strobe_lcd_e>
 100:	15 ba       	out	0x15, r1	; 21
	PORTC = 0x60;
 102:	da df       	rcall	.-76     	; 0xb8 <lcd_strobe_lcd_e>
 104:	80 e6       	ldi	r24, 0x60	; 96
	lcd_strobe_lcd_e();
 106:	85 bb       	out	0x15, r24	; 21
 108:	d7 df       	rcall	.-82     	; 0xb8 <lcd_strobe_lcd_e>
}
 10a:	cf 91       	pop	r28
 10c:	08 95       	ret

0000010e <display_text>:

void display_text(char *str) {
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
 112:	cf 93       	push	r28
 114:	8c 01       	movw	r16, r24
	for (; *str; str++) {
 116:	0e c0       	rjmp	.+28     	; 0x134 <display_text+0x26>
		unsigned char byte = *str;
		// First nibble.
		PORTC = byte;
 118:	c5 bb       	out	0x15, r28	; 21
		PORTC |= (1<<LCD_RS);
 11a:	85 b3       	in	r24, 0x15	; 21
 11c:	84 60       	ori	r24, 0x04	; 4
 11e:	85 bb       	out	0x15, r24	; 21
		lcd_strobe_lcd_e();
 120:	cb df       	rcall	.-106    	; 0xb8 <lcd_strobe_lcd_e>

		// Second nibble
		PORTC = (byte<<4);
 122:	c2 95       	swap	r28
 124:	c0 7f       	andi	r28, 0xF0	; 240
 126:	c5 bb       	out	0x15, r28	; 21
		PORTC |= (1<<LCD_RS);
 128:	85 b3       	in	r24, 0x15	; 21
 12a:	84 60       	ori	r24, 0x04	; 4
		lcd_strobe_lcd_e();
 12c:	85 bb       	out	0x15, r24	; 21
 12e:	c4 df       	rcall	.-120    	; 0xb8 <lcd_strobe_lcd_e>
	PORTC = 0x60;
	lcd_strobe_lcd_e();
}

void display_text(char *str) {
	for (; *str; str++) {
 130:	0f 5f       	subi	r16, 0xFF	; 255
 132:	1f 4f       	sbci	r17, 0xFF	; 255
 134:	f8 01       	movw	r30, r16
 136:	c0 81       	ld	r28, Z
 138:	c1 11       	cpse	r28, r1
 13a:	ee cf       	rjmp	.-36     	; 0x118 <display_text+0xa>
		// Second nibble
		PORTC = (byte<<4);
		PORTC |= (1<<LCD_RS);
		lcd_strobe_lcd_e();
	}
}
 13c:	cf 91       	pop	r28
 13e:	1f 91       	pop	r17
 140:	0f 91       	pop	r16
 142:	08 95       	ret

00000144 <lcd_write_command>:

void lcd_write_command(unsigned char byte)

{
 144:	cf 93       	push	r28
 146:	c8 2f       	mov	r28, r24
	// First nibble.
	PORTC = byte;
 148:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1<<LCD_RS);
 14a:	85 b3       	in	r24, 0x15	; 21
 14c:	8b 7f       	andi	r24, 0xFB	; 251
 14e:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 150:	b3 df       	rcall	.-154    	; 0xb8 <lcd_strobe_lcd_e>

	// Second nibble
	PORTC = (byte<<4);
 152:	c2 95       	swap	r28
 154:	c0 7f       	andi	r28, 0xF0	; 240
 156:	c5 bb       	out	0x15, r28	; 21
	PORTC &= ~(1<<LCD_RS);
 158:	85 b3       	in	r24, 0x15	; 21
 15a:	8b 7f       	andi	r24, 0xFB	; 251
	lcd_strobe_lcd_e();
 15c:	85 bb       	out	0x15, r24	; 21
 15e:	ac df       	rcall	.-168    	; 0xb8 <lcd_strobe_lcd_e>
}
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <lcd_clear>:

void lcd_clear(void) {
	lcd_write_command(0x01);
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	ee df       	rcall	.-36     	; 0x144 <lcd_write_command>
 168:	8f e9       	ldi	r24, 0x9F	; 159
 16a:	9f e0       	ldi	r25, 0x0F	; 15
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <lcd_clear+0x8>
 170:	00 c0       	rjmp	.+0      	; 0x172 <lcd_clear+0xe>
 172:	00 00       	nop
 174:	08 95       	ret

00000176 <init>:
void lcd_write_data(unsigned char byte);
void lcd_write_command(unsigned char byte);
void lcd_clear(void);

void init() {
	DDRC = 0xFF;
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF;
 17a:	81 bb       	out	0x11, r24	; 17
	init_4bits_mode();
 17c:	b0 df       	rcall	.-160    	; 0xde <init_4bits_mode>
	init_4bits_mode();
 17e:	af df       	rcall	.-162    	; 0xde <init_4bits_mode>
	lcd_clear();
 180:	f1 cf       	rjmp	.-30     	; 0x164 <lcd_clear>
 182:	08 95       	ret

00000184 <set_cursor>:
 184:	80 68       	ori	r24, 0x80	; 128
	lcd_write_command(0x01);
	_delay_ms(2);
}

void set_cursor(int position) {
	lcd_write_command(0x80 | (position & 0x7F));
 186:	de cf       	rjmp	.-68     	; 0x144 <lcd_write_command>
 188:	08 95       	ret

0000018a <main>:
#include <util/delay.h>
#include "LCD.h"

int main (void){
	
	init();
 18a:	f5 df       	rcall	.-22     	; 0x176 <init>
	set_cursor(2);
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	f9 df       	rcall	.-14     	; 0x184 <set_cursor>
	display_text("NIGGER");
 192:	80 e0       	ldi	r24, 0x00	; 0
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	bb df       	rcall	.-138    	; 0x10e <display_text>
	
	DDRD = 0b11111111;
 198:	8f ef       	ldi	r24, 0xFF	; 255
 19a:	81 bb       	out	0x11, r24	; 17
	PORTE = 0x01;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	83 b9       	out	0x03, r24	; 3
	PORTF = 0x01;
 1a0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	
	int i = 0;
 1a4:	c0 e0       	ldi	r28, 0x00	; 0
 1a6:	d0 e0       	ldi	r29, 0x00	; 0
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <main+0x24>
			_delay_ms(400);
			init();
			display_text("Nikkel 2");
		}
		if(i>15){
			i = 16;
 1aa:	c0 e1       	ldi	r28, 0x10	; 16
 1ac:	d0 e0       	ldi	r29, 0x00	; 0
 1ae:	8f e1       	ldi	r24, 0x1F	; 31
 1b0:	9e e4       	ldi	r25, 0x4E	; 78
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <main+0x28>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <main+0x2e>
 1b8:	00 00       	nop
	PORTF = 0x01;
	
	int i = 0;
	while (1) {
		_delay_ms(10);
		if(PINE == 1){
 1ba:	81 b1       	in	r24, 0x01	; 1
 1bc:	81 30       	cpi	r24, 0x01	; 1
 1be:	71 f4       	brne	.+28     	; 0x1dc <main+0x52>
			i++;
 1c0:	21 96       	adiw	r28, 0x01	; 1
 1c2:	9f ef       	ldi	r25, 0xFF	; 255
 1c4:	23 ec       	ldi	r18, 0xC3	; 195
 1c6:	89 e0       	ldi	r24, 0x09	; 9
 1c8:	91 50       	subi	r25, 0x01	; 1
 1ca:	20 40       	sbci	r18, 0x00	; 0
 1cc:	80 40       	sbci	r24, 0x00	; 0
 1ce:	e1 f7       	brne	.-8      	; 0x1c8 <main+0x3e>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <main+0x48>
			_delay_ms(400);
			init();
 1d2:	00 00       	nop
			display_text("Nikkel 1");
 1d4:	d0 df       	rcall	.-96     	; 0x176 <init>
 1d6:	87 e0       	ldi	r24, 0x07	; 7
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	99 df       	rcall	.-206    	; 0x10e <display_text>
		}
		if(PINE == 1 && PIND == 1){
 1dc:	81 b1       	in	r24, 0x01	; 1
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	91 f4       	brne	.+36     	; 0x206 <main+0x7c>
 1e2:	80 b3       	in	r24, 0x10	; 16
 1e4:	81 30       	cpi	r24, 0x01	; 1
 1e6:	79 f4       	brne	.+30     	; 0x206 <main+0x7c>
 1e8:	9f ef       	ldi	r25, 0xFF	; 255
 1ea:	23 ec       	ldi	r18, 0xC3	; 195
 1ec:	89 e0       	ldi	r24, 0x09	; 9
 1ee:	91 50       	subi	r25, 0x01	; 1
 1f0:	20 40       	sbci	r18, 0x00	; 0
 1f2:	80 40       	sbci	r24, 0x00	; 0
 1f4:	e1 f7       	brne	.-8      	; 0x1ee <main+0x64>
			i = 0;
			_delay_ms(400);
			init();
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <main+0x6e>
 1f8:	00 00       	nop
			display_text("Nikkel 3");
 1fa:	bd df       	rcall	.-134    	; 0x176 <init>
 1fc:	80 e1       	ldi	r24, 0x10	; 16
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	86 df       	rcall	.-244    	; 0x10e <display_text>
			_delay_ms(400);
			init();
			display_text("Nikkel 1");
		}
		if(PINE == 1 && PIND == 1){
			i = 0;
 202:	c0 e0       	ldi	r28, 0x00	; 0
 204:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_ms(400);
			init();
			display_text("Nikkel 3");
		}
		if(PIND == 1 && i>5){
 206:	80 b3       	in	r24, 0x10	; 16
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	89 f4       	brne	.+34     	; 0x22e <main+0xa4>
 20c:	c6 30       	cpi	r28, 0x06	; 6
 20e:	d1 05       	cpc	r29, r1
 210:	74 f0       	brlt	.+28     	; 0x22e <main+0xa4>
			i--;
 212:	21 97       	sbiw	r28, 0x01	; 1
 214:	9f ef       	ldi	r25, 0xFF	; 255
 216:	23 ec       	ldi	r18, 0xC3	; 195
 218:	89 e0       	ldi	r24, 0x09	; 9
 21a:	91 50       	subi	r25, 0x01	; 1
 21c:	20 40       	sbci	r18, 0x00	; 0
 21e:	80 40       	sbci	r24, 0x00	; 0
 220:	e1 f7       	brne	.-8      	; 0x21a <main+0x90>
			_delay_ms(400);
			init();
 222:	00 c0       	rjmp	.+0      	; 0x224 <main+0x9a>
 224:	00 00       	nop
			display_text("Nikkel 2");
 226:	a7 df       	rcall	.-178    	; 0x176 <init>
 228:	89 e1       	ldi	r24, 0x19	; 25
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	70 df       	rcall	.-288    	; 0x10e <display_text>
		}
		if(i>15){
 22e:	c0 31       	cpi	r28, 0x10	; 16
 230:	d1 05       	cpc	r29, r1
 232:	0c f0       	brlt	.+2      	; 0x236 <main+0xac>
 234:	ba cf       	rjmp	.-140    	; 0x1aa <main+0x20>
 236:	bb cf       	rjmp	.-138    	; 0x1ae <main+0x24>

00000238 <_exit>:
 238:	f8 94       	cli

0000023a <__stop_program>:
 23a:	ff cf       	rjmp	.-2      	; 0x23a <__stop_program>
