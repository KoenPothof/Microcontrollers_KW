
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000626  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000626  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000658  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000694  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000dd4  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008f8  00000000  00000000  000014e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005d7  00000000  00000000  00001de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  000023b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000051b  00000000  00000000  000024c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007a2  00000000  00000000  000029e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00003185  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	87 d1       	rcall	.+782    	; 0x3a8 <main>
  9a:	99 c2       	rjmp	.+1330   	; 0x5ce <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <spi_masterInit>:
}

// Set display off ('shut down')
void displayOff()
{
	spi_writeWord(0x0C, 0x00); // Afsluiten -> 1 = normaal
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	87 bb       	out	0x17, r24	; 23
  a2:	87 b3       	in	r24, 0x17	; 23
  a4:	87 7f       	andi	r24, 0xF7	; 247
  a6:	87 bb       	out	0x17, r24	; 23
  a8:	88 b3       	in	r24, 0x18	; 24
  aa:	81 60       	ori	r24, 0x01	; 1
  ac:	88 bb       	out	0x18, r24	; 24
  ae:	82 e5       	ldi	r24, 0x52	; 82
  b0:	8d b9       	out	0x0d, r24	; 13
  b2:	08 95       	ret

000000b4 <spi_write>:
  b4:	8f b9       	out	0x0f, r24	; 15
  b6:	77 9b       	sbis	0x0e, 7	; 14
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <spi_write+0x2>
  ba:	08 95       	ret

000000bc <spi_slaveSelect>:
  bc:	98 b3       	in	r25, 0x18	; 24
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <spi_slaveSelect+0xc>
  c4:	22 0f       	add	r18, r18
  c6:	33 1f       	adc	r19, r19
  c8:	8a 95       	dec	r24
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <spi_slaveSelect+0x8>
  cc:	20 95       	com	r18
  ce:	29 23       	and	r18, r25
  d0:	28 bb       	out	0x18, r18	; 24
  d2:	08 95       	ret

000000d4 <spi_slaveDeSelect>:
  d4:	98 b3       	in	r25, 0x18	; 24
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <spi_slaveDeSelect+0xc>
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	8a 95       	dec	r24
  e2:	e2 f7       	brpl	.-8      	; 0xdc <spi_slaveDeSelect+0x8>
  e4:	29 2b       	or	r18, r25
  e6:	28 bb       	out	0x18, r18	; 24
  e8:	08 95       	ret

000000ea <spi_writeWord>:
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	d8 2f       	mov	r29, r24
  f0:	c6 2f       	mov	r28, r22
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	e3 df       	rcall	.-58     	; 0xbc <spi_slaveSelect>
  f6:	8d 2f       	mov	r24, r29
  f8:	dd df       	rcall	.-70     	; 0xb4 <spi_write>
  fa:	8c 2f       	mov	r24, r28
  fc:	db df       	rcall	.-74     	; 0xb4 <spi_write>
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	e9 df       	rcall	.-46     	; 0xd4 <spi_slaveDeSelect>
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <displayDriverInit>:
 108:	6f ef       	ldi	r22, 0xFF	; 255
 10a:	89 e0       	ldi	r24, 0x09	; 9
 10c:	ee df       	rcall	.-36     	; 0xea <spi_writeWord>
 10e:	6f e0       	ldi	r22, 0x0F	; 15
 110:	8a e0       	ldi	r24, 0x0A	; 10
 112:	eb df       	rcall	.-42     	; 0xea <spi_writeWord>
 114:	6f e0       	ldi	r22, 0x0F	; 15
 116:	8b e0       	ldi	r24, 0x0B	; 11
 118:	e8 df       	rcall	.-48     	; 0xea <spi_writeWord>
 11a:	61 e0       	ldi	r22, 0x01	; 1
 11c:	8c e0       	ldi	r24, 0x0C	; 12
 11e:	e5 cf       	rjmp	.-54     	; 0xea <spi_writeWord>
 120:	08 95       	ret

00000122 <writeLedDisplay>:
}

void writeLedDisplay(int value){
 122:	ef 92       	push	r14
 124:	ff 92       	push	r15
 126:	0f 93       	push	r16
 128:	1f 93       	push	r17
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	9c 01       	movw	r18, r24
	int digit3 = -1;
	char digit4 = -1;
	
	
	// aan de hand van de value worden de cijfers gesplitst in de digits, bij negatieve value worden de cijfers een digit opgeschoven en komt er een min-teken voor
	if (value < 10 && value >= 0){
 130:	8a 30       	cpi	r24, 0x0A	; 10
 132:	91 05       	cpc	r25, r1
 134:	08 f4       	brcc	.+2      	; 0x138 <writeLedDisplay+0x16>
 136:	a7 c0       	rjmp	.+334    	; 0x286 <writeLedDisplay+0x164>
		digit4 = 0x0F; // Anders print hij een punt op de display
		digit1 = value;
		} else if (value >= 10 && value < 100){
 138:	ac 01       	movw	r20, r24
 13a:	4a 50       	subi	r20, 0x0A	; 10
 13c:	51 09       	sbc	r21, r1
 13e:	4a 35       	cpi	r20, 0x5A	; 90
 140:	51 05       	cpc	r21, r1
 142:	60 f4       	brcc	.+24     	; 0x15c <writeLedDisplay+0x3a>
		digit4 = 0x0F;
		digit2 = value / 10;
		digit1 = value % 10;
 144:	6a e0       	ldi	r22, 0x0A	; 10
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	1b d2       	rcall	.+1078   	; 0x580 <__divmodhi4>
 14a:	eb 01       	movw	r28, r22
 14c:	9c 01       	movw	r18, r24
	// aan de hand van de value worden de cijfers gesplitst in de digits, bij negatieve value worden de cijfers een digit opgeschoven en komt er een min-teken voor
	if (value < 10 && value >= 0){
		digit4 = 0x0F; // Anders print hij een punt op de display
		digit1 = value;
		} else if (value >= 10 && value < 100){
		digit4 = 0x0F;
 14e:	0f 2e       	mov	r0, r31
 150:	ff e0       	ldi	r31, 0x0F	; 15
 152:	ff 2e       	mov	r15, r31
 154:	f0 2d       	mov	r31, r0
void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
	int digit2 = -1;
	int digit3 = -1;
 156:	0f ef       	ldi	r16, 0xFF	; 255
 158:	1f ef       	ldi	r17, 0xFF	; 255
 15a:	b1 c0       	rjmp	.+354    	; 0x2be <writeLedDisplay+0x19c>
		digit1 = value;
		} else if (value >= 10 && value < 100){
		digit4 = 0x0F;
		digit2 = value / 10;
		digit1 = value % 10;
		} else if (value >= 100 && value < 1000){
 15c:	ac 01       	movw	r20, r24
 15e:	44 56       	subi	r20, 0x64	; 100
 160:	51 09       	sbc	r21, r1
 162:	44 38       	cpi	r20, 0x84	; 132
 164:	53 40       	sbci	r21, 0x03	; 3
 166:	b0 f4       	brcc	.+44     	; 0x194 <writeLedDisplay+0x72>
		digit4 = 0x0F;
		digit3 = value / 100;
 168:	64 e6       	ldi	r22, 0x64	; 100
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	09 d2       	rcall	.+1042   	; 0x580 <__divmodhi4>
 16e:	8b 01       	movw	r16, r22
		digit2 = (value / 10) % 10;
 170:	ea e0       	ldi	r30, 0x0A	; 10
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	c9 01       	movw	r24, r18
 176:	bf 01       	movw	r22, r30
 178:	03 d2       	rcall	.+1030   	; 0x580 <__divmodhi4>
 17a:	f8 2e       	mov	r15, r24
 17c:	49 2f       	mov	r20, r25
 17e:	cb 01       	movw	r24, r22
 180:	bf 01       	movw	r22, r30
 182:	fe d1       	rcall	.+1020   	; 0x580 <__divmodhi4>
 184:	ec 01       	movw	r28, r24
		digit1 = value % 10;
 186:	2f 2d       	mov	r18, r15
 188:	34 2f       	mov	r19, r20
		} else if (value >= 10 && value < 100){
		digit4 = 0x0F;
		digit2 = value / 10;
		digit1 = value % 10;
		} else if (value >= 100 && value < 1000){
		digit4 = 0x0F;
 18a:	0f 2e       	mov	r0, r31
 18c:	ff e0       	ldi	r31, 0x0F	; 15
 18e:	ff 2e       	mov	r15, r31
 190:	f0 2d       	mov	r31, r0
 192:	95 c0       	rjmp	.+298    	; 0x2be <writeLedDisplay+0x19c>
		digit3 = value / 100;
		digit2 = (value / 10) % 10;
		digit1 = value % 10;
		} else if (value >= 1000 && value < 10000){
 194:	ac 01       	movw	r20, r24
 196:	48 5e       	subi	r20, 0xE8	; 232
 198:	53 40       	sbci	r21, 0x03	; 3
 19a:	48 32       	cpi	r20, 0x28	; 40
 19c:	53 42       	sbci	r21, 0x23	; 35
		digit4 = value / 1000;
 19e:	d0 f4       	brcc	.+52     	; 0x1d4 <writeLedDisplay+0xb2>
 1a0:	68 ee       	ldi	r22, 0xE8	; 232
 1a2:	73 e0       	ldi	r23, 0x03	; 3
 1a4:	ed d1       	rcall	.+986    	; 0x580 <__divmodhi4>
		digit3 = (value / 100) % 10;
 1a6:	f6 2e       	mov	r15, r22
 1a8:	c9 01       	movw	r24, r18
 1aa:	64 e6       	ldi	r22, 0x64	; 100
 1ac:	70 e0       	ldi	r23, 0x00	; 0
 1ae:	e8 d1       	rcall	.+976    	; 0x580 <__divmodhi4>
 1b0:	cb 01       	movw	r24, r22
 1b2:	ea e0       	ldi	r30, 0x0A	; 10
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	bf 01       	movw	r22, r30
 1b8:	e3 d1       	rcall	.+966    	; 0x580 <__divmodhi4>
		digit2 = (value / 10) % 10;
 1ba:	8c 01       	movw	r16, r24
 1bc:	c9 01       	movw	r24, r18
 1be:	bf 01       	movw	r22, r30
 1c0:	df d1       	rcall	.+958    	; 0x580 <__divmodhi4>
 1c2:	e8 2e       	mov	r14, r24
 1c4:	49 2f       	mov	r20, r25
 1c6:	cb 01       	movw	r24, r22
 1c8:	bf 01       	movw	r22, r30
 1ca:	da d1       	rcall	.+948    	; 0x580 <__divmodhi4>
 1cc:	ec 01       	movw	r28, r24
		digit1 = value % 10;
 1ce:	2e 2d       	mov	r18, r14
 1d0:	34 2f       	mov	r19, r20
 1d2:	75 c0       	rjmp	.+234    	; 0x2be <writeLedDisplay+0x19c>
		} else if (value >= 10000){
 1d4:	80 31       	cpi	r24, 0x10	; 16
 1d6:	47 e2       	ldi	r20, 0x27	; 39
 1d8:	94 07       	cpc	r25, r20
 1da:	0c f0       	brlt	.+2      	; 0x1de <writeLedDisplay+0xbc>
 1dc:	5d c0       	rjmp	.+186    	; 0x298 <writeLedDisplay+0x176>
		digit4 = 9;
		digit3 = 9;
		digit2 = 9;
		digit1 = 9;
		} else if (value < 0 && value > -10){
 1de:	ac 01       	movw	r20, r24
 1e0:	47 5f       	subi	r20, 0xF7	; 247
 1e2:	5f 4f       	sbci	r21, 0xFF	; 255
 1e4:	49 30       	cpi	r20, 0x09	; 9
 1e6:	51 05       	cpc	r21, r1
 1e8:	68 f4       	brcc	.+26     	; 0x204 <writeLedDisplay+0xe2>
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
		value = (value * -1);
 1ea:	00 27       	eor	r16, r16
 1ec:	11 27       	eor	r17, r17
 1ee:	08 1b       	sub	r16, r24
 1f0:	19 0b       	sbc	r17, r25
		digit4 = 9;
		digit3 = 9;
		digit2 = 9;
		digit1 = 9;
		} else if (value < 0 && value > -10){
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
 1f2:	0f 2e       	mov	r0, r31
 1f4:	ff e0       	ldi	r31, 0x0F	; 15
 1f6:	ff 2e       	mov	r15, r31
 1f8:	f0 2d       	mov	r31, r0

void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
	int digit2 = -1;
 1fa:	cf ef       	ldi	r28, 0xFF	; 255
 1fc:	df ef       	ldi	r29, 0xFF	; 255
}

void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
 1fe:	2f ef       	ldi	r18, 0xFF	; 255
 200:	3f ef       	ldi	r19, 0xFF	; 255
 202:	5d c0       	rjmp	.+186    	; 0x2be <writeLedDisplay+0x19c>
		digit1 = 9;
		} else if (value < 0 && value > -10){
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
		value = (value * -1);
		digit3 = value;
		} else if (value <= -10 && value > -100){
 204:	ac 01       	movw	r20, r24
 206:	4d 59       	subi	r20, 0x9D	; 157
 208:	5f 4f       	sbci	r21, 0xFF	; 255
 20a:	4a 35       	cpi	r20, 0x5A	; 90
 20c:	51 05       	cpc	r21, r1
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
		value = (value * -1);
 20e:	80 f4       	brcc	.+32     	; 0x230 <writeLedDisplay+0x10e>
 210:	88 27       	eor	r24, r24
 212:	99 27       	eor	r25, r25
 214:	82 1b       	sub	r24, r18
		digit3 = value / 10;
		digit2 = value % 10;
 216:	93 0b       	sbc	r25, r19
 218:	6a e0       	ldi	r22, 0x0A	; 10
 21a:	70 e0       	ldi	r23, 0x00	; 0
 21c:	b1 d1       	rcall	.+866    	; 0x580 <__divmodhi4>
 21e:	8b 01       	movw	r16, r22
 220:	ec 01       	movw	r28, r24
		} else if (value < 0 && value > -10){
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
		value = (value * -1);
		digit3 = value;
		} else if (value <= -10 && value > -100){
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
 222:	0f 2e       	mov	r0, r31
 224:	ff e0       	ldi	r31, 0x0F	; 15
 226:	ff 2e       	mov	r15, r31
 228:	f0 2d       	mov	r31, r0
}

void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
 22a:	2f ef       	ldi	r18, 0xFF	; 255
 22c:	3f ef       	ldi	r19, 0xFF	; 255
 22e:	47 c0       	rjmp	.+142    	; 0x2be <writeLedDisplay+0x19c>
		} else if (value <= -10 && value > -100){
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
		value = (value * -1);
		digit3 = value / 10;
		digit2 = value % 10;
		} else if (value <= -100 && value > -1000){
 230:	89 51       	subi	r24, 0x19	; 25
 232:	9c 4f       	sbci	r25, 0xFC	; 252
 234:	84 38       	cpi	r24, 0x84	; 132
 236:	93 40       	sbci	r25, 0x03	; 3
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
		value = (value * -1);
 238:	d0 f4       	brcc	.+52     	; 0x26e <writeLedDisplay+0x14c>
 23a:	31 95       	neg	r19
		digit3 = value / 100;
 23c:	21 95       	neg	r18
 23e:	31 09       	sbc	r19, r1
 240:	c9 01       	movw	r24, r18
 242:	64 e6       	ldi	r22, 0x64	; 100
 244:	70 e0       	ldi	r23, 0x00	; 0
		digit2 = (value / 10) % 10;
 246:	9c d1       	rcall	.+824    	; 0x580 <__divmodhi4>
 248:	8b 01       	movw	r16, r22
 24a:	ea e0       	ldi	r30, 0x0A	; 10
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	c9 01       	movw	r24, r18
 250:	bf 01       	movw	r22, r30
 252:	96 d1       	rcall	.+812    	; 0x580 <__divmodhi4>
 254:	f8 2e       	mov	r15, r24
 256:	49 2f       	mov	r20, r25
 258:	cb 01       	movw	r24, r22
 25a:	bf 01       	movw	r22, r30
 25c:	91 d1       	rcall	.+802    	; 0x580 <__divmodhi4>
 25e:	ec 01       	movw	r28, r24
		digit1 = value % 10;
 260:	2f 2d       	mov	r18, r15
 262:	34 2f       	mov	r19, r20
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
		value = (value * -1);
		digit3 = value / 10;
		digit2 = value % 10;
		} else if (value <= -100 && value > -1000){
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
 264:	0f 2e       	mov	r0, r31
 266:	ff e0       	ldi	r31, 0x0F	; 15
 268:	ff 2e       	mov	r15, r31
 26a:	f0 2d       	mov	r31, r0
 26c:	28 c0       	rjmp	.+80     	; 0x2be <writeLedDisplay+0x19c>
		value = (value * -1);
		digit3 = value / 100;
		digit2 = (value / 10) % 10;
		digit1 = value % 10;
		} else if (value <= -1000){
 26e:	29 31       	cpi	r18, 0x19	; 25
 270:	3c 4f       	sbci	r19, 0xFC	; 252
 272:	ec f0       	brlt	.+58     	; 0x2ae <writeLedDisplay+0x18c>
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
	int digit2 = -1;
	int digit3 = -1;
	char digit4 = -1;
 274:	ff 24       	eor	r15, r15
 276:	fa 94       	dec	r15
void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
	int digit2 = -1;
	int digit3 = -1;
 278:	0f ef       	ldi	r16, 0xFF	; 255
 27a:	1f ef       	ldi	r17, 0xFF	; 255

void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
	int digit2 = -1;
 27c:	cf ef       	ldi	r28, 0xFF	; 255
 27e:	df ef       	ldi	r29, 0xFF	; 255
}

void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
 280:	2f ef       	ldi	r18, 0xFF	; 255
 282:	3f ef       	ldi	r19, 0xFF	; 255
 284:	1c c0       	rjmp	.+56     	; 0x2be <writeLedDisplay+0x19c>
	char digit4 = -1;
	
	
	// aan de hand van de value worden de cijfers gesplitst in de digits, bij negatieve value worden de cijfers een digit opgeschoven en komt er een min-teken voor
	if (value < 10 && value >= 0){
		digit4 = 0x0F; // Anders print hij een punt op de display
 286:	0f 2e       	mov	r0, r31
 288:	ff e0       	ldi	r31, 0x0F	; 15
 28a:	ff 2e       	mov	r15, r31
 28c:	f0 2d       	mov	r31, r0
void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
	int digit2 = -1;
	int digit3 = -1;
 28e:	0f ef       	ldi	r16, 0xFF	; 255
 290:	1f ef       	ldi	r17, 0xFF	; 255

void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
	int digit2 = -1;
 292:	cf ef       	ldi	r28, 0xFF	; 255
 294:	df ef       	ldi	r29, 0xFF	; 255
 296:	13 c0       	rjmp	.+38     	; 0x2be <writeLedDisplay+0x19c>
		digit4 = value / 1000;
		digit3 = (value / 100) % 10;
		digit2 = (value / 10) % 10;
		digit1 = value % 10;
		} else if (value >= 10000){
		digit4 = 9;
 298:	0f 2e       	mov	r0, r31
 29a:	f9 e0       	ldi	r31, 0x09	; 9
 29c:	ff 2e       	mov	r15, r31
 29e:	f0 2d       	mov	r31, r0
		digit3 = 9;
 2a0:	09 e0       	ldi	r16, 0x09	; 9
 2a2:	10 e0       	ldi	r17, 0x00	; 0
		digit2 = 9;
 2a4:	c9 e0       	ldi	r28, 0x09	; 9
 2a6:	d0 e0       	ldi	r29, 0x00	; 0
		digit1 = 9;
 2a8:	29 e0       	ldi	r18, 0x09	; 9
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	08 c0       	rjmp	.+16     	; 0x2be <writeLedDisplay+0x19c>
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
	int digit2 = -1;
	int digit3 = -1;
	char digit4 = -1;
 2ae:	ff 24       	eor	r15, r15
		digit3 = value / 100;
		digit2 = (value / 10) % 10;
		digit1 = value % 10;
		} else if (value <= -1000){
		value = (value * -1);
		digit3 = 9;
 2b0:	fa 94       	dec	r15
 2b2:	09 e0       	ldi	r16, 0x09	; 9
		digit2 = 9;
 2b4:	10 e0       	ldi	r17, 0x00	; 0
 2b6:	c9 e0       	ldi	r28, 0x09	; 9
		digit1 = 9;
 2b8:	d0 e0       	ldi	r29, 0x00	; 0
 2ba:	29 e0       	ldi	r18, 0x09	; 9
		}
	
	// check of de digits zijn veranderd en print ze dan
	if (digit1 != -1){
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	2f 3f       	cpi	r18, 0xFF	; 255
 2c0:	9f ef       	ldi	r25, 0xFF	; 255
		spi_writeWord(1, digit1);
 2c2:	39 07       	cpc	r19, r25
 2c4:	51 f0       	breq	.+20     	; 0x2da <writeLedDisplay+0x1b8>
 2c6:	62 2f       	mov	r22, r18
 2c8:	81 e0       	ldi	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ca:	0f df       	rcall	.-482    	; 0xea <spi_writeWord>
 2cc:	8f e1       	ldi	r24, 0x1F	; 31
 2ce:	9e e4       	ldi	r25, 0x4E	; 78
 2d0:	01 97       	sbiw	r24, 0x01	; 1
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <writeLedDisplay+0x1ae>
 2d4:	00 c0       	rjmp	.+0      	; 0x2d6 <writeLedDisplay+0x1b4>
 2d6:	00 00       	nop
		_delay_ms(10);
		} else {
		spi_writeWord(1, 0x0F);
 2d8:	09 c0       	rjmp	.+18     	; 0x2ec <writeLedDisplay+0x1ca>
 2da:	6f e0       	ldi	r22, 0x0F	; 15
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	05 df       	rcall	.-502    	; 0xea <spi_writeWord>
 2e0:	8f e1       	ldi	r24, 0x1F	; 31
 2e2:	9e e4       	ldi	r25, 0x4E	; 78
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <writeLedDisplay+0x1c2>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <writeLedDisplay+0x1c8>
		_delay_ms(10);
	}
	if (digit2 != -1){
 2ea:	00 00       	nop
 2ec:	cf 3f       	cpi	r28, 0xFF	; 255
 2ee:	9f ef       	ldi	r25, 0xFF	; 255
		spi_writeWord(2, digit2);
 2f0:	d9 07       	cpc	r29, r25
 2f2:	51 f0       	breq	.+20     	; 0x308 <writeLedDisplay+0x1e6>
 2f4:	6c 2f       	mov	r22, r28
 2f6:	82 e0       	ldi	r24, 0x02	; 2
 2f8:	f8 de       	rcall	.-528    	; 0xea <spi_writeWord>
 2fa:	8f e1       	ldi	r24, 0x1F	; 31
 2fc:	9e e4       	ldi	r25, 0x4E	; 78
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <writeLedDisplay+0x1dc>
 302:	00 c0       	rjmp	.+0      	; 0x304 <writeLedDisplay+0x1e2>
		_delay_ms(10);
		} else {
		spi_writeWord(2, 0x0F);
 304:	00 00       	nop
 306:	09 c0       	rjmp	.+18     	; 0x31a <writeLedDisplay+0x1f8>
 308:	6f e0       	ldi	r22, 0x0F	; 15
 30a:	82 e0       	ldi	r24, 0x02	; 2
 30c:	ee de       	rcall	.-548    	; 0xea <spi_writeWord>
 30e:	8f e1       	ldi	r24, 0x1F	; 31
 310:	9e e4       	ldi	r25, 0x4E	; 78
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <writeLedDisplay+0x1f0>
		_delay_ms(10);
	}
	if (digit3 != -1){
 316:	00 c0       	rjmp	.+0      	; 0x318 <writeLedDisplay+0x1f6>
 318:	00 00       	nop
 31a:	0f 3f       	cpi	r16, 0xFF	; 255
 31c:	9f ef       	ldi	r25, 0xFF	; 255
		spi_writeWord(3, digit3);
 31e:	19 07       	cpc	r17, r25
 320:	51 f0       	breq	.+20     	; 0x336 <writeLedDisplay+0x214>
 322:	60 2f       	mov	r22, r16
 324:	83 e0       	ldi	r24, 0x03	; 3
 326:	e1 de       	rcall	.-574    	; 0xea <spi_writeWord>
 328:	8f e1       	ldi	r24, 0x1F	; 31
 32a:	9e e4       	ldi	r25, 0x4E	; 78
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <writeLedDisplay+0x20a>
 330:	00 c0       	rjmp	.+0      	; 0x332 <writeLedDisplay+0x210>
		_delay_ms(10);
		} else {
		spi_writeWord(3, 0x0F);
 332:	00 00       	nop
 334:	09 c0       	rjmp	.+18     	; 0x348 <writeLedDisplay+0x226>
 336:	6f e0       	ldi	r22, 0x0F	; 15
 338:	83 e0       	ldi	r24, 0x03	; 3
 33a:	d7 de       	rcall	.-594    	; 0xea <spi_writeWord>
 33c:	8f e1       	ldi	r24, 0x1F	; 31
 33e:	9e e4       	ldi	r25, 0x4E	; 78
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <writeLedDisplay+0x21e>
 344:	00 c0       	rjmp	.+0      	; 0x346 <writeLedDisplay+0x224>
		_delay_ms(10);
	}
	if (digit4 != -1){
		spi_writeWord(4, digit4);
 346:	00 00       	nop
 348:	6f 2d       	mov	r22, r15
 34a:	84 e0       	ldi	r24, 0x04	; 4
 34c:	ce de       	rcall	.-612    	; 0xea <spi_writeWord>
 34e:	8f e1       	ldi	r24, 0x1F	; 31
 350:	9e e4       	ldi	r25, 0x4E	; 78
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	f1 f7       	brne	.-4      	; 0x352 <writeLedDisplay+0x230>
 356:	00 c0       	rjmp	.+0      	; 0x358 <writeLedDisplay+0x236>
 358:	00 00       	nop
		_delay_ms(10);
		} else {
		spi_writeWord(4, digit4);
		_delay_ms(10);
	}
}
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	1f 91       	pop	r17
 360:	0f 91       	pop	r16
 362:	ff 90       	pop	r15
 364:	ef 90       	pop	r14
 366:	08 95       	ret

00000368 <timerStart>:

void timerStart(){
	TCCR1B |= ((1 << CS10 ) | (1 << CS11 )); // maak timer Fcpu/64
 368:	8e b5       	in	r24, 0x2e	; 46
 36a:	83 60       	ori	r24, 0x03	; 3
 36c:	8e bd       	out	0x2e, r24	; 46
	double seconden = 9995;
 36e:	0f 2e       	mov	r0, r31
 370:	c1 2c       	mov	r12, r1
 372:	fc e2       	ldi	r31, 0x2C	; 44
 374:	df 2e       	mov	r13, r31
 376:	fc e1       	ldi	r31, 0x1C	; 28
 378:	ef 2e       	mov	r14, r31
 37a:	f6 e4       	ldi	r31, 0x46	; 70
 37c:	ff 2e       	mov	r15, r31
 37e:	f0 2d       	mov	r31, r0
	
	for (;;) {
		// Wacht tot de timer op 1 seconden zit, dan true
		if (TCNT1 >= 62496) {
 380:	8c b5       	in	r24, 0x2c	; 44
 382:	9d b5       	in	r25, 0x2d	; 45
 384:	80 32       	cpi	r24, 0x20	; 32
 386:	94 4f       	sbci	r25, 0xF4	; 244
 388:	d8 f3       	brcs	.-10     	; 0x380 <timerStart+0x18>
			TCNT1 = 0; // Reset timer
 38a:	1d bc       	out	0x2d, r1	; 45
 38c:	1c bc       	out	0x2c, r1	; 44
			seconden+=0.5;
 38e:	20 e0       	ldi	r18, 0x00	; 0
 390:	30 e0       	ldi	r19, 0x00	; 0
 392:	40 e0       	ldi	r20, 0x00	; 0
 394:	5f e3       	ldi	r21, 0x3F	; 63
 396:	c7 01       	movw	r24, r14
 398:	b6 01       	movw	r22, r12
 39a:	0c d0       	rcall	.+24     	; 0x3b4 <__addsf3>
 39c:	6b 01       	movw	r12, r22
 39e:	7c 01       	movw	r14, r24
			writeLedDisplay(seconden);
 3a0:	6d d0       	rcall	.+218    	; 0x47c <__fixsfsi>
 3a2:	cb 01       	movw	r24, r22
 3a4:	be de       	rcall	.-644    	; 0x122 <writeLedDisplay>
 3a6:	ec cf       	rjmp	.-40     	; 0x380 <timerStart+0x18>

000003a8 <main>:
 3a8:	81 e0       	ldi	r24, 0x01	; 1

int main()
{
	// inilialize
	
	DDRB=0x01;					  	// Set PB0 pin as output for display select
 3aa:	87 bb       	out	0x17, r24	; 23
	spi_masterInit();              	// Initialize spi module
 3ac:	78 de       	rcall	.-784    	; 0x9e <spi_masterInit>
	displayDriverInit();            // Initialize display chip
 3ae:	ac de       	rcall	.-680    	; 0x108 <displayDriverInit>
	timerStart(); //start het tellen
 3b0:	db df       	rcall	.-74     	; 0x368 <timerStart>

000003b2 <__subsf3>:
 3b2:	50 58       	subi	r21, 0x80	; 128

000003b4 <__addsf3>:
 3b4:	bb 27       	eor	r27, r27
 3b6:	aa 27       	eor	r26, r26
 3b8:	0e d0       	rcall	.+28     	; 0x3d6 <__addsf3x>
 3ba:	a8 c0       	rjmp	.+336    	; 0x50c <__fp_round>
 3bc:	99 d0       	rcall	.+306    	; 0x4f0 <__fp_pscA>
 3be:	30 f0       	brcs	.+12     	; 0x3cc <__addsf3+0x18>
 3c0:	9e d0       	rcall	.+316    	; 0x4fe <__fp_pscB>
 3c2:	20 f0       	brcs	.+8      	; 0x3cc <__addsf3+0x18>
 3c4:	31 f4       	brne	.+12     	; 0x3d2 <__addsf3+0x1e>
 3c6:	9f 3f       	cpi	r25, 0xFF	; 255
 3c8:	11 f4       	brne	.+4      	; 0x3ce <__addsf3+0x1a>
 3ca:	1e f4       	brtc	.+6      	; 0x3d2 <__addsf3+0x1e>
 3cc:	8e c0       	rjmp	.+284    	; 0x4ea <__fp_nan>
 3ce:	0e f4       	brtc	.+2      	; 0x3d2 <__addsf3+0x1e>
 3d0:	e0 95       	com	r30
 3d2:	e7 fb       	bst	r30, 7
 3d4:	84 c0       	rjmp	.+264    	; 0x4de <__fp_inf>

000003d6 <__addsf3x>:
 3d6:	e9 2f       	mov	r30, r25
 3d8:	aa d0       	rcall	.+340    	; 0x52e <__fp_split3>
 3da:	80 f3       	brcs	.-32     	; 0x3bc <__addsf3+0x8>
 3dc:	ba 17       	cp	r27, r26
 3de:	62 07       	cpc	r22, r18
 3e0:	73 07       	cpc	r23, r19
 3e2:	84 07       	cpc	r24, r20
 3e4:	95 07       	cpc	r25, r21
 3e6:	18 f0       	brcs	.+6      	; 0x3ee <__addsf3x+0x18>
 3e8:	71 f4       	brne	.+28     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3ea:	9e f5       	brtc	.+102    	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 3ec:	c2 c0       	rjmp	.+388    	; 0x572 <__fp_zero>
 3ee:	0e f4       	brtc	.+2      	; 0x3f2 <__addsf3x+0x1c>
 3f0:	e0 95       	com	r30
 3f2:	0b 2e       	mov	r0, r27
 3f4:	ba 2f       	mov	r27, r26
 3f6:	a0 2d       	mov	r26, r0
 3f8:	0b 01       	movw	r0, r22
 3fa:	b9 01       	movw	r22, r18
 3fc:	90 01       	movw	r18, r0
 3fe:	0c 01       	movw	r0, r24
 400:	ca 01       	movw	r24, r20
 402:	a0 01       	movw	r20, r0
 404:	11 24       	eor	r1, r1
 406:	ff 27       	eor	r31, r31
 408:	59 1b       	sub	r21, r25
 40a:	99 f0       	breq	.+38     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 40c:	59 3f       	cpi	r21, 0xF9	; 249
 40e:	50 f4       	brcc	.+20     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 410:	50 3e       	cpi	r21, 0xE0	; 224
 412:	68 f1       	brcs	.+90     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 414:	1a 16       	cp	r1, r26
 416:	f0 40       	sbci	r31, 0x00	; 0
 418:	a2 2f       	mov	r26, r18
 41a:	23 2f       	mov	r18, r19
 41c:	34 2f       	mov	r19, r20
 41e:	44 27       	eor	r20, r20
 420:	58 5f       	subi	r21, 0xF8	; 248
 422:	f3 cf       	rjmp	.-26     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 424:	46 95       	lsr	r20
 426:	37 95       	ror	r19
 428:	27 95       	ror	r18
 42a:	a7 95       	ror	r26
 42c:	f0 40       	sbci	r31, 0x00	; 0
 42e:	53 95       	inc	r21
 430:	c9 f7       	brne	.-14     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 432:	7e f4       	brtc	.+30     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
 434:	1f 16       	cp	r1, r31
 436:	ba 0b       	sbc	r27, r26
 438:	62 0b       	sbc	r22, r18
 43a:	73 0b       	sbc	r23, r19
 43c:	84 0b       	sbc	r24, r20
 43e:	ba f0       	brmi	.+46     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 440:	91 50       	subi	r25, 0x01	; 1
 442:	a1 f0       	breq	.+40     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 444:	ff 0f       	add	r31, r31
 446:	bb 1f       	adc	r27, r27
 448:	66 1f       	adc	r22, r22
 44a:	77 1f       	adc	r23, r23
 44c:	88 1f       	adc	r24, r24
 44e:	c2 f7       	brpl	.-16     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 450:	0e c0       	rjmp	.+28     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 452:	ba 0f       	add	r27, r26
 454:	62 1f       	adc	r22, r18
 456:	73 1f       	adc	r23, r19
 458:	84 1f       	adc	r24, r20
 45a:	48 f4       	brcc	.+18     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 45c:	87 95       	ror	r24
 45e:	77 95       	ror	r23
 460:	67 95       	ror	r22
 462:	b7 95       	ror	r27
 464:	f7 95       	ror	r31
 466:	9e 3f       	cpi	r25, 0xFE	; 254
 468:	08 f0       	brcs	.+2      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 46a:	b3 cf       	rjmp	.-154    	; 0x3d2 <__addsf3+0x1e>
 46c:	93 95       	inc	r25
 46e:	88 0f       	add	r24, r24
 470:	08 f0       	brcs	.+2      	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 472:	99 27       	eor	r25, r25
 474:	ee 0f       	add	r30, r30
 476:	97 95       	ror	r25
 478:	87 95       	ror	r24
 47a:	08 95       	ret

0000047c <__fixsfsi>:
 47c:	04 d0       	rcall	.+8      	; 0x486 <__fixunssfsi>
 47e:	68 94       	set
 480:	b1 11       	cpse	r27, r1
 482:	78 c0       	rjmp	.+240    	; 0x574 <__fp_szero>
 484:	08 95       	ret

00000486 <__fixunssfsi>:
 486:	5b d0       	rcall	.+182    	; 0x53e <__fp_splitA>
 488:	88 f0       	brcs	.+34     	; 0x4ac <__fixunssfsi+0x26>
 48a:	9f 57       	subi	r25, 0x7F	; 127
 48c:	90 f0       	brcs	.+36     	; 0x4b2 <__fixunssfsi+0x2c>
 48e:	b9 2f       	mov	r27, r25
 490:	99 27       	eor	r25, r25
 492:	b7 51       	subi	r27, 0x17	; 23
 494:	a0 f0       	brcs	.+40     	; 0x4be <__fixunssfsi+0x38>
 496:	d1 f0       	breq	.+52     	; 0x4cc <__fixunssfsi+0x46>
 498:	66 0f       	add	r22, r22
 49a:	77 1f       	adc	r23, r23
 49c:	88 1f       	adc	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	1a f0       	brmi	.+6      	; 0x4a8 <__fixunssfsi+0x22>
 4a2:	ba 95       	dec	r27
 4a4:	c9 f7       	brne	.-14     	; 0x498 <__fixunssfsi+0x12>
 4a6:	12 c0       	rjmp	.+36     	; 0x4cc <__fixunssfsi+0x46>
 4a8:	b1 30       	cpi	r27, 0x01	; 1
 4aa:	81 f0       	breq	.+32     	; 0x4cc <__fixunssfsi+0x46>
 4ac:	62 d0       	rcall	.+196    	; 0x572 <__fp_zero>
 4ae:	b1 e0       	ldi	r27, 0x01	; 1
 4b0:	08 95       	ret
 4b2:	5f c0       	rjmp	.+190    	; 0x572 <__fp_zero>
 4b4:	67 2f       	mov	r22, r23
 4b6:	78 2f       	mov	r23, r24
 4b8:	88 27       	eor	r24, r24
 4ba:	b8 5f       	subi	r27, 0xF8	; 248
 4bc:	39 f0       	breq	.+14     	; 0x4cc <__fixunssfsi+0x46>
 4be:	b9 3f       	cpi	r27, 0xF9	; 249
 4c0:	cc f3       	brlt	.-14     	; 0x4b4 <__fixunssfsi+0x2e>
 4c2:	86 95       	lsr	r24
 4c4:	77 95       	ror	r23
 4c6:	67 95       	ror	r22
 4c8:	b3 95       	inc	r27
 4ca:	d9 f7       	brne	.-10     	; 0x4c2 <__fixunssfsi+0x3c>
 4cc:	3e f4       	brtc	.+14     	; 0x4dc <__fixunssfsi+0x56>
 4ce:	90 95       	com	r25
 4d0:	80 95       	com	r24
 4d2:	70 95       	com	r23
 4d4:	61 95       	neg	r22
 4d6:	7f 4f       	sbci	r23, 0xFF	; 255
 4d8:	8f 4f       	sbci	r24, 0xFF	; 255
 4da:	9f 4f       	sbci	r25, 0xFF	; 255
 4dc:	08 95       	ret

000004de <__fp_inf>:
 4de:	97 f9       	bld	r25, 7
 4e0:	9f 67       	ori	r25, 0x7F	; 127
 4e2:	80 e8       	ldi	r24, 0x80	; 128
 4e4:	70 e0       	ldi	r23, 0x00	; 0
 4e6:	60 e0       	ldi	r22, 0x00	; 0
 4e8:	08 95       	ret

000004ea <__fp_nan>:
 4ea:	9f ef       	ldi	r25, 0xFF	; 255
 4ec:	80 ec       	ldi	r24, 0xC0	; 192
 4ee:	08 95       	ret

000004f0 <__fp_pscA>:
 4f0:	00 24       	eor	r0, r0
 4f2:	0a 94       	dec	r0
 4f4:	16 16       	cp	r1, r22
 4f6:	17 06       	cpc	r1, r23
 4f8:	18 06       	cpc	r1, r24
 4fa:	09 06       	cpc	r0, r25
 4fc:	08 95       	ret

000004fe <__fp_pscB>:
 4fe:	00 24       	eor	r0, r0
 500:	0a 94       	dec	r0
 502:	12 16       	cp	r1, r18
 504:	13 06       	cpc	r1, r19
 506:	14 06       	cpc	r1, r20
 508:	05 06       	cpc	r0, r21
 50a:	08 95       	ret

0000050c <__fp_round>:
 50c:	09 2e       	mov	r0, r25
 50e:	03 94       	inc	r0
 510:	00 0c       	add	r0, r0
 512:	11 f4       	brne	.+4      	; 0x518 <__fp_round+0xc>
 514:	88 23       	and	r24, r24
 516:	52 f0       	brmi	.+20     	; 0x52c <__fp_round+0x20>
 518:	bb 0f       	add	r27, r27
 51a:	40 f4       	brcc	.+16     	; 0x52c <__fp_round+0x20>
 51c:	bf 2b       	or	r27, r31
 51e:	11 f4       	brne	.+4      	; 0x524 <__fp_round+0x18>
 520:	60 ff       	sbrs	r22, 0
 522:	04 c0       	rjmp	.+8      	; 0x52c <__fp_round+0x20>
 524:	6f 5f       	subi	r22, 0xFF	; 255
 526:	7f 4f       	sbci	r23, 0xFF	; 255
 528:	8f 4f       	sbci	r24, 0xFF	; 255
 52a:	9f 4f       	sbci	r25, 0xFF	; 255
 52c:	08 95       	ret

0000052e <__fp_split3>:
 52e:	57 fd       	sbrc	r21, 7
 530:	90 58       	subi	r25, 0x80	; 128
 532:	44 0f       	add	r20, r20
 534:	55 1f       	adc	r21, r21
 536:	59 f0       	breq	.+22     	; 0x54e <__fp_splitA+0x10>
 538:	5f 3f       	cpi	r21, 0xFF	; 255
 53a:	71 f0       	breq	.+28     	; 0x558 <__fp_splitA+0x1a>
 53c:	47 95       	ror	r20

0000053e <__fp_splitA>:
 53e:	88 0f       	add	r24, r24
 540:	97 fb       	bst	r25, 7
 542:	99 1f       	adc	r25, r25
 544:	61 f0       	breq	.+24     	; 0x55e <__fp_splitA+0x20>
 546:	9f 3f       	cpi	r25, 0xFF	; 255
 548:	79 f0       	breq	.+30     	; 0x568 <__fp_splitA+0x2a>
 54a:	87 95       	ror	r24
 54c:	08 95       	ret
 54e:	12 16       	cp	r1, r18
 550:	13 06       	cpc	r1, r19
 552:	14 06       	cpc	r1, r20
 554:	55 1f       	adc	r21, r21
 556:	f2 cf       	rjmp	.-28     	; 0x53c <__fp_split3+0xe>
 558:	46 95       	lsr	r20
 55a:	f1 df       	rcall	.-30     	; 0x53e <__fp_splitA>
 55c:	08 c0       	rjmp	.+16     	; 0x56e <__fp_splitA+0x30>
 55e:	16 16       	cp	r1, r22
 560:	17 06       	cpc	r1, r23
 562:	18 06       	cpc	r1, r24
 564:	99 1f       	adc	r25, r25
 566:	f1 cf       	rjmp	.-30     	; 0x54a <__fp_splitA+0xc>
 568:	86 95       	lsr	r24
 56a:	71 05       	cpc	r23, r1
 56c:	61 05       	cpc	r22, r1
 56e:	08 94       	sec
 570:	08 95       	ret

00000572 <__fp_zero>:
 572:	e8 94       	clt

00000574 <__fp_szero>:
 574:	bb 27       	eor	r27, r27
 576:	66 27       	eor	r22, r22
 578:	77 27       	eor	r23, r23
 57a:	cb 01       	movw	r24, r22
 57c:	97 f9       	bld	r25, 7
 57e:	08 95       	ret

00000580 <__divmodhi4>:
 580:	97 fb       	bst	r25, 7
 582:	07 2e       	mov	r0, r23
 584:	16 f4       	brtc	.+4      	; 0x58a <__divmodhi4+0xa>
 586:	00 94       	com	r0
 588:	06 d0       	rcall	.+12     	; 0x596 <__divmodhi4_neg1>
 58a:	77 fd       	sbrc	r23, 7
 58c:	08 d0       	rcall	.+16     	; 0x59e <__divmodhi4_neg2>
 58e:	0b d0       	rcall	.+22     	; 0x5a6 <__udivmodhi4>
 590:	07 fc       	sbrc	r0, 7
 592:	05 d0       	rcall	.+10     	; 0x59e <__divmodhi4_neg2>
 594:	3e f4       	brtc	.+14     	; 0x5a4 <__divmodhi4_exit>

00000596 <__divmodhi4_neg1>:
 596:	90 95       	com	r25
 598:	81 95       	neg	r24
 59a:	9f 4f       	sbci	r25, 0xFF	; 255
 59c:	08 95       	ret

0000059e <__divmodhi4_neg2>:
 59e:	70 95       	com	r23
 5a0:	61 95       	neg	r22
 5a2:	7f 4f       	sbci	r23, 0xFF	; 255

000005a4 <__divmodhi4_exit>:
 5a4:	08 95       	ret

000005a6 <__udivmodhi4>:
 5a6:	aa 1b       	sub	r26, r26
 5a8:	bb 1b       	sub	r27, r27
 5aa:	51 e1       	ldi	r21, 0x11	; 17
 5ac:	07 c0       	rjmp	.+14     	; 0x5bc <__udivmodhi4_ep>

000005ae <__udivmodhi4_loop>:
 5ae:	aa 1f       	adc	r26, r26
 5b0:	bb 1f       	adc	r27, r27
 5b2:	a6 17       	cp	r26, r22
 5b4:	b7 07       	cpc	r27, r23
 5b6:	10 f0       	brcs	.+4      	; 0x5bc <__udivmodhi4_ep>
 5b8:	a6 1b       	sub	r26, r22
 5ba:	b7 0b       	sbc	r27, r23

000005bc <__udivmodhi4_ep>:
 5bc:	88 1f       	adc	r24, r24
 5be:	99 1f       	adc	r25, r25
 5c0:	5a 95       	dec	r21
 5c2:	a9 f7       	brne	.-22     	; 0x5ae <__udivmodhi4_loop>
 5c4:	80 95       	com	r24
 5c6:	90 95       	com	r25
 5c8:	bc 01       	movw	r22, r24
 5ca:	cd 01       	movw	r24, r26
 5cc:	08 95       	ret

000005ce <_exit>:
 5ce:	f8 94       	cli

000005d0 <__stop_program>:
 5d0:	ff cf       	rjmp	.-2      	; 0x5d0 <__stop_program>
