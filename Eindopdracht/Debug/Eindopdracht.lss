
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f5f  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000959  00000000  00000000  00001297  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000672  00000000  00000000  00001bf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000013c  00000000  00000000  00002264  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000054c  00000000  00000000  000023a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000856  00000000  00000000  000028ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00003142  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 30       	cpi	r26, 0x00	; 0
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	95 d0       	rcall	.+298    	; 0x1d4 <main>
  aa:	98 c0       	rjmp	.+304    	; 0x1dc <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <spi_masterInit>:
		_delay_ms(10);
		} else {
		spi_writeWord(4, 0x0F);
		_delay_ms(10);
	}
}
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	87 bb       	out	0x17, r24	; 23
  b2:	87 b3       	in	r24, 0x17	; 23
  b4:	87 7f       	andi	r24, 0xF7	; 247
  b6:	87 bb       	out	0x17, r24	; 23
  b8:	88 b3       	in	r24, 0x18	; 24
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	88 bb       	out	0x18, r24	; 24
  be:	82 e5       	ldi	r24, 0x52	; 82
  c0:	8d b9       	out	0x0d, r24	; 13
  c2:	08 95       	ret

000000c4 <spi_write>:
  c4:	8f b9       	out	0x0f, r24	; 15
  c6:	77 9b       	sbis	0x0e, 7	; 14
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <spi_write+0x2>
  ca:	08 95       	ret

000000cc <spi_slaveSelect>:
  cc:	98 b3       	in	r25, 0x18	; 24
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <spi_slaveSelect+0xc>
  d4:	22 0f       	add	r18, r18
  d6:	33 1f       	adc	r19, r19
  d8:	8a 95       	dec	r24
  da:	e2 f7       	brpl	.-8      	; 0xd4 <spi_slaveSelect+0x8>
  dc:	20 95       	com	r18
  de:	29 23       	and	r18, r25
  e0:	28 bb       	out	0x18, r18	; 24
  e2:	08 95       	ret

000000e4 <spi_slaveDeSelect>:
  e4:	98 b3       	in	r25, 0x18	; 24
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <spi_slaveDeSelect+0xc>
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	8a 95       	dec	r24
  f2:	e2 f7       	brpl	.-8      	; 0xec <spi_slaveDeSelect+0x8>
  f4:	29 2b       	or	r18, r25
  f6:	28 bb       	out	0x18, r18	; 24
  f8:	08 95       	ret

000000fa <spi_writeWord>:
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	d8 2f       	mov	r29, r24
 100:	c6 2f       	mov	r28, r22
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	e3 df       	rcall	.-58     	; 0xcc <spi_slaveSelect>
 106:	8d 2f       	mov	r24, r29
 108:	dd df       	rcall	.-70     	; 0xc4 <spi_write>
 10a:	8c 2f       	mov	r24, r28
 10c:	db df       	rcall	.-74     	; 0xc4 <spi_write>
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	e9 df       	rcall	.-46     	; 0xe4 <spi_slaveDeSelect>
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <displayDriverInit>:
 118:	6f ef       	ldi	r22, 0xFF	; 255
 11a:	89 e0       	ldi	r24, 0x09	; 9
 11c:	ee df       	rcall	.-36     	; 0xfa <spi_writeWord>
 11e:	6f e0       	ldi	r22, 0x0F	; 15
 120:	8a e0       	ldi	r24, 0x0A	; 10
 122:	eb df       	rcall	.-42     	; 0xfa <spi_writeWord>
 124:	6f e0       	ldi	r22, 0x0F	; 15
 126:	8b e0       	ldi	r24, 0x0B	; 11
 128:	e8 df       	rcall	.-48     	; 0xfa <spi_writeWord>
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	8c e0       	ldi	r24, 0x0C	; 12
 12e:	e5 cf       	rjmp	.-54     	; 0xfa <spi_writeWord>
 130:	08 95       	ret

00000132 <initUltrasonic>:

void initUltrasonic() {
	DDRD |= (1 << TRIGGER_PIN); // Set trigger pin as output
 132:	81 b3       	in	r24, 0x11	; 17
 134:	82 60       	ori	r24, 0x02	; 2
 136:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1 << ECHO_PIN);   // Set echo pin as input
 138:	81 b3       	in	r24, 0x11	; 17
 13a:	8e 7f       	andi	r24, 0xFE	; 254
 13c:	81 bb       	out	0x11, r24	; 17
 13e:	08 95       	ret

00000140 <triggerPulse>:
}

void triggerPulse() {
	PORTD |= (1 << TRIGGER_PIN); // Set trigger pin high
 140:	82 b3       	in	r24, 0x12	; 18
 142:	82 60       	ori	r24, 0x02	; 2
 144:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 146:	8a e1       	ldi	r24, 0x1A	; 26
 148:	8a 95       	dec	r24
 14a:	f1 f7       	brne	.-4      	; 0x148 <triggerPulse+0x8>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <triggerPulse+0xe>
	_delay_us(10);               // Wait for 10 microseconds
	PORTD &= ~(1 << TRIGGER_PIN);// Set trigger pin low
 14e:	82 b3       	in	r24, 0x12	; 18
 150:	8d 7f       	andi	r24, 0xFD	; 253
 152:	82 bb       	out	0x12, r24	; 18
 154:	08 95       	ret

00000156 <measureDistance>:
}

uint16_t measureDistance() {
	uint16_t pulse_width = 0;
	uint32_t timeout = 10000; // Set a timeout value (adjust as needed)
 156:	40 e1       	ldi	r20, 0x10	; 16
 158:	57 e2       	ldi	r21, 0x27	; 39
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	70 e0       	ldi	r23, 0x00	; 0

	// Wait for echo pin to go high
	while (!(PIND & (1 << ECHO_PIN)) && timeout > 0) {
 15e:	08 c0       	rjmp	.+16     	; 0x170 <measureDistance+0x1a>
		timeout--;
 160:	41 50       	subi	r20, 0x01	; 1
 162:	51 09       	sbc	r21, r1
 164:	61 09       	sbc	r22, r1
 166:	71 09       	sbc	r23, r1
 168:	22 e0       	ldi	r18, 0x02	; 2
 16a:	2a 95       	dec	r18
 16c:	f1 f7       	brne	.-4      	; 0x16a <measureDistance+0x14>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <measureDistance+0x1a>
uint16_t measureDistance() {
	uint16_t pulse_width = 0;
	uint32_t timeout = 10000; // Set a timeout value (adjust as needed)

	// Wait for echo pin to go high
	while (!(PIND & (1 << ECHO_PIN)) && timeout > 0) {
 170:	80 99       	sbic	0x10, 0	; 16
 172:	0e c0       	rjmp	.+28     	; 0x190 <measureDistance+0x3a>
 174:	41 15       	cp	r20, r1
 176:	51 05       	cpc	r21, r1
 178:	61 05       	cpc	r22, r1
 17a:	71 05       	cpc	r23, r1
 17c:	89 f7       	brne	.-30     	; 0x160 <measureDistance+0xa>
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	08 c0       	rjmp	.+16     	; 0x194 <measureDistance+0x3e>
		_delay_us(1);
	}

	// Measure pulse width
	while ((PIND & (1 << ECHO_PIN)) && timeout > 0) {
		pulse_width++;
 184:	01 96       	adiw	r24, 0x01	; 1
 186:	22 e0       	ldi	r18, 0x02	; 2
 188:	2a 95       	dec	r18
 18a:	f1 f7       	brne	.-4      	; 0x188 <measureDistance+0x32>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <measureDistance+0x38>
 18e:	02 c0       	rjmp	.+4      	; 0x194 <measureDistance+0x3e>
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	90 e0       	ldi	r25, 0x00	; 0
		timeout--;
		_delay_us(1);
	}

	// Measure pulse width
	while ((PIND & (1 << ECHO_PIN)) && timeout > 0) {
 194:	80 9b       	sbis	0x10, 0	; 16
 196:	05 c0       	rjmp	.+10     	; 0x1a2 <measureDistance+0x4c>
 198:	41 15       	cp	r20, r1
 19a:	51 05       	cpc	r21, r1
 19c:	61 05       	cpc	r22, r1
 19e:	71 05       	cpc	r23, r1
 1a0:	89 f7       	brne	.-30     	; 0x184 <measureDistance+0x2e>
		pulse_width++;
		_delay_us(1);
	}

	return pulse_width; // Return the pulse width
}
 1a2:	08 95       	ret

000001a4 <timerStart>:


void timerStart(){
	 PORTC = 0x01;
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	85 bb       	out	0x15, r24	; 21
	 DDRE = 0x0F;
 1a8:	8f e0       	ldi	r24, 0x0F	; 15
 1aa:	82 b9       	out	0x02, r24	; 2

	 TCCR1B |= ((1 << CS10 ) | (1 << CS11 )); // Set timer Fcpu/64
 1ac:	8e b5       	in	r24, 0x2e	; 46
 1ae:	83 60       	ori	r24, 0x03	; 3
 1b0:	8e bd       	out	0x2e, r24	; 46

	 for (;;) {
		 if (TCNT1 >= 62496) {
 1b2:	8c b5       	in	r24, 0x2c	; 44
 1b4:	9d b5       	in	r25, 0x2d	; 45
 1b6:	80 32       	cpi	r24, 0x20	; 32
 1b8:	94 4f       	sbci	r25, 0xF4	; 244
 1ba:	10 f0       	brcs	.+4      	; 0x1c0 <timerStart+0x1c>
			 TCNT1 = 0; // Reset timer
 1bc:	1d bc       	out	0x2d, r1	; 45
 1be:	1c bc       	out	0x2c, r1	; 44
			 //seconden += 0.5; // You should initialize 'seconden' somewhere
			 //writeLedDisplay(seconden);
		 }

		 triggerPulse(); // Send trigger pulse
 1c0:	bf df       	rcall	.-130    	; 0x140 <triggerPulse>

		 uint16_t pulse_width = measureDistance(); // Measure echo pulse width
 1c2:	c9 df       	rcall	.-110    	; 0x156 <measureDistance>
 1c4:	84 34       	cpi	r24, 0x44	; 68

		 uint16_t distance = pulse_width/58; // Convert pulse width to distance in cm

		 if (distance < 10) { // Threshold distance
 1c6:	92 40       	sbci	r25, 0x02	; 2
 1c8:	10 f4       	brcc	.+4      	; 0x1ce <timerStart+0x2a>
 1ca:	13 b8       	out	0x03, r1	; 3
			 PORTE = 0b00000000; // Turn off LEDs
 1cc:	f2 cf       	rjmp	.-28     	; 0x1b2 <timerStart+0xe>
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
			 //seconden = 0; // Reset the counter
			 } else {
			 PORTE = 0b11111111; // Turn on LEDs
 1d0:	83 b9       	out	0x03, r24	; 3
 1d2:	ef cf       	rjmp	.-34     	; 0x1b2 <timerStart+0xe>

000001d4 <main>:
 1d4:	6c df       	rcall	.-296    	; 0xae <spi_masterInit>

int main()
{
	// inilialize
	spi_masterInit();              	// Initialize spi module
	displayDriverInit();            // Initialize display chip
 1d6:	a0 df       	rcall	.-192    	; 0x118 <displayDriverInit>
	initUltrasonic();
 1d8:	ac df       	rcall	.-168    	; 0x132 <initUltrasonic>
 1da:	e4 df       	rcall	.-56     	; 0x1a4 <timerStart>

000001dc <_exit>:
	timerStart();
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
