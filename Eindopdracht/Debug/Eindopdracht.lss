
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000062e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005ba  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  0000062e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000062e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000660  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ddb  00000000  00000000  0000071c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090b  00000000  00000000  000014f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b4  00000000  00000000  00001e02  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  000023b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f4  00000000  00000000  000024c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006e7  00000000  00000000  000029b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000309f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	73 d1       	rcall	.+742    	; 0x390 <main>
  aa:	85 c2       	rjmp	.+1290   	; 0x5b6 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <spi_masterInit>:
}

// Set display off ('shut down')
void displayOff()
{
	spi_writeWord(0x0C, 0x00); // Afsluiten -> 1 = normaal
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	87 bb       	out	0x17, r24	; 23
  b2:	87 b3       	in	r24, 0x17	; 23
  b4:	87 7f       	andi	r24, 0xF7	; 247
  b6:	87 bb       	out	0x17, r24	; 23
  b8:	88 b3       	in	r24, 0x18	; 24
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	88 bb       	out	0x18, r24	; 24
  be:	82 e5       	ldi	r24, 0x52	; 82
  c0:	8d b9       	out	0x0d, r24	; 13
  c2:	08 95       	ret

000000c4 <spi_write>:
  c4:	8f b9       	out	0x0f, r24	; 15
  c6:	77 9b       	sbis	0x0e, 7	; 14
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <spi_write+0x2>
  ca:	08 95       	ret

000000cc <spi_slaveSelect>:
  cc:	98 b3       	in	r25, 0x18	; 24
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <spi_slaveSelect+0xc>
  d4:	22 0f       	add	r18, r18
  d6:	33 1f       	adc	r19, r19
  d8:	8a 95       	dec	r24
  da:	e2 f7       	brpl	.-8      	; 0xd4 <spi_slaveSelect+0x8>
  dc:	20 95       	com	r18
  de:	29 23       	and	r18, r25
  e0:	28 bb       	out	0x18, r18	; 24
  e2:	08 95       	ret

000000e4 <spi_slaveDeSelect>:
  e4:	98 b3       	in	r25, 0x18	; 24
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <spi_slaveDeSelect+0xc>
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	8a 95       	dec	r24
  f2:	e2 f7       	brpl	.-8      	; 0xec <spi_slaveDeSelect+0x8>
  f4:	29 2b       	or	r18, r25
  f6:	28 bb       	out	0x18, r18	; 24
  f8:	08 95       	ret

000000fa <spi_writeWord>:
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	d8 2f       	mov	r29, r24
 100:	c6 2f       	mov	r28, r22
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	e3 df       	rcall	.-58     	; 0xcc <spi_slaveSelect>
 106:	8d 2f       	mov	r24, r29
 108:	dd df       	rcall	.-70     	; 0xc4 <spi_write>
 10a:	8c 2f       	mov	r24, r28
 10c:	db df       	rcall	.-74     	; 0xc4 <spi_write>
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	e9 df       	rcall	.-46     	; 0xe4 <spi_slaveDeSelect>
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <displayDriverInit>:
 118:	6f ef       	ldi	r22, 0xFF	; 255
 11a:	89 e0       	ldi	r24, 0x09	; 9
 11c:	ee df       	rcall	.-36     	; 0xfa <spi_writeWord>
 11e:	6f e0       	ldi	r22, 0x0F	; 15
 120:	8a e0       	ldi	r24, 0x0A	; 10
 122:	eb df       	rcall	.-42     	; 0xfa <spi_writeWord>
 124:	6f e0       	ldi	r22, 0x0F	; 15
 126:	8b e0       	ldi	r24, 0x0B	; 11
 128:	e8 df       	rcall	.-48     	; 0xfa <spi_writeWord>
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	8c e0       	ldi	r24, 0x0C	; 12
 12e:	e5 cf       	rjmp	.-54     	; 0xfa <spi_writeWord>
 130:	08 95       	ret

00000132 <writeLedDisplay>:
}

void writeLedDisplay(int value){
 132:	ff 92       	push	r15
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	9c 01       	movw	r18, r24
	int digit3 = -1;
	char digit4 = -1;
	
	
	// aan de hand van de value worden de cijfers gesplitst in de digits, bij negatieve value worden de cijfers een digit opgeschoven en komt er een min-teken voor
	if (value < 10 && value >= 0){
 13e:	8a 30       	cpi	r24, 0x0A	; 10
 140:	91 05       	cpc	r25, r1
 142:	40 f4       	brcc	.+16     	; 0x154 <writeLedDisplay+0x22>
		digit4 = value;
 144:	f8 2e       	mov	r15, r24
void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
	int digit2 = -1;
	int digit3 = -1;
 146:	cf ef       	ldi	r28, 0xFF	; 255
 148:	df ef       	ldi	r29, 0xFF	; 255

void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
	int digit2 = -1;
 14a:	0f ef       	ldi	r16, 0xFF	; 255
 14c:	1f ef       	ldi	r17, 0xFF	; 255
}

void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
 14e:	6f ef       	ldi	r22, 0xFF	; 255
 150:	7f ef       	ldi	r23, 0xFF	; 255
 152:	9b c0       	rjmp	.+310    	; 0x28a <writeLedDisplay+0x158>
	
	
	// aan de hand van de value worden de cijfers gesplitst in de digits, bij negatieve value worden de cijfers een digit opgeschoven en komt er een min-teken voor
	if (value < 10 && value >= 0){
		digit4 = value;
		} else if (value >= 10 && value < 100){
 154:	0a 97       	sbiw	r24, 0x0a	; 10
 156:	8a 35       	cpi	r24, 0x5A	; 90
 158:	91 05       	cpc	r25, r1
 15a:	60 f4       	brcc	.+24     	; 0x174 <writeLedDisplay+0x42>
		digit4 = value / 10;
 15c:	c9 01       	movw	r24, r18
 15e:	6a e0       	ldi	r22, 0x0A	; 10
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	02 d2       	rcall	.+1028   	; 0x568 <__divmodhi4>
 164:	f6 2e       	mov	r15, r22
		digit3 = value % 10;
 166:	c8 2f       	mov	r28, r24
 168:	d9 2f       	mov	r29, r25

void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
	int digit2 = -1;
 16a:	0f ef       	ldi	r16, 0xFF	; 255
 16c:	1f ef       	ldi	r17, 0xFF	; 255
}

void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
 16e:	6f ef       	ldi	r22, 0xFF	; 255
 170:	7f ef       	ldi	r23, 0xFF	; 255
 172:	8b c0       	rjmp	.+278    	; 0x28a <writeLedDisplay+0x158>
	if (value < 10 && value >= 0){
		digit4 = value;
		} else if (value >= 10 && value < 100){
		digit4 = value / 10;
		digit3 = value % 10;
		} else if (value >= 100 && value < 1000){
 174:	c9 01       	movw	r24, r18
 176:	84 56       	subi	r24, 0x64	; 100
 178:	91 09       	sbc	r25, r1
 17a:	84 38       	cpi	r24, 0x84	; 132
 17c:	93 40       	sbci	r25, 0x03	; 3
 17e:	a8 f4       	brcc	.+42     	; 0x1aa <writeLedDisplay+0x78>
		digit4 = value / 100;
 180:	c9 01       	movw	r24, r18
 182:	64 e6       	ldi	r22, 0x64	; 100
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	f0 d1       	rcall	.+992    	; 0x568 <__divmodhi4>
 188:	f6 2e       	mov	r15, r22
		digit3 = (value / 10) % 10;
 18a:	ea e0       	ldi	r30, 0x0A	; 10
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	c9 01       	movw	r24, r18
 190:	bf 01       	movw	r22, r30
 192:	ea d1       	rcall	.+980    	; 0x568 <__divmodhi4>
 194:	38 2f       	mov	r19, r24
 196:	29 2f       	mov	r18, r25
 198:	cb 01       	movw	r24, r22
 19a:	bf 01       	movw	r22, r30
 19c:	e5 d1       	rcall	.+970    	; 0x568 <__divmodhi4>
 19e:	ec 01       	movw	r28, r24
		digit2 = value % 10;
 1a0:	03 2f       	mov	r16, r19
 1a2:	12 2f       	mov	r17, r18
}

void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
 1a4:	6f ef       	ldi	r22, 0xFF	; 255
 1a6:	7f ef       	ldi	r23, 0xFF	; 255
 1a8:	70 c0       	rjmp	.+224    	; 0x28a <writeLedDisplay+0x158>
		digit3 = value % 10;
		} else if (value >= 100 && value < 1000){
		digit4 = value / 100;
		digit3 = (value / 10) % 10;
		digit2 = value % 10;
		} else if (value >= 1000 && value < 10000){
 1aa:	c9 01       	movw	r24, r18
 1ac:	88 5e       	subi	r24, 0xE8	; 232
 1ae:	93 40       	sbci	r25, 0x03	; 3
 1b0:	88 32       	cpi	r24, 0x28	; 40
 1b2:	93 42       	sbci	r25, 0x23	; 35
		digit4 = value / 1000;
 1b4:	d8 f4       	brcc	.+54     	; 0x1ec <writeLedDisplay+0xba>
 1b6:	c9 01       	movw	r24, r18
 1b8:	68 ee       	ldi	r22, 0xE8	; 232
 1ba:	73 e0       	ldi	r23, 0x03	; 3
 1bc:	d5 d1       	rcall	.+938    	; 0x568 <__divmodhi4>
		digit3 = (value / 100) % 10;
 1be:	f6 2e       	mov	r15, r22
 1c0:	c9 01       	movw	r24, r18
 1c2:	64 e6       	ldi	r22, 0x64	; 100
 1c4:	70 e0       	ldi	r23, 0x00	; 0
 1c6:	d0 d1       	rcall	.+928    	; 0x568 <__divmodhi4>
 1c8:	cb 01       	movw	r24, r22
 1ca:	ea e0       	ldi	r30, 0x0A	; 10
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	bf 01       	movw	r22, r30
 1d0:	cb d1       	rcall	.+918    	; 0x568 <__divmodhi4>
		digit2 = (value / 10) % 10;
 1d2:	ec 01       	movw	r28, r24
 1d4:	c9 01       	movw	r24, r18
 1d6:	bf 01       	movw	r22, r30
 1d8:	c7 d1       	rcall	.+910    	; 0x568 <__divmodhi4>
 1da:	38 2f       	mov	r19, r24
 1dc:	29 2f       	mov	r18, r25
 1de:	cb 01       	movw	r24, r22
 1e0:	bf 01       	movw	r22, r30
 1e2:	c2 d1       	rcall	.+900    	; 0x568 <__divmodhi4>
 1e4:	8c 01       	movw	r16, r24
		digit1 = value % 10;
 1e6:	63 2f       	mov	r22, r19
 1e8:	72 2f       	mov	r23, r18
 1ea:	4f c0       	rjmp	.+158    	; 0x28a <writeLedDisplay+0x158>
		}  else if (value < 0 && value > -10){
 1ec:	c9 01       	movw	r24, r18
 1ee:	09 96       	adiw	r24, 0x09	; 9
 1f0:	09 97       	sbiw	r24, 0x09	; 9
 1f2:	68 f4       	brcc	.+26     	; 0x20e <writeLedDisplay+0xdc>
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
		value = (value * -1);
 1f4:	cc 27       	eor	r28, r28
 1f6:	dd 27       	eor	r29, r29
 1f8:	c2 1b       	sub	r28, r18
 1fa:	d3 0b       	sbc	r29, r19
		digit4 = value / 1000;
		digit3 = (value / 100) % 10;
		digit2 = (value / 10) % 10;
		digit1 = value % 10;
		}  else if (value < 0 && value > -10){
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
 1fc:	0f 2e       	mov	r0, r31
 1fe:	ff e0       	ldi	r31, 0x0F	; 15
 200:	ff 2e       	mov	r15, r31
 202:	f0 2d       	mov	r31, r0

void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
	int digit2 = -1;
 204:	0f ef       	ldi	r16, 0xFF	; 255
 206:	1f ef       	ldi	r17, 0xFF	; 255
}

void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
 208:	6f ef       	ldi	r22, 0xFF	; 255
 20a:	7f ef       	ldi	r23, 0xFF	; 255
 20c:	3e c0       	rjmp	.+124    	; 0x28a <writeLedDisplay+0x158>
		digit1 = value % 10;
		}  else if (value < 0 && value > -10){
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
		value = (value * -1);
		digit3 = value;
		} else if (value <= -10 && value > -100){
 20e:	c9 01       	movw	r24, r18
 210:	8d 59       	subi	r24, 0x9D	; 157
 212:	9f 4f       	sbci	r25, 0xFF	; 255
 214:	8a 35       	cpi	r24, 0x5A	; 90
 216:	91 05       	cpc	r25, r1
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
		value = (value * -1);
 218:	80 f4       	brcc	.+32     	; 0x23a <writeLedDisplay+0x108>
 21a:	88 27       	eor	r24, r24
 21c:	99 27       	eor	r25, r25
 21e:	82 1b       	sub	r24, r18
		digit3 = value / 10;
		digit2 = value % 10;
 220:	93 0b       	sbc	r25, r19
 222:	6a e0       	ldi	r22, 0x0A	; 10
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	a0 d1       	rcall	.+832    	; 0x568 <__divmodhi4>
 228:	eb 01       	movw	r28, r22
 22a:	8c 01       	movw	r16, r24
		}  else if (value < 0 && value > -10){
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
		value = (value * -1);
		digit3 = value;
		} else if (value <= -10 && value > -100){
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
 22c:	0f 2e       	mov	r0, r31
 22e:	ff e0       	ldi	r31, 0x0F	; 15
 230:	ff 2e       	mov	r15, r31
 232:	f0 2d       	mov	r31, r0
}

void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
 234:	6f ef       	ldi	r22, 0xFF	; 255
 236:	7f ef       	ldi	r23, 0xFF	; 255
 238:	28 c0       	rjmp	.+80     	; 0x28a <writeLedDisplay+0x158>
		} else if (value <= -10 && value > -100){
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
		value = (value * -1);
		digit3 = value / 10;
		digit2 = value % 10;
		} else if (value <= -100 && value > -1000){
 23a:	c9 01       	movw	r24, r18
 23c:	89 51       	subi	r24, 0x19	; 25
 23e:	9c 4f       	sbci	r25, 0xFC	; 252
 240:	84 38       	cpi	r24, 0x84	; 132
 242:	93 40       	sbci	r25, 0x03	; 3
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
		value = (value * -1);
 244:	d0 f4       	brcc	.+52     	; 0x27a <writeLedDisplay+0x148>
 246:	31 95       	neg	r19
		digit3 = value / 100;
 248:	21 95       	neg	r18
 24a:	31 09       	sbc	r19, r1
 24c:	c9 01       	movw	r24, r18
 24e:	64 e6       	ldi	r22, 0x64	; 100
 250:	70 e0       	ldi	r23, 0x00	; 0
		digit2 = (value / 10) % 10;
 252:	8a d1       	rcall	.+788    	; 0x568 <__divmodhi4>
 254:	eb 01       	movw	r28, r22
 256:	ea e0       	ldi	r30, 0x0A	; 10
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	c9 01       	movw	r24, r18
 25c:	bf 01       	movw	r22, r30
 25e:	84 d1       	rcall	.+776    	; 0x568 <__divmodhi4>
 260:	38 2f       	mov	r19, r24
 262:	29 2f       	mov	r18, r25
 264:	cb 01       	movw	r24, r22
 266:	bf 01       	movw	r22, r30
 268:	7f d1       	rcall	.+766    	; 0x568 <__divmodhi4>
 26a:	8c 01       	movw	r16, r24
		digit1 = value % 10;
 26c:	63 2f       	mov	r22, r19
 26e:	72 2f       	mov	r23, r18
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
		value = (value * -1);
		digit3 = value / 10;
		digit2 = value % 10;
		} else if (value <= -100 && value > -1000){
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
 270:	0f 2e       	mov	r0, r31
 272:	ff e0       	ldi	r31, 0x0F	; 15
 274:	ff 2e       	mov	r15, r31
 276:	f0 2d       	mov	r31, r0
 278:	08 c0       	rjmp	.+16     	; 0x28a <writeLedDisplay+0x158>
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
	int digit2 = -1;
	int digit3 = -1;
	char digit4 = -1;
 27a:	ff 24       	eor	r15, r15
void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
	int digit2 = -1;
	int digit3 = -1;
 27c:	fa 94       	dec	r15
 27e:	cf ef       	ldi	r28, 0xFF	; 255

void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
	int digit2 = -1;
 280:	df ef       	ldi	r29, 0xFF	; 255
 282:	0f ef       	ldi	r16, 0xFF	; 255
}

void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
 284:	1f ef       	ldi	r17, 0xFF	; 255
 286:	6f ef       	ldi	r22, 0xFF	; 255
		digit2 = (value / 10) % 10;
		digit1 = value % 10;
	}
	
	// check of de digits zijn veranderd en print ze dan
	if (digit1 != -1){
 288:	7f ef       	ldi	r23, 0xFF	; 255
 28a:	6f 3f       	cpi	r22, 0xFF	; 255
 28c:	8f ef       	ldi	r24, 0xFF	; 255
		spi_writeWord(1, digit1);
 28e:	78 07       	cpc	r23, r24
 290:	49 f0       	breq	.+18     	; 0x2a4 <writeLedDisplay+0x172>
 292:	81 e0       	ldi	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 294:	32 df       	rcall	.-412    	; 0xfa <spi_writeWord>
 296:	8f e1       	ldi	r24, 0x1F	; 31
 298:	9e e4       	ldi	r25, 0x4E	; 78
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <writeLedDisplay+0x168>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <writeLedDisplay+0x16e>
 2a0:	00 00       	nop
		_delay_ms(10);
		} else {
		spi_writeWord(1, 0x0F);
 2a2:	09 c0       	rjmp	.+18     	; 0x2b6 <writeLedDisplay+0x184>
 2a4:	6f e0       	ldi	r22, 0x0F	; 15
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	28 df       	rcall	.-432    	; 0xfa <spi_writeWord>
 2aa:	8f e1       	ldi	r24, 0x1F	; 31
 2ac:	9e e4       	ldi	r25, 0x4E	; 78
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <writeLedDisplay+0x17c>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <writeLedDisplay+0x182>
		_delay_ms(10);
	}
	if (digit2 != -1){
 2b4:	00 00       	nop
 2b6:	0f 3f       	cpi	r16, 0xFF	; 255
 2b8:	9f ef       	ldi	r25, 0xFF	; 255
		spi_writeWord(2, digit2);
 2ba:	19 07       	cpc	r17, r25
 2bc:	51 f0       	breq	.+20     	; 0x2d2 <writeLedDisplay+0x1a0>
 2be:	60 2f       	mov	r22, r16
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	1b df       	rcall	.-458    	; 0xfa <spi_writeWord>
 2c4:	8f e1       	ldi	r24, 0x1F	; 31
 2c6:	9e e4       	ldi	r25, 0x4E	; 78
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <writeLedDisplay+0x196>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <writeLedDisplay+0x19c>
		_delay_ms(10);
		} else {
		spi_writeWord(2, 0x0F);
 2ce:	00 00       	nop
 2d0:	09 c0       	rjmp	.+18     	; 0x2e4 <writeLedDisplay+0x1b2>
 2d2:	6f e0       	ldi	r22, 0x0F	; 15
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	11 df       	rcall	.-478    	; 0xfa <spi_writeWord>
 2d8:	8f e1       	ldi	r24, 0x1F	; 31
 2da:	9e e4       	ldi	r25, 0x4E	; 78
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <writeLedDisplay+0x1aa>
		_delay_ms(10);
	}
	if (digit3 != -1){
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <writeLedDisplay+0x1b0>
 2e2:	00 00       	nop
 2e4:	cf 3f       	cpi	r28, 0xFF	; 255
 2e6:	9f ef       	ldi	r25, 0xFF	; 255
		spi_writeWord(3, digit3);
 2e8:	d9 07       	cpc	r29, r25
 2ea:	51 f0       	breq	.+20     	; 0x300 <writeLedDisplay+0x1ce>
 2ec:	6c 2f       	mov	r22, r28
 2ee:	83 e0       	ldi	r24, 0x03	; 3
 2f0:	04 df       	rcall	.-504    	; 0xfa <spi_writeWord>
 2f2:	8f e1       	ldi	r24, 0x1F	; 31
 2f4:	9e e4       	ldi	r25, 0x4E	; 78
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <writeLedDisplay+0x1c4>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <writeLedDisplay+0x1ca>
		_delay_ms(10);
		} else {
		spi_writeWord(3, 0x0F);
 2fc:	00 00       	nop
 2fe:	09 c0       	rjmp	.+18     	; 0x312 <writeLedDisplay+0x1e0>
 300:	6f e0       	ldi	r22, 0x0F	; 15
 302:	83 e0       	ldi	r24, 0x03	; 3
 304:	fa de       	rcall	.-524    	; 0xfa <spi_writeWord>
 306:	8f e1       	ldi	r24, 0x1F	; 31
 308:	9e e4       	ldi	r25, 0x4E	; 78
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <writeLedDisplay+0x1d8>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <writeLedDisplay+0x1de>
		_delay_ms(10);
	}
	if (digit4 != -1){
		spi_writeWord(4, digit4);
 310:	00 00       	nop
 312:	6f 2d       	mov	r22, r15
 314:	84 e0       	ldi	r24, 0x04	; 4
 316:	f1 de       	rcall	.-542    	; 0xfa <spi_writeWord>
 318:	8f e1       	ldi	r24, 0x1F	; 31
 31a:	9e e4       	ldi	r25, 0x4E	; 78
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <writeLedDisplay+0x1ea>
 320:	00 c0       	rjmp	.+0      	; 0x322 <writeLedDisplay+0x1f0>
 322:	00 00       	nop
		_delay_ms(10);
		} else {
		spi_writeWord(4, 0x0F);
		_delay_ms(10);
	}
}
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
 32c:	ff 90       	pop	r15
 32e:	08 95       	ret

00000330 <timerStart>:

void timerStart(){
	PORTC = 0x01;
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	85 bb       	out	0x15, r24	; 21
	TCCR1B |= ((1 << CS10 ) | (1 << CS11 )); // maak timer Fcpu/64
 334:	8e b5       	in	r24, 0x2e	; 46
 336:	83 60       	ori	r24, 0x03	; 3
 338:	8e bd       	out	0x2e, r24	; 46

	for (;;) {
		// Wacht tot de timer op 1 seconden zit, dan true
		if (TCNT1 >= 62496) {
 33a:	8c b5       	in	r24, 0x2c	; 44
 33c:	9d b5       	in	r25, 0x2d	; 45
 33e:	80 32       	cpi	r24, 0x20	; 32
 340:	94 4f       	sbci	r25, 0xF4	; 244
 342:	d0 f0       	brcs	.+52     	; 0x378 <timerStart+0x48>
			TCNT1 = 0; // Reset timer
 344:	1d bc       	out	0x2d, r1	; 45
 346:	1c bc       	out	0x2c, r1	; 44
			seconden+=0.5;
 348:	20 e0       	ldi	r18, 0x00	; 0
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	40 e0       	ldi	r20, 0x00	; 0
 34e:	5f e3       	ldi	r21, 0x3F	; 63
 350:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 354:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 358:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 35c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 360:	1d d0       	rcall	.+58     	; 0x39c <__addsf3>
 362:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 366:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 36a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 36e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			writeLedDisplay(seconden);
 372:	78 d0       	rcall	.+240    	; 0x464 <__fixsfsi>
 374:	cb 01       	movw	r24, r22
 376:	dd de       	rcall	.-582    	; 0x132 <writeLedDisplay>
 378:	83 b3       	in	r24, 0x13	; 19
		}
		if(PINC == 1){
 37a:	81 30       	cpi	r24, 0x01	; 1
 37c:	f1 f6       	brne	.-68     	; 0x33a <timerStart+0xa>
 37e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			seconden = 0;
 382:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 386:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 38a:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 38e:	d5 cf       	rjmp	.-86     	; 0x33a <timerStart+0xa>

00000390 <main>:
 390:	81 e0       	ldi	r24, 0x01	; 1
}

int main()
{
	// inilialize
	DDRB=0x01;					  	// Set PB0 pin as output for display select
 392:	87 bb       	out	0x17, r24	; 23
	spi_masterInit();              	// Initialize spi module
 394:	8c de       	rcall	.-744    	; 0xae <spi_masterInit>
	displayDriverInit();            // Initialize display chip
 396:	c0 de       	rcall	.-640    	; 0x118 <displayDriverInit>
	timerStart();
 398:	cb df       	rcall	.-106    	; 0x330 <timerStart>

0000039a <__subsf3>:
 39a:	50 58       	subi	r21, 0x80	; 128

0000039c <__addsf3>:
 39c:	bb 27       	eor	r27, r27
 39e:	aa 27       	eor	r26, r26
 3a0:	0e d0       	rcall	.+28     	; 0x3be <__addsf3x>
 3a2:	a8 c0       	rjmp	.+336    	; 0x4f4 <__fp_round>
 3a4:	99 d0       	rcall	.+306    	; 0x4d8 <__fp_pscA>
 3a6:	30 f0       	brcs	.+12     	; 0x3b4 <__addsf3+0x18>
 3a8:	9e d0       	rcall	.+316    	; 0x4e6 <__fp_pscB>
 3aa:	20 f0       	brcs	.+8      	; 0x3b4 <__addsf3+0x18>
 3ac:	31 f4       	brne	.+12     	; 0x3ba <__addsf3+0x1e>
 3ae:	9f 3f       	cpi	r25, 0xFF	; 255
 3b0:	11 f4       	brne	.+4      	; 0x3b6 <__addsf3+0x1a>
 3b2:	1e f4       	brtc	.+6      	; 0x3ba <__addsf3+0x1e>
 3b4:	8e c0       	rjmp	.+284    	; 0x4d2 <__fp_nan>
 3b6:	0e f4       	brtc	.+2      	; 0x3ba <__addsf3+0x1e>
 3b8:	e0 95       	com	r30
 3ba:	e7 fb       	bst	r30, 7
 3bc:	84 c0       	rjmp	.+264    	; 0x4c6 <__fp_inf>

000003be <__addsf3x>:
 3be:	e9 2f       	mov	r30, r25
 3c0:	aa d0       	rcall	.+340    	; 0x516 <__fp_split3>
 3c2:	80 f3       	brcs	.-32     	; 0x3a4 <__addsf3+0x8>
 3c4:	ba 17       	cp	r27, r26
 3c6:	62 07       	cpc	r22, r18
 3c8:	73 07       	cpc	r23, r19
 3ca:	84 07       	cpc	r24, r20
 3cc:	95 07       	cpc	r25, r21
 3ce:	18 f0       	brcs	.+6      	; 0x3d6 <__addsf3x+0x18>
 3d0:	71 f4       	brne	.+28     	; 0x3ee <__addsf3x+0x30>
 3d2:	9e f5       	brtc	.+102    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 3d4:	c2 c0       	rjmp	.+388    	; 0x55a <__fp_zero>
 3d6:	0e f4       	brtc	.+2      	; 0x3da <__addsf3x+0x1c>
 3d8:	e0 95       	com	r30
 3da:	0b 2e       	mov	r0, r27
 3dc:	ba 2f       	mov	r27, r26
 3de:	a0 2d       	mov	r26, r0
 3e0:	0b 01       	movw	r0, r22
 3e2:	b9 01       	movw	r22, r18
 3e4:	90 01       	movw	r18, r0
 3e6:	0c 01       	movw	r0, r24
 3e8:	ca 01       	movw	r24, r20
 3ea:	a0 01       	movw	r20, r0
 3ec:	11 24       	eor	r1, r1
 3ee:	ff 27       	eor	r31, r31
 3f0:	59 1b       	sub	r21, r25
 3f2:	99 f0       	breq	.+38     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3f4:	59 3f       	cpi	r21, 0xF9	; 249
 3f6:	50 f4       	brcc	.+20     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 3f8:	50 3e       	cpi	r21, 0xE0	; 224
 3fa:	68 f1       	brcs	.+90     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 3fc:	1a 16       	cp	r1, r26
 3fe:	f0 40       	sbci	r31, 0x00	; 0
 400:	a2 2f       	mov	r26, r18
 402:	23 2f       	mov	r18, r19
 404:	34 2f       	mov	r19, r20
 406:	44 27       	eor	r20, r20
 408:	58 5f       	subi	r21, 0xF8	; 248
 40a:	f3 cf       	rjmp	.-26     	; 0x3f2 <__addsf3x+0x34>
 40c:	46 95       	lsr	r20
 40e:	37 95       	ror	r19
 410:	27 95       	ror	r18
 412:	a7 95       	ror	r26
 414:	f0 40       	sbci	r31, 0x00	; 0
 416:	53 95       	inc	r21
 418:	c9 f7       	brne	.-14     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 41a:	7e f4       	brtc	.+30     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
 41c:	1f 16       	cp	r1, r31
 41e:	ba 0b       	sbc	r27, r26
 420:	62 0b       	sbc	r22, r18
 422:	73 0b       	sbc	r23, r19
 424:	84 0b       	sbc	r24, r20
 426:	ba f0       	brmi	.+46     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 428:	91 50       	subi	r25, 0x01	; 1
 42a:	a1 f0       	breq	.+40     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 42c:	ff 0f       	add	r31, r31
 42e:	bb 1f       	adc	r27, r27
 430:	66 1f       	adc	r22, r22
 432:	77 1f       	adc	r23, r23
 434:	88 1f       	adc	r24, r24
 436:	c2 f7       	brpl	.-16     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 438:	0e c0       	rjmp	.+28     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 43a:	ba 0f       	add	r27, r26
 43c:	62 1f       	adc	r22, r18
 43e:	73 1f       	adc	r23, r19
 440:	84 1f       	adc	r24, r20
 442:	48 f4       	brcc	.+18     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 444:	87 95       	ror	r24
 446:	77 95       	ror	r23
 448:	67 95       	ror	r22
 44a:	b7 95       	ror	r27
 44c:	f7 95       	ror	r31
 44e:	9e 3f       	cpi	r25, 0xFE	; 254
 450:	08 f0       	brcs	.+2      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 452:	b3 cf       	rjmp	.-154    	; 0x3ba <__addsf3+0x1e>
 454:	93 95       	inc	r25
 456:	88 0f       	add	r24, r24
 458:	08 f0       	brcs	.+2      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 45a:	99 27       	eor	r25, r25
 45c:	ee 0f       	add	r30, r30
 45e:	97 95       	ror	r25
 460:	87 95       	ror	r24
 462:	08 95       	ret

00000464 <__fixsfsi>:
 464:	04 d0       	rcall	.+8      	; 0x46e <__fixunssfsi>
 466:	68 94       	set
 468:	b1 11       	cpse	r27, r1
 46a:	78 c0       	rjmp	.+240    	; 0x55c <__fp_szero>
 46c:	08 95       	ret

0000046e <__fixunssfsi>:
 46e:	5b d0       	rcall	.+182    	; 0x526 <__fp_splitA>
 470:	88 f0       	brcs	.+34     	; 0x494 <__fixunssfsi+0x26>
 472:	9f 57       	subi	r25, 0x7F	; 127
 474:	90 f0       	brcs	.+36     	; 0x49a <__fixunssfsi+0x2c>
 476:	b9 2f       	mov	r27, r25
 478:	99 27       	eor	r25, r25
 47a:	b7 51       	subi	r27, 0x17	; 23
 47c:	a0 f0       	brcs	.+40     	; 0x4a6 <__fixunssfsi+0x38>
 47e:	d1 f0       	breq	.+52     	; 0x4b4 <__fixunssfsi+0x46>
 480:	66 0f       	add	r22, r22
 482:	77 1f       	adc	r23, r23
 484:	88 1f       	adc	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	1a f0       	brmi	.+6      	; 0x490 <__fixunssfsi+0x22>
 48a:	ba 95       	dec	r27
 48c:	c9 f7       	brne	.-14     	; 0x480 <__fixunssfsi+0x12>
 48e:	12 c0       	rjmp	.+36     	; 0x4b4 <__fixunssfsi+0x46>
 490:	b1 30       	cpi	r27, 0x01	; 1
 492:	81 f0       	breq	.+32     	; 0x4b4 <__fixunssfsi+0x46>
 494:	62 d0       	rcall	.+196    	; 0x55a <__fp_zero>
 496:	b1 e0       	ldi	r27, 0x01	; 1
 498:	08 95       	ret
 49a:	5f c0       	rjmp	.+190    	; 0x55a <__fp_zero>
 49c:	67 2f       	mov	r22, r23
 49e:	78 2f       	mov	r23, r24
 4a0:	88 27       	eor	r24, r24
 4a2:	b8 5f       	subi	r27, 0xF8	; 248
 4a4:	39 f0       	breq	.+14     	; 0x4b4 <__fixunssfsi+0x46>
 4a6:	b9 3f       	cpi	r27, 0xF9	; 249
 4a8:	cc f3       	brlt	.-14     	; 0x49c <__fixunssfsi+0x2e>
 4aa:	86 95       	lsr	r24
 4ac:	77 95       	ror	r23
 4ae:	67 95       	ror	r22
 4b0:	b3 95       	inc	r27
 4b2:	d9 f7       	brne	.-10     	; 0x4aa <__fixunssfsi+0x3c>
 4b4:	3e f4       	brtc	.+14     	; 0x4c4 <__fixunssfsi+0x56>
 4b6:	90 95       	com	r25
 4b8:	80 95       	com	r24
 4ba:	70 95       	com	r23
 4bc:	61 95       	neg	r22
 4be:	7f 4f       	sbci	r23, 0xFF	; 255
 4c0:	8f 4f       	sbci	r24, 0xFF	; 255
 4c2:	9f 4f       	sbci	r25, 0xFF	; 255
 4c4:	08 95       	ret

000004c6 <__fp_inf>:
 4c6:	97 f9       	bld	r25, 7
 4c8:	9f 67       	ori	r25, 0x7F	; 127
 4ca:	80 e8       	ldi	r24, 0x80	; 128
 4cc:	70 e0       	ldi	r23, 0x00	; 0
 4ce:	60 e0       	ldi	r22, 0x00	; 0
 4d0:	08 95       	ret

000004d2 <__fp_nan>:
 4d2:	9f ef       	ldi	r25, 0xFF	; 255
 4d4:	80 ec       	ldi	r24, 0xC0	; 192
 4d6:	08 95       	ret

000004d8 <__fp_pscA>:
 4d8:	00 24       	eor	r0, r0
 4da:	0a 94       	dec	r0
 4dc:	16 16       	cp	r1, r22
 4de:	17 06       	cpc	r1, r23
 4e0:	18 06       	cpc	r1, r24
 4e2:	09 06       	cpc	r0, r25
 4e4:	08 95       	ret

000004e6 <__fp_pscB>:
 4e6:	00 24       	eor	r0, r0
 4e8:	0a 94       	dec	r0
 4ea:	12 16       	cp	r1, r18
 4ec:	13 06       	cpc	r1, r19
 4ee:	14 06       	cpc	r1, r20
 4f0:	05 06       	cpc	r0, r21
 4f2:	08 95       	ret

000004f4 <__fp_round>:
 4f4:	09 2e       	mov	r0, r25
 4f6:	03 94       	inc	r0
 4f8:	00 0c       	add	r0, r0
 4fa:	11 f4       	brne	.+4      	; 0x500 <__fp_round+0xc>
 4fc:	88 23       	and	r24, r24
 4fe:	52 f0       	brmi	.+20     	; 0x514 <__fp_round+0x20>
 500:	bb 0f       	add	r27, r27
 502:	40 f4       	brcc	.+16     	; 0x514 <__fp_round+0x20>
 504:	bf 2b       	or	r27, r31
 506:	11 f4       	brne	.+4      	; 0x50c <__fp_round+0x18>
 508:	60 ff       	sbrs	r22, 0
 50a:	04 c0       	rjmp	.+8      	; 0x514 <__fp_round+0x20>
 50c:	6f 5f       	subi	r22, 0xFF	; 255
 50e:	7f 4f       	sbci	r23, 0xFF	; 255
 510:	8f 4f       	sbci	r24, 0xFF	; 255
 512:	9f 4f       	sbci	r25, 0xFF	; 255
 514:	08 95       	ret

00000516 <__fp_split3>:
 516:	57 fd       	sbrc	r21, 7
 518:	90 58       	subi	r25, 0x80	; 128
 51a:	44 0f       	add	r20, r20
 51c:	55 1f       	adc	r21, r21
 51e:	59 f0       	breq	.+22     	; 0x536 <__fp_splitA+0x10>
 520:	5f 3f       	cpi	r21, 0xFF	; 255
 522:	71 f0       	breq	.+28     	; 0x540 <__fp_splitA+0x1a>
 524:	47 95       	ror	r20

00000526 <__fp_splitA>:
 526:	88 0f       	add	r24, r24
 528:	97 fb       	bst	r25, 7
 52a:	99 1f       	adc	r25, r25
 52c:	61 f0       	breq	.+24     	; 0x546 <__fp_splitA+0x20>
 52e:	9f 3f       	cpi	r25, 0xFF	; 255
 530:	79 f0       	breq	.+30     	; 0x550 <__fp_splitA+0x2a>
 532:	87 95       	ror	r24
 534:	08 95       	ret
 536:	12 16       	cp	r1, r18
 538:	13 06       	cpc	r1, r19
 53a:	14 06       	cpc	r1, r20
 53c:	55 1f       	adc	r21, r21
 53e:	f2 cf       	rjmp	.-28     	; 0x524 <__fp_split3+0xe>
 540:	46 95       	lsr	r20
 542:	f1 df       	rcall	.-30     	; 0x526 <__fp_splitA>
 544:	08 c0       	rjmp	.+16     	; 0x556 <__fp_splitA+0x30>
 546:	16 16       	cp	r1, r22
 548:	17 06       	cpc	r1, r23
 54a:	18 06       	cpc	r1, r24
 54c:	99 1f       	adc	r25, r25
 54e:	f1 cf       	rjmp	.-30     	; 0x532 <__fp_splitA+0xc>
 550:	86 95       	lsr	r24
 552:	71 05       	cpc	r23, r1
 554:	61 05       	cpc	r22, r1
 556:	08 94       	sec
 558:	08 95       	ret

0000055a <__fp_zero>:
 55a:	e8 94       	clt

0000055c <__fp_szero>:
 55c:	bb 27       	eor	r27, r27
 55e:	66 27       	eor	r22, r22
 560:	77 27       	eor	r23, r23
 562:	cb 01       	movw	r24, r22
 564:	97 f9       	bld	r25, 7
 566:	08 95       	ret

00000568 <__divmodhi4>:
 568:	97 fb       	bst	r25, 7
 56a:	07 2e       	mov	r0, r23
 56c:	16 f4       	brtc	.+4      	; 0x572 <__divmodhi4+0xa>
 56e:	00 94       	com	r0
 570:	06 d0       	rcall	.+12     	; 0x57e <__divmodhi4_neg1>
 572:	77 fd       	sbrc	r23, 7
 574:	08 d0       	rcall	.+16     	; 0x586 <__divmodhi4_neg2>
 576:	0b d0       	rcall	.+22     	; 0x58e <__udivmodhi4>
 578:	07 fc       	sbrc	r0, 7
 57a:	05 d0       	rcall	.+10     	; 0x586 <__divmodhi4_neg2>
 57c:	3e f4       	brtc	.+14     	; 0x58c <__divmodhi4_exit>

0000057e <__divmodhi4_neg1>:
 57e:	90 95       	com	r25
 580:	81 95       	neg	r24
 582:	9f 4f       	sbci	r25, 0xFF	; 255
 584:	08 95       	ret

00000586 <__divmodhi4_neg2>:
 586:	70 95       	com	r23
 588:	61 95       	neg	r22
 58a:	7f 4f       	sbci	r23, 0xFF	; 255

0000058c <__divmodhi4_exit>:
 58c:	08 95       	ret

0000058e <__udivmodhi4>:
 58e:	aa 1b       	sub	r26, r26
 590:	bb 1b       	sub	r27, r27
 592:	51 e1       	ldi	r21, 0x11	; 17
 594:	07 c0       	rjmp	.+14     	; 0x5a4 <__udivmodhi4_ep>

00000596 <__udivmodhi4_loop>:
 596:	aa 1f       	adc	r26, r26
 598:	bb 1f       	adc	r27, r27
 59a:	a6 17       	cp	r26, r22
 59c:	b7 07       	cpc	r27, r23
 59e:	10 f0       	brcs	.+4      	; 0x5a4 <__udivmodhi4_ep>
 5a0:	a6 1b       	sub	r26, r22
 5a2:	b7 0b       	sbc	r27, r23

000005a4 <__udivmodhi4_ep>:
 5a4:	88 1f       	adc	r24, r24
 5a6:	99 1f       	adc	r25, r25
 5a8:	5a 95       	dec	r21
 5aa:	a9 f7       	brne	.-22     	; 0x596 <__udivmodhi4_loop>
 5ac:	80 95       	com	r24
 5ae:	90 95       	com	r25
 5b0:	bc 01       	movw	r22, r24
 5b2:	cd 01       	movw	r24, r26
 5b4:	08 95       	ret

000005b6 <_exit>:
 5b6:	f8 94       	cli

000005b8 <__stop_program>:
 5b8:	ff cf       	rjmp	.-2      	; 0x5b8 <__stop_program>
