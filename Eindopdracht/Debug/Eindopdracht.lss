
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000738  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000738  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000768  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f76  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093d  00000000  00000000  000017ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006a0  00000000  00000000  000020f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00002798  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054b  00000000  00000000  000028e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000085e  00000000  00000000  00002e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000368d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	ce d1       	rcall	.+924    	; 0x446 <main>
  aa:	0a c3       	rjmp	.+1556   	; 0x6c0 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <spi_masterInit>:
	spi_writeWord(0x0C, 0x01); // Afsluiten -> 1 = normaal
}

void displayOff()
{
	spi_writeWord(0x0C, 0x00); // Afsluiten -> 1 = normaal
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	87 bb       	out	0x17, r24	; 23
  b2:	87 b3       	in	r24, 0x17	; 23
  b4:	87 7f       	andi	r24, 0xF7	; 247
  b6:	87 bb       	out	0x17, r24	; 23
  b8:	88 b3       	in	r24, 0x18	; 24
  ba:	81 60       	ori	r24, 0x01	; 1
  bc:	88 bb       	out	0x18, r24	; 24
  be:	82 e5       	ldi	r24, 0x52	; 82
  c0:	8d b9       	out	0x0d, r24	; 13
  c2:	08 95       	ret

000000c4 <spi_write>:
  c4:	8f b9       	out	0x0f, r24	; 15
  c6:	77 9b       	sbis	0x0e, 7	; 14
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <spi_write+0x2>
  ca:	08 95       	ret

000000cc <spi_slaveSelect>:
  cc:	98 b3       	in	r25, 0x18	; 24
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <spi_slaveSelect+0xc>
  d4:	22 0f       	add	r18, r18
  d6:	33 1f       	adc	r19, r19
  d8:	8a 95       	dec	r24
  da:	e2 f7       	brpl	.-8      	; 0xd4 <spi_slaveSelect+0x8>
  dc:	20 95       	com	r18
  de:	29 23       	and	r18, r25
  e0:	28 bb       	out	0x18, r18	; 24
  e2:	08 95       	ret

000000e4 <spi_slaveDeSelect>:
  e4:	98 b3       	in	r25, 0x18	; 24
  e6:	21 e0       	ldi	r18, 0x01	; 1
  e8:	30 e0       	ldi	r19, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <spi_slaveDeSelect+0xc>
  ec:	22 0f       	add	r18, r18
  ee:	33 1f       	adc	r19, r19
  f0:	8a 95       	dec	r24
  f2:	e2 f7       	brpl	.-8      	; 0xec <spi_slaveDeSelect+0x8>
  f4:	29 2b       	or	r18, r25
  f6:	28 bb       	out	0x18, r18	; 24
  f8:	08 95       	ret

000000fa <spi_writeWord>:
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	d8 2f       	mov	r29, r24
 100:	c6 2f       	mov	r28, r22
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	e3 df       	rcall	.-58     	; 0xcc <spi_slaveSelect>
 106:	8d 2f       	mov	r24, r29
 108:	dd df       	rcall	.-70     	; 0xc4 <spi_write>
 10a:	8c 2f       	mov	r24, r28
 10c:	db df       	rcall	.-74     	; 0xc4 <spi_write>
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	e9 df       	rcall	.-46     	; 0xe4 <spi_slaveDeSelect>
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <displayDriverInit>:
 118:	6f ef       	ldi	r22, 0xFF	; 255
 11a:	89 e0       	ldi	r24, 0x09	; 9
 11c:	ee df       	rcall	.-36     	; 0xfa <spi_writeWord>
 11e:	6f e0       	ldi	r22, 0x0F	; 15
 120:	8a e0       	ldi	r24, 0x0A	; 10
 122:	eb df       	rcall	.-42     	; 0xfa <spi_writeWord>
 124:	6f e0       	ldi	r22, 0x0F	; 15
 126:	8b e0       	ldi	r24, 0x0B	; 11
 128:	e8 df       	rcall	.-48     	; 0xfa <spi_writeWord>
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	8c e0       	ldi	r24, 0x0C	; 12
 12e:	e5 cf       	rjmp	.-54     	; 0xfa <spi_writeWord>
 130:	08 95       	ret

00000132 <writeLedDisplay>:
}

void writeLedDisplay(int value){
 132:	ff 92       	push	r15
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	9c 01       	movw	r18, r24
	int digit1 = -1;
	int digit2 = -1;
	int digit3 = -1;
	char digit4 = -1;
	
	if (value < 10 && value >= 0){
 13e:	8a 30       	cpi	r24, 0x0A	; 10
 140:	91 05       	cpc	r25, r1
 142:	40 f4       	brcc	.+16     	; 0x154 <writeLedDisplay+0x22>
		digit4 = value;
 144:	f8 2e       	mov	r15, r24
}

void writeLedDisplay(int value){
	int digit1 = -1;
	int digit2 = -1;
	int digit3 = -1;
 146:	cf ef       	ldi	r28, 0xFF	; 255
 148:	df ef       	ldi	r29, 0xFF	; 255
	spi_writeWord(0x0C, 0x00); // Afsluiten -> 1 = normaal
}

void writeLedDisplay(int value){
	int digit1 = -1;
	int digit2 = -1;
 14a:	0f ef       	ldi	r16, 0xFF	; 255
 14c:	1f ef       	ldi	r17, 0xFF	; 255
{
	spi_writeWord(0x0C, 0x00); // Afsluiten -> 1 = normaal
}

void writeLedDisplay(int value){
	int digit1 = -1;
 14e:	6f ef       	ldi	r22, 0xFF	; 255
 150:	7f ef       	ldi	r23, 0xFF	; 255
 152:	9b c0       	rjmp	.+310    	; 0x28a <writeLedDisplay+0x158>
	int digit3 = -1;
	char digit4 = -1;
	
	if (value < 10 && value >= 0){
		digit4 = value;
		} else if (value >= 10 && value < 100){
 154:	0a 97       	sbiw	r24, 0x0a	; 10
 156:	8a 35       	cpi	r24, 0x5A	; 90
 158:	91 05       	cpc	r25, r1
 15a:	60 f4       	brcc	.+24     	; 0x174 <writeLedDisplay+0x42>
		digit4 = value / 10;
 15c:	c9 01       	movw	r24, r18
 15e:	6a e0       	ldi	r22, 0x0A	; 10
 160:	70 e0       	ldi	r23, 0x00	; 0
 162:	87 d2       	rcall	.+1294   	; 0x672 <__divmodhi4>
 164:	f6 2e       	mov	r15, r22
		digit3 = value % 10;
 166:	c8 2f       	mov	r28, r24
 168:	d9 2f       	mov	r29, r25
	spi_writeWord(0x0C, 0x00); // Afsluiten -> 1 = normaal
}

void writeLedDisplay(int value){
	int digit1 = -1;
	int digit2 = -1;
 16a:	0f ef       	ldi	r16, 0xFF	; 255
 16c:	1f ef       	ldi	r17, 0xFF	; 255
{
	spi_writeWord(0x0C, 0x00); // Afsluiten -> 1 = normaal
}

void writeLedDisplay(int value){
	int digit1 = -1;
 16e:	6f ef       	ldi	r22, 0xFF	; 255
 170:	7f ef       	ldi	r23, 0xFF	; 255
 172:	8b c0       	rjmp	.+278    	; 0x28a <writeLedDisplay+0x158>
	if (value < 10 && value >= 0){
		digit4 = value;
		} else if (value >= 10 && value < 100){
		digit4 = value / 10;
		digit3 = value % 10;
		} else if (value >= 100 && value < 1000){
 174:	c9 01       	movw	r24, r18
 176:	84 56       	subi	r24, 0x64	; 100
 178:	91 09       	sbc	r25, r1
 17a:	84 38       	cpi	r24, 0x84	; 132
 17c:	93 40       	sbci	r25, 0x03	; 3
 17e:	a8 f4       	brcc	.+42     	; 0x1aa <writeLedDisplay+0x78>
		digit4 = value / 100;
 180:	c9 01       	movw	r24, r18
 182:	64 e6       	ldi	r22, 0x64	; 100
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	75 d2       	rcall	.+1258   	; 0x672 <__divmodhi4>
 188:	f6 2e       	mov	r15, r22
		digit3 = (value / 10) % 10;
 18a:	ea e0       	ldi	r30, 0x0A	; 10
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	c9 01       	movw	r24, r18
 190:	bf 01       	movw	r22, r30
 192:	6f d2       	rcall	.+1246   	; 0x672 <__divmodhi4>
 194:	38 2f       	mov	r19, r24
 196:	29 2f       	mov	r18, r25
 198:	cb 01       	movw	r24, r22
 19a:	bf 01       	movw	r22, r30
 19c:	6a d2       	rcall	.+1236   	; 0x672 <__divmodhi4>
 19e:	ec 01       	movw	r28, r24
		digit2 = value % 10;
 1a0:	03 2f       	mov	r16, r19
 1a2:	12 2f       	mov	r17, r18
{
	spi_writeWord(0x0C, 0x00); // Afsluiten -> 1 = normaal
}

void writeLedDisplay(int value){
	int digit1 = -1;
 1a4:	6f ef       	ldi	r22, 0xFF	; 255
 1a6:	7f ef       	ldi	r23, 0xFF	; 255
 1a8:	70 c0       	rjmp	.+224    	; 0x28a <writeLedDisplay+0x158>
		digit3 = value % 10;
		} else if (value >= 100 && value < 1000){
		digit4 = value / 100;
		digit3 = (value / 10) % 10;
		digit2 = value % 10;
		} else if (value >= 1000 && value < 10000){
 1aa:	c9 01       	movw	r24, r18
 1ac:	88 5e       	subi	r24, 0xE8	; 232
 1ae:	93 40       	sbci	r25, 0x03	; 3
 1b0:	88 32       	cpi	r24, 0x28	; 40
 1b2:	93 42       	sbci	r25, 0x23	; 35
		digit4 = value / 1000;
 1b4:	d8 f4       	brcc	.+54     	; 0x1ec <writeLedDisplay+0xba>
 1b6:	c9 01       	movw	r24, r18
 1b8:	68 ee       	ldi	r22, 0xE8	; 232
 1ba:	73 e0       	ldi	r23, 0x03	; 3
 1bc:	5a d2       	rcall	.+1204   	; 0x672 <__divmodhi4>
		digit3 = (value / 100) % 10;
 1be:	f6 2e       	mov	r15, r22
 1c0:	c9 01       	movw	r24, r18
 1c2:	64 e6       	ldi	r22, 0x64	; 100
 1c4:	70 e0       	ldi	r23, 0x00	; 0
 1c6:	55 d2       	rcall	.+1194   	; 0x672 <__divmodhi4>
 1c8:	cb 01       	movw	r24, r22
 1ca:	ea e0       	ldi	r30, 0x0A	; 10
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	bf 01       	movw	r22, r30
 1d0:	50 d2       	rcall	.+1184   	; 0x672 <__divmodhi4>
		digit2 = (value / 10) % 10;
 1d2:	ec 01       	movw	r28, r24
 1d4:	c9 01       	movw	r24, r18
 1d6:	bf 01       	movw	r22, r30
 1d8:	4c d2       	rcall	.+1176   	; 0x672 <__divmodhi4>
 1da:	38 2f       	mov	r19, r24
 1dc:	29 2f       	mov	r18, r25
 1de:	cb 01       	movw	r24, r22
 1e0:	bf 01       	movw	r22, r30
 1e2:	47 d2       	rcall	.+1166   	; 0x672 <__divmodhi4>
 1e4:	8c 01       	movw	r16, r24
		digit1 = value % 10;
 1e6:	63 2f       	mov	r22, r19
 1e8:	72 2f       	mov	r23, r18
 1ea:	4f c0       	rjmp	.+158    	; 0x28a <writeLedDisplay+0x158>
		}  else if (value < 0 && value > -10){
 1ec:	c9 01       	movw	r24, r18
 1ee:	09 96       	adiw	r24, 0x09	; 9
 1f0:	09 97       	sbiw	r24, 0x09	; 9
 1f2:	68 f4       	brcc	.+26     	; 0x20e <writeLedDisplay+0xdc>
		digit4 = 0x0F; // Hier moet eigenlijk een - teken staan
		value = (value * -1);
 1f4:	cc 27       	eor	r28, r28
 1f6:	dd 27       	eor	r29, r29
 1f8:	c2 1b       	sub	r28, r18
 1fa:	d3 0b       	sbc	r29, r19
		digit4 = value / 1000;
		digit3 = (value / 100) % 10;
		digit2 = (value / 10) % 10;
		digit1 = value % 10;
		}  else if (value < 0 && value > -10){
		digit4 = 0x0F; // Hier moet eigenlijk een - teken staan
 1fc:	0f 2e       	mov	r0, r31
 1fe:	ff e0       	ldi	r31, 0x0F	; 15
 200:	ff 2e       	mov	r15, r31
 202:	f0 2d       	mov	r31, r0
	spi_writeWord(0x0C, 0x00); // Afsluiten -> 1 = normaal
}

void writeLedDisplay(int value){
	int digit1 = -1;
	int digit2 = -1;
 204:	0f ef       	ldi	r16, 0xFF	; 255
 206:	1f ef       	ldi	r17, 0xFF	; 255
{
	spi_writeWord(0x0C, 0x00); // Afsluiten -> 1 = normaal
}

void writeLedDisplay(int value){
	int digit1 = -1;
 208:	6f ef       	ldi	r22, 0xFF	; 255
 20a:	7f ef       	ldi	r23, 0xFF	; 255
 20c:	3e c0       	rjmp	.+124    	; 0x28a <writeLedDisplay+0x158>
		digit1 = value % 10;
		}  else if (value < 0 && value > -10){
		digit4 = 0x0F; // Hier moet eigenlijk een - teken staan
		value = (value * -1);
		digit3 = value;
		} else if (value <= -10 && value > -100){
 20e:	c9 01       	movw	r24, r18
 210:	8d 59       	subi	r24, 0x9D	; 157
 212:	9f 4f       	sbci	r25, 0xFF	; 255
 214:	8a 35       	cpi	r24, 0x5A	; 90
 216:	91 05       	cpc	r25, r1
		digit4 = 0x0F; // Hier moet eigenlijk een - teken staan
		value = (value * -1);
 218:	80 f4       	brcc	.+32     	; 0x23a <writeLedDisplay+0x108>
 21a:	88 27       	eor	r24, r24
 21c:	99 27       	eor	r25, r25
 21e:	82 1b       	sub	r24, r18
		digit3 = value / 10;
		digit2 = value % 10;
 220:	93 0b       	sbc	r25, r19
 222:	6a e0       	ldi	r22, 0x0A	; 10
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	25 d2       	rcall	.+1098   	; 0x672 <__divmodhi4>
 228:	eb 01       	movw	r28, r22
 22a:	8c 01       	movw	r16, r24
		}  else if (value < 0 && value > -10){
		digit4 = 0x0F; // Hier moet eigenlijk een - teken staan
		value = (value * -1);
		digit3 = value;
		} else if (value <= -10 && value > -100){
		digit4 = 0x0F; // Hier moet eigenlijk een - teken staan
 22c:	0f 2e       	mov	r0, r31
 22e:	ff e0       	ldi	r31, 0x0F	; 15
 230:	ff 2e       	mov	r15, r31
 232:	f0 2d       	mov	r31, r0
{
	spi_writeWord(0x0C, 0x00); // Afsluiten -> 1 = normaal
}

void writeLedDisplay(int value){
	int digit1 = -1;
 234:	6f ef       	ldi	r22, 0xFF	; 255
 236:	7f ef       	ldi	r23, 0xFF	; 255
 238:	28 c0       	rjmp	.+80     	; 0x28a <writeLedDisplay+0x158>
		} else if (value <= -10 && value > -100){
		digit4 = 0x0F; // Hier moet eigenlijk een - teken staan
		value = (value * -1);
		digit3 = value / 10;
		digit2 = value % 10;
		} else if (value <= -100 && value > -1000){
 23a:	c9 01       	movw	r24, r18
 23c:	89 51       	subi	r24, 0x19	; 25
 23e:	9c 4f       	sbci	r25, 0xFC	; 252
 240:	84 38       	cpi	r24, 0x84	; 132
 242:	93 40       	sbci	r25, 0x03	; 3
		digit4 = 0x0F; // Hier moet eigenlijk een - teken staan
		value = (value * -1);
 244:	d0 f4       	brcc	.+52     	; 0x27a <writeLedDisplay+0x148>
 246:	31 95       	neg	r19
		digit3 = value / 100;
 248:	21 95       	neg	r18
 24a:	31 09       	sbc	r19, r1
 24c:	c9 01       	movw	r24, r18
 24e:	64 e6       	ldi	r22, 0x64	; 100
 250:	70 e0       	ldi	r23, 0x00	; 0
		digit2 = (value / 10) % 10;
 252:	0f d2       	rcall	.+1054   	; 0x672 <__divmodhi4>
 254:	eb 01       	movw	r28, r22
 256:	ea e0       	ldi	r30, 0x0A	; 10
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	c9 01       	movw	r24, r18
 25c:	bf 01       	movw	r22, r30
 25e:	09 d2       	rcall	.+1042   	; 0x672 <__divmodhi4>
 260:	38 2f       	mov	r19, r24
 262:	29 2f       	mov	r18, r25
 264:	cb 01       	movw	r24, r22
 266:	bf 01       	movw	r22, r30
 268:	04 d2       	rcall	.+1032   	; 0x672 <__divmodhi4>
 26a:	8c 01       	movw	r16, r24
		digit1 = value % 10;
 26c:	63 2f       	mov	r22, r19
 26e:	72 2f       	mov	r23, r18
		digit4 = 0x0F; // Hier moet eigenlijk een - teken staan
		value = (value * -1);
		digit3 = value / 10;
		digit2 = value % 10;
		} else if (value <= -100 && value > -1000){
		digit4 = 0x0F; // Hier moet eigenlijk een - teken staan
 270:	0f 2e       	mov	r0, r31
 272:	ff e0       	ldi	r31, 0x0F	; 15
 274:	ff 2e       	mov	r15, r31
 276:	f0 2d       	mov	r31, r0
 278:	08 c0       	rjmp	.+16     	; 0x28a <writeLedDisplay+0x158>

void writeLedDisplay(int value){
	int digit1 = -1;
	int digit2 = -1;
	int digit3 = -1;
	char digit4 = -1;
 27a:	ff 24       	eor	r15, r15
}

void writeLedDisplay(int value){
	int digit1 = -1;
	int digit2 = -1;
	int digit3 = -1;
 27c:	fa 94       	dec	r15
 27e:	cf ef       	ldi	r28, 0xFF	; 255
	spi_writeWord(0x0C, 0x00); // Afsluiten -> 1 = normaal
}

void writeLedDisplay(int value){
	int digit1 = -1;
	int digit2 = -1;
 280:	df ef       	ldi	r29, 0xFF	; 255
 282:	0f ef       	ldi	r16, 0xFF	; 255
{
	spi_writeWord(0x0C, 0x00); // Afsluiten -> 1 = normaal
}

void writeLedDisplay(int value){
	int digit1 = -1;
 284:	1f ef       	ldi	r17, 0xFF	; 255
 286:	6f ef       	ldi	r22, 0xFF	; 255
		digit3 = value / 100;
		digit2 = (value / 10) % 10;
		digit1 = value % 10;
	}
	
	if (digit1 != -1){
 288:	7f ef       	ldi	r23, 0xFF	; 255
 28a:	6f 3f       	cpi	r22, 0xFF	; 255
 28c:	8f ef       	ldi	r24, 0xFF	; 255
		spi_writeWord(1, digit1);
 28e:	78 07       	cpc	r23, r24
 290:	49 f0       	breq	.+18     	; 0x2a4 <writeLedDisplay+0x172>
 292:	81 e0       	ldi	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 294:	32 df       	rcall	.-412    	; 0xfa <spi_writeWord>
 296:	8f e1       	ldi	r24, 0x1F	; 31
 298:	9e e4       	ldi	r25, 0x4E	; 78
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <writeLedDisplay+0x168>
 29e:	00 c0       	rjmp	.+0      	; 0x2a0 <writeLedDisplay+0x16e>
 2a0:	00 00       	nop
		_delay_ms(10);
		} else {
		spi_writeWord(1, 0x0F);
 2a2:	09 c0       	rjmp	.+18     	; 0x2b6 <writeLedDisplay+0x184>
 2a4:	6f e0       	ldi	r22, 0x0F	; 15
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	28 df       	rcall	.-432    	; 0xfa <spi_writeWord>
 2aa:	8f e1       	ldi	r24, 0x1F	; 31
 2ac:	9e e4       	ldi	r25, 0x4E	; 78
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <writeLedDisplay+0x17c>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <writeLedDisplay+0x182>
		_delay_ms(10);
	}
	if (digit2 != -1){
 2b4:	00 00       	nop
 2b6:	0f 3f       	cpi	r16, 0xFF	; 255
 2b8:	9f ef       	ldi	r25, 0xFF	; 255
		spi_writeWord(2, digit2);
 2ba:	19 07       	cpc	r17, r25
 2bc:	51 f0       	breq	.+20     	; 0x2d2 <writeLedDisplay+0x1a0>
 2be:	60 2f       	mov	r22, r16
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	1b df       	rcall	.-458    	; 0xfa <spi_writeWord>
 2c4:	8f e1       	ldi	r24, 0x1F	; 31
 2c6:	9e e4       	ldi	r25, 0x4E	; 78
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <writeLedDisplay+0x196>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <writeLedDisplay+0x19c>
		_delay_ms(10);
		} else {
		spi_writeWord(2, 0x0F);
 2ce:	00 00       	nop
 2d0:	09 c0       	rjmp	.+18     	; 0x2e4 <writeLedDisplay+0x1b2>
 2d2:	6f e0       	ldi	r22, 0x0F	; 15
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	11 df       	rcall	.-478    	; 0xfa <spi_writeWord>
 2d8:	8f e1       	ldi	r24, 0x1F	; 31
 2da:	9e e4       	ldi	r25, 0x4E	; 78
 2dc:	01 97       	sbiw	r24, 0x01	; 1
 2de:	f1 f7       	brne	.-4      	; 0x2dc <writeLedDisplay+0x1aa>
		_delay_ms(10);
	}
	if (digit3 != -1){
 2e0:	00 c0       	rjmp	.+0      	; 0x2e2 <writeLedDisplay+0x1b0>
 2e2:	00 00       	nop
 2e4:	cf 3f       	cpi	r28, 0xFF	; 255
 2e6:	9f ef       	ldi	r25, 0xFF	; 255
		spi_writeWord(3, digit3);
 2e8:	d9 07       	cpc	r29, r25
 2ea:	51 f0       	breq	.+20     	; 0x300 <writeLedDisplay+0x1ce>
 2ec:	6c 2f       	mov	r22, r28
 2ee:	83 e0       	ldi	r24, 0x03	; 3
 2f0:	04 df       	rcall	.-504    	; 0xfa <spi_writeWord>
 2f2:	8f e1       	ldi	r24, 0x1F	; 31
 2f4:	9e e4       	ldi	r25, 0x4E	; 78
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <writeLedDisplay+0x1c4>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <writeLedDisplay+0x1ca>
		_delay_ms(10);
		} else {
		spi_writeWord(3, 0x0F);
 2fc:	00 00       	nop
 2fe:	09 c0       	rjmp	.+18     	; 0x312 <writeLedDisplay+0x1e0>
 300:	6f e0       	ldi	r22, 0x0F	; 15
 302:	83 e0       	ldi	r24, 0x03	; 3
 304:	fa de       	rcall	.-524    	; 0xfa <spi_writeWord>
 306:	8f e1       	ldi	r24, 0x1F	; 31
 308:	9e e4       	ldi	r25, 0x4E	; 78
 30a:	01 97       	sbiw	r24, 0x01	; 1
 30c:	f1 f7       	brne	.-4      	; 0x30a <writeLedDisplay+0x1d8>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <writeLedDisplay+0x1de>
		_delay_ms(10);
	}
	if (digit4 != -1){
		spi_writeWord(4, digit4);
 310:	00 00       	nop
 312:	6f 2d       	mov	r22, r15
 314:	84 e0       	ldi	r24, 0x04	; 4
 316:	f1 de       	rcall	.-542    	; 0xfa <spi_writeWord>
 318:	8f e1       	ldi	r24, 0x1F	; 31
 31a:	9e e4       	ldi	r25, 0x4E	; 78
 31c:	01 97       	sbiw	r24, 0x01	; 1
 31e:	f1 f7       	brne	.-4      	; 0x31c <writeLedDisplay+0x1ea>
 320:	00 c0       	rjmp	.+0      	; 0x322 <writeLedDisplay+0x1f0>
 322:	00 00       	nop
		_delay_ms(10);
		} else {
		spi_writeWord(4, 0x0F);
		_delay_ms(10);
	}
}
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
 32c:	ff 90       	pop	r15
 32e:	08 95       	ret

00000330 <initUltrasonic>:

void initUltrasonic() {
	DDRD |= (1 << TRIGGER_PIN); // Zet trigger-pin als output
 330:	81 b3       	in	r24, 0x11	; 17
 332:	82 60       	ori	r24, 0x02	; 2
 334:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~(1 << ECHO_PIN);   // Zet echo-pin als input
 336:	81 b3       	in	r24, 0x11	; 17
 338:	8e 7f       	andi	r24, 0xFE	; 254
 33a:	81 bb       	out	0x11, r24	; 17
 33c:	08 95       	ret

0000033e <triggerPulse>:
}

void triggerPulse() {
	PORTD |= (1 << TRIGGER_PIN); // Zet trigger-pin hoog
 33e:	82 b3       	in	r24, 0x12	; 18
 340:	82 60       	ori	r24, 0x02	; 2
 342:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 344:	8a e1       	ldi	r24, 0x1A	; 26
 346:	8a 95       	dec	r24
 348:	f1 f7       	brne	.-4      	; 0x346 <triggerPulse+0x8>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <triggerPulse+0xe>
	_delay_us(10);               // Wacht 10 microseconden
	PORTD &= ~(1 << TRIGGER_PIN);// Zet trigger-pin laag
 34c:	82 b3       	in	r24, 0x12	; 18
 34e:	8d 7f       	andi	r24, 0xFD	; 253
 350:	82 bb       	out	0x12, r24	; 18
 352:	08 95       	ret

00000354 <measureDistance>:
}

uint16_t measureDistance() {
	uint16_t pulse_width = 0;
	uint32_t timeout = 10000; // Zet een time-out waarde (aanpassen indien nodig)
 354:	40 e1       	ldi	r20, 0x10	; 16
 356:	57 e2       	ldi	r21, 0x27	; 39
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	70 e0       	ldi	r23, 0x00	; 0

	// Wacht tot echo-pin hoog wordt
	while (!(PIND & (1 << ECHO_PIN)) && timeout > 0) {
 35c:	08 c0       	rjmp	.+16     	; 0x36e <measureDistance+0x1a>
		timeout--;
 35e:	41 50       	subi	r20, 0x01	; 1
 360:	51 09       	sbc	r21, r1
 362:	61 09       	sbc	r22, r1
 364:	71 09       	sbc	r23, r1
 366:	25 e0       	ldi	r18, 0x05	; 5
 368:	2a 95       	dec	r18
 36a:	f1 f7       	brne	.-4      	; 0x368 <measureDistance+0x14>
 36c:	00 00       	nop
uint16_t measureDistance() {
	uint16_t pulse_width = 0;
	uint32_t timeout = 10000; // Zet een time-out waarde (aanpassen indien nodig)

	// Wacht tot echo-pin hoog wordt
	while (!(PIND & (1 << ECHO_PIN)) && timeout > 0) {
 36e:	80 99       	sbic	0x10, 0	; 16
 370:	0e c0       	rjmp	.+28     	; 0x38e <measureDistance+0x3a>
 372:	41 15       	cp	r20, r1
 374:	51 05       	cpc	r21, r1
 376:	61 05       	cpc	r22, r1
 378:	71 05       	cpc	r23, r1
 37a:	89 f7       	brne	.-30     	; 0x35e <measureDistance+0xa>
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	08 c0       	rjmp	.+16     	; 0x392 <measureDistance+0x3e>
		_delay_us(2);
	}

	// Meet pulsbreedte
	while ((PIND & (1 << ECHO_PIN)) && timeout > 0) {
		pulse_width++;
 382:	01 96       	adiw	r24, 0x01	; 1
 384:	25 e0       	ldi	r18, 0x05	; 5
 386:	2a 95       	dec	r18
 388:	f1 f7       	brne	.-4      	; 0x386 <measureDistance+0x32>
 38a:	00 00       	nop
 38c:	02 c0       	rjmp	.+4      	; 0x392 <measureDistance+0x3e>
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	90 e0       	ldi	r25, 0x00	; 0
		timeout--;
		_delay_us(2);
	}

	// Meet pulsbreedte
	while ((PIND & (1 << ECHO_PIN)) && timeout > 0) {
 392:	80 9b       	sbis	0x10, 0	; 16
 394:	05 c0       	rjmp	.+10     	; 0x3a0 <measureDistance+0x4c>
 396:	41 15       	cp	r20, r1
 398:	51 05       	cpc	r21, r1
 39a:	61 05       	cpc	r22, r1
 39c:	71 05       	cpc	r23, r1
 39e:	89 f7       	brne	.-30     	; 0x382 <measureDistance+0x2e>
		pulse_width++;
		_delay_us(2);
	}

	return pulse_width; // Geef de pulsbreedte terug
}
 3a0:	08 95       	ret

000003a2 <ledOn>:

void ledOn(){
	PORTA |= (1 << LED_PIN); // Zet de LED aan
 3a2:	8b b3       	in	r24, 0x1b	; 27
 3a4:	81 60       	ori	r24, 0x01	; 1
 3a6:	8b bb       	out	0x1b, r24	; 27
 3a8:	08 95       	ret

000003aa <ledOff>:
}

void ledOff(){
	PORTA &= ~(1 << LED_PIN); // Zet de LED uit
 3aa:	8b b3       	in	r24, 0x1b	; 27
 3ac:	8e 7f       	andi	r24, 0xFE	; 254
 3ae:	8b bb       	out	0x1b, r24	; 27
 3b0:	08 95       	ret

000003b2 <timerStart>:
}

void timerStart(){
	PORTC = 0x01;
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	85 bb       	out	0x15, r24	; 21
	DDRE = 0x0F;
 3b6:	8f e0       	ldi	r24, 0x0F	; 15
 3b8:	82 b9       	out	0x02, r24	; 2

	TCCR1B |= ((1 << CS10 ) | (1 << CS11 )); // Zet timer op Fcpu/64
 3ba:	8e b5       	in	r24, 0x2e	; 46
 3bc:	83 60       	ori	r24, 0x03	; 3
 3be:	8e bd       	out	0x2e, r24	; 46

	for (;;) {
		if (TCNT1 >= 62496) {
 3c0:	8c b5       	in	r24, 0x2c	; 44
 3c2:	9d b5       	in	r25, 0x2d	; 45
 3c4:	80 32       	cpi	r24, 0x20	; 32
 3c6:	94 4f       	sbci	r25, 0xF4	; 244
 3c8:	d0 f0       	brcs	.+52     	; 0x3fe <timerStart+0x4c>
			TCNT1 = 0; // Reset timer
 3ca:	1d bc       	out	0x2d, r1	; 45
 3cc:	1c bc       	out	0x2c, r1	; 44
			seconden += 0.5; // Initialiseer 'seconden' ergens
 3ce:	20 e0       	ldi	r18, 0x00	; 0
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	40 e0       	ldi	r20, 0x00	; 0
 3d4:	5f e3       	ldi	r21, 0x3F	; 63
 3d6:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3da:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3de:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 3e2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 3e6:	37 d0       	rcall	.+110    	; 0x456 <__addsf3>
 3e8:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__DATA_REGION_ORIGIN__>
 3ec:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3f0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 3f4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
			writeLedDisplay(seconden);
 3f8:	96 d0       	rcall	.+300    	; 0x526 <__fixsfsi>
 3fa:	cb 01       	movw	r24, r22
 3fc:	9a de       	rcall	.-716    	; 0x132 <writeLedDisplay>
		}

		triggerPulse(); // Stuur trigger-puls
 3fe:	9f df       	rcall	.-194    	; 0x33e <triggerPulse>
 400:	a9 df       	rcall	.-174    	; 0x354 <measureDistance>

		uint16_t pulse_width = measureDistance(); // Meet echo-pulsbreedte
 402:	ec 01       	movw	r28, r24
 404:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>

		uint16_t distance = pulse_width/58; // Converteer pulsbreedte naar afstand in cm

		if (seconden==2){
 408:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 40c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 410:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 414:	20 e0       	ldi	r18, 0x00	; 0
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	40 e0       	ldi	r20, 0x00	; 0
 41a:	50 e4       	ldi	r21, 0x40	; 64
 41c:	80 d0       	rcall	.+256    	; 0x51e <__cmpsf2>
 41e:	81 11       	cpse	r24, r1
 420:	01 c0       	rjmp	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 422:	c3 df       	rcall	.-122    	; 0x3aa <ledOff>
			ledOff();
 424:	c4 34       	cpi	r28, 0x44	; 68
 426:	d2 40       	sbci	r29, 0x02	; 2
		}
		if (distance < 10) { // Drempelafstand
 428:	58 f4       	brcc	.+22     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 42a:	13 b8       	out	0x03, r1	; 3
 42c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
			PORTE = 0b00000000; // Zet LEDs uit
			seconden = 0; // Reset de teller
 430:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 434:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 438:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 43c:	b2 df       	rcall	.-156    	; 0x3a2 <ledOn>
			ledOn();
 43e:	c0 cf       	rjmp	.-128    	; 0x3c0 <timerStart+0xe>
 440:	8f ef       	ldi	r24, 0xFF	; 255
 442:	83 b9       	out	0x03, r24	; 3
			
			} else {
			PORTE = 0b11111111; // Zet LEDs aan
 444:	bd cf       	rjmp	.-134    	; 0x3c0 <timerStart+0xe>

00000446 <main>:
 446:	8a b3       	in	r24, 0x1a	; 26
 448:	81 60       	ori	r24, 0x01	; 1
	}
}

int main()
{
	DDRA |= (1 << LED_PIN);
 44a:	8a bb       	out	0x1a, r24	; 26
	// Initialiseer
	spi_masterInit();              	// Initialiseer spi-module
 44c:	30 de       	rcall	.-928    	; 0xae <spi_masterInit>
	displayDriverInit();            // Initialiseer display-chip
 44e:	64 de       	rcall	.-824    	; 0x118 <displayDriverInit>
	initUltrasonic();
 450:	6f df       	rcall	.-290    	; 0x330 <initUltrasonic>
 452:	af df       	rcall	.-162    	; 0x3b2 <timerStart>

00000454 <__subsf3>:
	timerStart();
 454:	50 58       	subi	r21, 0x80	; 128

00000456 <__addsf3>:
 456:	bb 27       	eor	r27, r27
 458:	aa 27       	eor	r26, r26
 45a:	0e d0       	rcall	.+28     	; 0x478 <__addsf3x>
 45c:	d0 c0       	rjmp	.+416    	; 0x5fe <__fp_round>
 45e:	c1 d0       	rcall	.+386    	; 0x5e2 <__fp_pscA>
 460:	30 f0       	brcs	.+12     	; 0x46e <__addsf3+0x18>
 462:	c6 d0       	rcall	.+396    	; 0x5f0 <__fp_pscB>
 464:	20 f0       	brcs	.+8      	; 0x46e <__addsf3+0x18>
 466:	31 f4       	brne	.+12     	; 0x474 <__addsf3+0x1e>
 468:	9f 3f       	cpi	r25, 0xFF	; 255
 46a:	11 f4       	brne	.+4      	; 0x470 <__addsf3+0x1a>
 46c:	1e f4       	brtc	.+6      	; 0x474 <__addsf3+0x1e>
 46e:	b6 c0       	rjmp	.+364    	; 0x5dc <__fp_nan>
 470:	0e f4       	brtc	.+2      	; 0x474 <__addsf3+0x1e>
 472:	e0 95       	com	r30
 474:	e7 fb       	bst	r30, 7
 476:	ac c0       	rjmp	.+344    	; 0x5d0 <__fp_inf>

00000478 <__addsf3x>:
 478:	e9 2f       	mov	r30, r25
 47a:	d2 d0       	rcall	.+420    	; 0x620 <__fp_split3>
 47c:	80 f3       	brcs	.-32     	; 0x45e <__addsf3+0x8>
 47e:	ba 17       	cp	r27, r26
 480:	62 07       	cpc	r22, r18
 482:	73 07       	cpc	r23, r19
 484:	84 07       	cpc	r24, r20
 486:	95 07       	cpc	r25, r21
 488:	18 f0       	brcs	.+6      	; 0x490 <__addsf3x+0x18>
 48a:	71 f4       	brne	.+28     	; 0x4a8 <__addsf3x+0x30>
 48c:	9e f5       	brtc	.+102    	; 0x4f4 <__addsf3x+0x7c>
 48e:	ea c0       	rjmp	.+468    	; 0x664 <__fp_zero>
 490:	0e f4       	brtc	.+2      	; 0x494 <__addsf3x+0x1c>
 492:	e0 95       	com	r30
 494:	0b 2e       	mov	r0, r27
 496:	ba 2f       	mov	r27, r26
 498:	a0 2d       	mov	r26, r0
 49a:	0b 01       	movw	r0, r22
 49c:	b9 01       	movw	r22, r18
 49e:	90 01       	movw	r18, r0
 4a0:	0c 01       	movw	r0, r24
 4a2:	ca 01       	movw	r24, r20
 4a4:	a0 01       	movw	r20, r0
 4a6:	11 24       	eor	r1, r1
 4a8:	ff 27       	eor	r31, r31
 4aa:	59 1b       	sub	r21, r25
 4ac:	99 f0       	breq	.+38     	; 0x4d4 <__addsf3x+0x5c>
 4ae:	59 3f       	cpi	r21, 0xF9	; 249
 4b0:	50 f4       	brcc	.+20     	; 0x4c6 <__addsf3x+0x4e>
 4b2:	50 3e       	cpi	r21, 0xE0	; 224
 4b4:	68 f1       	brcs	.+90     	; 0x510 <__addsf3x+0x98>
 4b6:	1a 16       	cp	r1, r26
 4b8:	f0 40       	sbci	r31, 0x00	; 0
 4ba:	a2 2f       	mov	r26, r18
 4bc:	23 2f       	mov	r18, r19
 4be:	34 2f       	mov	r19, r20
 4c0:	44 27       	eor	r20, r20
 4c2:	58 5f       	subi	r21, 0xF8	; 248
 4c4:	f3 cf       	rjmp	.-26     	; 0x4ac <__addsf3x+0x34>
 4c6:	46 95       	lsr	r20
 4c8:	37 95       	ror	r19
 4ca:	27 95       	ror	r18
 4cc:	a7 95       	ror	r26
 4ce:	f0 40       	sbci	r31, 0x00	; 0
 4d0:	53 95       	inc	r21
 4d2:	c9 f7       	brne	.-14     	; 0x4c6 <__addsf3x+0x4e>
 4d4:	7e f4       	brtc	.+30     	; 0x4f4 <__addsf3x+0x7c>
 4d6:	1f 16       	cp	r1, r31
 4d8:	ba 0b       	sbc	r27, r26
 4da:	62 0b       	sbc	r22, r18
 4dc:	73 0b       	sbc	r23, r19
 4de:	84 0b       	sbc	r24, r20
 4e0:	ba f0       	brmi	.+46     	; 0x510 <__addsf3x+0x98>
 4e2:	91 50       	subi	r25, 0x01	; 1
 4e4:	a1 f0       	breq	.+40     	; 0x50e <__addsf3x+0x96>
 4e6:	ff 0f       	add	r31, r31
 4e8:	bb 1f       	adc	r27, r27
 4ea:	66 1f       	adc	r22, r22
 4ec:	77 1f       	adc	r23, r23
 4ee:	88 1f       	adc	r24, r24
 4f0:	c2 f7       	brpl	.-16     	; 0x4e2 <__addsf3x+0x6a>
 4f2:	0e c0       	rjmp	.+28     	; 0x510 <__addsf3x+0x98>
 4f4:	ba 0f       	add	r27, r26
 4f6:	62 1f       	adc	r22, r18
 4f8:	73 1f       	adc	r23, r19
 4fa:	84 1f       	adc	r24, r20
 4fc:	48 f4       	brcc	.+18     	; 0x510 <__addsf3x+0x98>
 4fe:	87 95       	ror	r24
 500:	77 95       	ror	r23
 502:	67 95       	ror	r22
 504:	b7 95       	ror	r27
 506:	f7 95       	ror	r31
 508:	9e 3f       	cpi	r25, 0xFE	; 254
 50a:	08 f0       	brcs	.+2      	; 0x50e <__addsf3x+0x96>
 50c:	b3 cf       	rjmp	.-154    	; 0x474 <__addsf3+0x1e>
 50e:	93 95       	inc	r25
 510:	88 0f       	add	r24, r24
 512:	08 f0       	brcs	.+2      	; 0x516 <__addsf3x+0x9e>
 514:	99 27       	eor	r25, r25
 516:	ee 0f       	add	r30, r30
 518:	97 95       	ror	r25
 51a:	87 95       	ror	r24
 51c:	08 95       	ret

0000051e <__cmpsf2>:
 51e:	34 d0       	rcall	.+104    	; 0x588 <__fp_cmp>
 520:	08 f4       	brcc	.+2      	; 0x524 <__cmpsf2+0x6>
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	08 95       	ret

00000526 <__fixsfsi>:
 526:	04 d0       	rcall	.+8      	; 0x530 <__fixunssfsi>
 528:	68 94       	set
 52a:	b1 11       	cpse	r27, r1
 52c:	9c c0       	rjmp	.+312    	; 0x666 <__fp_szero>
 52e:	08 95       	ret

00000530 <__fixunssfsi>:
 530:	7f d0       	rcall	.+254    	; 0x630 <__fp_splitA>
 532:	88 f0       	brcs	.+34     	; 0x556 <__fixunssfsi+0x26>
 534:	9f 57       	subi	r25, 0x7F	; 127
 536:	90 f0       	brcs	.+36     	; 0x55c <__fixunssfsi+0x2c>
 538:	b9 2f       	mov	r27, r25
 53a:	99 27       	eor	r25, r25
 53c:	b7 51       	subi	r27, 0x17	; 23
 53e:	a0 f0       	brcs	.+40     	; 0x568 <__fixunssfsi+0x38>
 540:	d1 f0       	breq	.+52     	; 0x576 <__fixunssfsi+0x46>
 542:	66 0f       	add	r22, r22
 544:	77 1f       	adc	r23, r23
 546:	88 1f       	adc	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	1a f0       	brmi	.+6      	; 0x552 <__fixunssfsi+0x22>
 54c:	ba 95       	dec	r27
 54e:	c9 f7       	brne	.-14     	; 0x542 <__fixunssfsi+0x12>
 550:	12 c0       	rjmp	.+36     	; 0x576 <__fixunssfsi+0x46>
 552:	b1 30       	cpi	r27, 0x01	; 1
 554:	81 f0       	breq	.+32     	; 0x576 <__fixunssfsi+0x46>
 556:	86 d0       	rcall	.+268    	; 0x664 <__fp_zero>
 558:	b1 e0       	ldi	r27, 0x01	; 1
 55a:	08 95       	ret
 55c:	83 c0       	rjmp	.+262    	; 0x664 <__fp_zero>
 55e:	67 2f       	mov	r22, r23
 560:	78 2f       	mov	r23, r24
 562:	88 27       	eor	r24, r24
 564:	b8 5f       	subi	r27, 0xF8	; 248
 566:	39 f0       	breq	.+14     	; 0x576 <__fixunssfsi+0x46>
 568:	b9 3f       	cpi	r27, 0xF9	; 249
 56a:	cc f3       	brlt	.-14     	; 0x55e <__fixunssfsi+0x2e>
 56c:	86 95       	lsr	r24
 56e:	77 95       	ror	r23
 570:	67 95       	ror	r22
 572:	b3 95       	inc	r27
 574:	d9 f7       	brne	.-10     	; 0x56c <__fixunssfsi+0x3c>
 576:	3e f4       	brtc	.+14     	; 0x586 <__fixunssfsi+0x56>
 578:	90 95       	com	r25
 57a:	80 95       	com	r24
 57c:	70 95       	com	r23
 57e:	61 95       	neg	r22
 580:	7f 4f       	sbci	r23, 0xFF	; 255
 582:	8f 4f       	sbci	r24, 0xFF	; 255
 584:	9f 4f       	sbci	r25, 0xFF	; 255
 586:	08 95       	ret

00000588 <__fp_cmp>:
 588:	99 0f       	add	r25, r25
 58a:	00 08       	sbc	r0, r0
 58c:	55 0f       	add	r21, r21
 58e:	aa 0b       	sbc	r26, r26
 590:	e0 e8       	ldi	r30, 0x80	; 128
 592:	fe ef       	ldi	r31, 0xFE	; 254
 594:	16 16       	cp	r1, r22
 596:	17 06       	cpc	r1, r23
 598:	e8 07       	cpc	r30, r24
 59a:	f9 07       	cpc	r31, r25
 59c:	c0 f0       	brcs	.+48     	; 0x5ce <__fp_cmp+0x46>
 59e:	12 16       	cp	r1, r18
 5a0:	13 06       	cpc	r1, r19
 5a2:	e4 07       	cpc	r30, r20
 5a4:	f5 07       	cpc	r31, r21
 5a6:	98 f0       	brcs	.+38     	; 0x5ce <__fp_cmp+0x46>
 5a8:	62 1b       	sub	r22, r18
 5aa:	73 0b       	sbc	r23, r19
 5ac:	84 0b       	sbc	r24, r20
 5ae:	95 0b       	sbc	r25, r21
 5b0:	39 f4       	brne	.+14     	; 0x5c0 <__fp_cmp+0x38>
 5b2:	0a 26       	eor	r0, r26
 5b4:	61 f0       	breq	.+24     	; 0x5ce <__fp_cmp+0x46>
 5b6:	23 2b       	or	r18, r19
 5b8:	24 2b       	or	r18, r20
 5ba:	25 2b       	or	r18, r21
 5bc:	21 f4       	brne	.+8      	; 0x5c6 <__fp_cmp+0x3e>
 5be:	08 95       	ret
 5c0:	0a 26       	eor	r0, r26
 5c2:	09 f4       	brne	.+2      	; 0x5c6 <__fp_cmp+0x3e>
 5c4:	a1 40       	sbci	r26, 0x01	; 1
 5c6:	a6 95       	lsr	r26
 5c8:	8f ef       	ldi	r24, 0xFF	; 255
 5ca:	81 1d       	adc	r24, r1
 5cc:	81 1d       	adc	r24, r1
 5ce:	08 95       	ret

000005d0 <__fp_inf>:
 5d0:	97 f9       	bld	r25, 7
 5d2:	9f 67       	ori	r25, 0x7F	; 127
 5d4:	80 e8       	ldi	r24, 0x80	; 128
 5d6:	70 e0       	ldi	r23, 0x00	; 0
 5d8:	60 e0       	ldi	r22, 0x00	; 0
 5da:	08 95       	ret

000005dc <__fp_nan>:
 5dc:	9f ef       	ldi	r25, 0xFF	; 255
 5de:	80 ec       	ldi	r24, 0xC0	; 192
 5e0:	08 95       	ret

000005e2 <__fp_pscA>:
 5e2:	00 24       	eor	r0, r0
 5e4:	0a 94       	dec	r0
 5e6:	16 16       	cp	r1, r22
 5e8:	17 06       	cpc	r1, r23
 5ea:	18 06       	cpc	r1, r24
 5ec:	09 06       	cpc	r0, r25
 5ee:	08 95       	ret

000005f0 <__fp_pscB>:
 5f0:	00 24       	eor	r0, r0
 5f2:	0a 94       	dec	r0
 5f4:	12 16       	cp	r1, r18
 5f6:	13 06       	cpc	r1, r19
 5f8:	14 06       	cpc	r1, r20
 5fa:	05 06       	cpc	r0, r21
 5fc:	08 95       	ret

000005fe <__fp_round>:
 5fe:	09 2e       	mov	r0, r25
 600:	03 94       	inc	r0
 602:	00 0c       	add	r0, r0
 604:	11 f4       	brne	.+4      	; 0x60a <__fp_round+0xc>
 606:	88 23       	and	r24, r24
 608:	52 f0       	brmi	.+20     	; 0x61e <__fp_round+0x20>
 60a:	bb 0f       	add	r27, r27
 60c:	40 f4       	brcc	.+16     	; 0x61e <__fp_round+0x20>
 60e:	bf 2b       	or	r27, r31
 610:	11 f4       	brne	.+4      	; 0x616 <__fp_round+0x18>
 612:	60 ff       	sbrs	r22, 0
 614:	04 c0       	rjmp	.+8      	; 0x61e <__fp_round+0x20>
 616:	6f 5f       	subi	r22, 0xFF	; 255
 618:	7f 4f       	sbci	r23, 0xFF	; 255
 61a:	8f 4f       	sbci	r24, 0xFF	; 255
 61c:	9f 4f       	sbci	r25, 0xFF	; 255
 61e:	08 95       	ret

00000620 <__fp_split3>:
 620:	57 fd       	sbrc	r21, 7
 622:	90 58       	subi	r25, 0x80	; 128
 624:	44 0f       	add	r20, r20
 626:	55 1f       	adc	r21, r21
 628:	59 f0       	breq	.+22     	; 0x640 <__fp_splitA+0x10>
 62a:	5f 3f       	cpi	r21, 0xFF	; 255
 62c:	71 f0       	breq	.+28     	; 0x64a <__fp_splitA+0x1a>
 62e:	47 95       	ror	r20

00000630 <__fp_splitA>:
 630:	88 0f       	add	r24, r24
 632:	97 fb       	bst	r25, 7
 634:	99 1f       	adc	r25, r25
 636:	61 f0       	breq	.+24     	; 0x650 <__fp_splitA+0x20>
 638:	9f 3f       	cpi	r25, 0xFF	; 255
 63a:	79 f0       	breq	.+30     	; 0x65a <__fp_splitA+0x2a>
 63c:	87 95       	ror	r24
 63e:	08 95       	ret
 640:	12 16       	cp	r1, r18
 642:	13 06       	cpc	r1, r19
 644:	14 06       	cpc	r1, r20
 646:	55 1f       	adc	r21, r21
 648:	f2 cf       	rjmp	.-28     	; 0x62e <__fp_split3+0xe>
 64a:	46 95       	lsr	r20
 64c:	f1 df       	rcall	.-30     	; 0x630 <__fp_splitA>
 64e:	08 c0       	rjmp	.+16     	; 0x660 <__fp_splitA+0x30>
 650:	16 16       	cp	r1, r22
 652:	17 06       	cpc	r1, r23
 654:	18 06       	cpc	r1, r24
 656:	99 1f       	adc	r25, r25
 658:	f1 cf       	rjmp	.-30     	; 0x63c <__fp_splitA+0xc>
 65a:	86 95       	lsr	r24
 65c:	71 05       	cpc	r23, r1
 65e:	61 05       	cpc	r22, r1
 660:	08 94       	sec
 662:	08 95       	ret

00000664 <__fp_zero>:
 664:	e8 94       	clt

00000666 <__fp_szero>:
 666:	bb 27       	eor	r27, r27
 668:	66 27       	eor	r22, r22
 66a:	77 27       	eor	r23, r23
 66c:	cb 01       	movw	r24, r22
 66e:	97 f9       	bld	r25, 7
 670:	08 95       	ret

00000672 <__divmodhi4>:
 672:	97 fb       	bst	r25, 7
 674:	07 2e       	mov	r0, r23
 676:	16 f4       	brtc	.+4      	; 0x67c <__divmodhi4+0xa>
 678:	00 94       	com	r0
 67a:	06 d0       	rcall	.+12     	; 0x688 <__divmodhi4_neg1>
 67c:	77 fd       	sbrc	r23, 7
 67e:	08 d0       	rcall	.+16     	; 0x690 <__divmodhi4_neg2>
 680:	0b d0       	rcall	.+22     	; 0x698 <__udivmodhi4>
 682:	07 fc       	sbrc	r0, 7
 684:	05 d0       	rcall	.+10     	; 0x690 <__divmodhi4_neg2>
 686:	3e f4       	brtc	.+14     	; 0x696 <__divmodhi4_exit>

00000688 <__divmodhi4_neg1>:
 688:	90 95       	com	r25
 68a:	81 95       	neg	r24
 68c:	9f 4f       	sbci	r25, 0xFF	; 255
 68e:	08 95       	ret

00000690 <__divmodhi4_neg2>:
 690:	70 95       	com	r23
 692:	61 95       	neg	r22
 694:	7f 4f       	sbci	r23, 0xFF	; 255

00000696 <__divmodhi4_exit>:
 696:	08 95       	ret

00000698 <__udivmodhi4>:
 698:	aa 1b       	sub	r26, r26
 69a:	bb 1b       	sub	r27, r27
 69c:	51 e1       	ldi	r21, 0x11	; 17
 69e:	07 c0       	rjmp	.+14     	; 0x6ae <__udivmodhi4_ep>

000006a0 <__udivmodhi4_loop>:
 6a0:	aa 1f       	adc	r26, r26
 6a2:	bb 1f       	adc	r27, r27
 6a4:	a6 17       	cp	r26, r22
 6a6:	b7 07       	cpc	r27, r23
 6a8:	10 f0       	brcs	.+4      	; 0x6ae <__udivmodhi4_ep>
 6aa:	a6 1b       	sub	r26, r22
 6ac:	b7 0b       	sbc	r27, r23

000006ae <__udivmodhi4_ep>:
 6ae:	88 1f       	adc	r24, r24
 6b0:	99 1f       	adc	r25, r25
 6b2:	5a 95       	dec	r21
 6b4:	a9 f7       	brne	.-22     	; 0x6a0 <__udivmodhi4_loop>
 6b6:	80 95       	com	r24
 6b8:	90 95       	com	r25
 6ba:	bc 01       	movw	r22, r24
 6bc:	cd 01       	movw	r24, r26
 6be:	08 95       	ret

000006c0 <_exit>:
 6c0:	f8 94       	cli

000006c2 <__stop_program>:
 6c2:	ff cf       	rjmp	.-2      	; 0x6c2 <__stop_program>
