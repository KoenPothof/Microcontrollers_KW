
Eindopdracht.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000058a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000005de  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000610  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000db0  00000000  00000000  000006c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008dd  00000000  00000000  00001474  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000059c  00000000  00000000  00001d51  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000fc  00000000  00000000  000022f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000510  00000000  00000000  000023ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000715  00000000  00000000  000028fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00003011  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	43 d1       	rcall	.+646    	; 0x320 <main>
  9a:	75 c2       	rjmp	.+1258   	; 0x586 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <spi_masterInit>:
}

// Set display off ('shut down')
void displayOff()
{
	spi_writeWord(0x0C, 0x00); // Afsluiten -> 1 = normaal
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	87 bb       	out	0x17, r24	; 23
  a2:	87 b3       	in	r24, 0x17	; 23
  a4:	87 7f       	andi	r24, 0xF7	; 247
  a6:	87 bb       	out	0x17, r24	; 23
  a8:	88 b3       	in	r24, 0x18	; 24
  aa:	81 60       	ori	r24, 0x01	; 1
  ac:	88 bb       	out	0x18, r24	; 24
  ae:	82 e5       	ldi	r24, 0x52	; 82
  b0:	8d b9       	out	0x0d, r24	; 13
  b2:	08 95       	ret

000000b4 <spi_write>:
  b4:	8f b9       	out	0x0f, r24	; 15
  b6:	77 9b       	sbis	0x0e, 7	; 14
  b8:	fe cf       	rjmp	.-4      	; 0xb6 <spi_write+0x2>
  ba:	08 95       	ret

000000bc <spi_slaveSelect>:
  bc:	98 b3       	in	r25, 0x18	; 24
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <spi_slaveSelect+0xc>
  c4:	22 0f       	add	r18, r18
  c6:	33 1f       	adc	r19, r19
  c8:	8a 95       	dec	r24
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <spi_slaveSelect+0x8>
  cc:	20 95       	com	r18
  ce:	29 23       	and	r18, r25
  d0:	28 bb       	out	0x18, r18	; 24
  d2:	08 95       	ret

000000d4 <spi_slaveDeSelect>:
  d4:	98 b3       	in	r25, 0x18	; 24
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <spi_slaveDeSelect+0xc>
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	8a 95       	dec	r24
  e2:	e2 f7       	brpl	.-8      	; 0xdc <spi_slaveDeSelect+0x8>
  e4:	29 2b       	or	r18, r25
  e6:	28 bb       	out	0x18, r18	; 24
  e8:	08 95       	ret

000000ea <spi_writeWord>:
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	d8 2f       	mov	r29, r24
  f0:	c6 2f       	mov	r28, r22
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	e3 df       	rcall	.-58     	; 0xbc <spi_slaveSelect>
  f6:	8d 2f       	mov	r24, r29
  f8:	dd df       	rcall	.-70     	; 0xb4 <spi_write>
  fa:	8c 2f       	mov	r24, r28
  fc:	db df       	rcall	.-74     	; 0xb4 <spi_write>
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	e9 df       	rcall	.-46     	; 0xd4 <spi_slaveDeSelect>
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <displayDriverInit>:
 108:	6f ef       	ldi	r22, 0xFF	; 255
 10a:	89 e0       	ldi	r24, 0x09	; 9
 10c:	ee df       	rcall	.-36     	; 0xea <spi_writeWord>
 10e:	6f e0       	ldi	r22, 0x0F	; 15
 110:	8a e0       	ldi	r24, 0x0A	; 10
 112:	eb df       	rcall	.-42     	; 0xea <spi_writeWord>
 114:	6f e0       	ldi	r22, 0x0F	; 15
 116:	8b e0       	ldi	r24, 0x0B	; 11
 118:	e8 df       	rcall	.-48     	; 0xea <spi_writeWord>
 11a:	61 e0       	ldi	r22, 0x01	; 1
 11c:	8c e0       	ldi	r24, 0x0C	; 12
 11e:	e5 cf       	rjmp	.-54     	; 0xea <spi_writeWord>
 120:	08 95       	ret

00000122 <writeLedDisplay>:
}

void writeLedDisplay(int value){
 122:	ff 92       	push	r15
 124:	0f 93       	push	r16
 126:	1f 93       	push	r17
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	9c 01       	movw	r18, r24
	int digit3 = -1;
	char digit4 = -1;
	
	
	// aan de hand van de value worden de cijfers gesplitst in de digits, bij negatieve value worden de cijfers een digit opgeschoven en komt er een min-teken voor
	if (value < 10 && value >= 0){
 12e:	8a 30       	cpi	r24, 0x0A	; 10
 130:	91 05       	cpc	r25, r1
 132:	40 f4       	brcc	.+16     	; 0x144 <writeLedDisplay+0x22>
		digit4 = value;
 134:	f8 2e       	mov	r15, r24
void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
	int digit2 = -1;
	int digit3 = -1;
 136:	cf ef       	ldi	r28, 0xFF	; 255
 138:	df ef       	ldi	r29, 0xFF	; 255

void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
	int digit2 = -1;
 13a:	0f ef       	ldi	r16, 0xFF	; 255
 13c:	1f ef       	ldi	r17, 0xFF	; 255
}

void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
 13e:	6f ef       	ldi	r22, 0xFF	; 255
 140:	7f ef       	ldi	r23, 0xFF	; 255
 142:	9b c0       	rjmp	.+310    	; 0x27a <writeLedDisplay+0x158>
	
	
	// aan de hand van de value worden de cijfers gesplitst in de digits, bij negatieve value worden de cijfers een digit opgeschoven en komt er een min-teken voor
	if (value < 10 && value >= 0){
		digit4 = value;
		} else if (value >= 10 && value < 100){
 144:	0a 97       	sbiw	r24, 0x0a	; 10
 146:	8a 35       	cpi	r24, 0x5A	; 90
 148:	91 05       	cpc	r25, r1
 14a:	60 f4       	brcc	.+24     	; 0x164 <writeLedDisplay+0x42>
		digit4 = value / 10;
 14c:	c9 01       	movw	r24, r18
 14e:	6a e0       	ldi	r22, 0x0A	; 10
 150:	70 e0       	ldi	r23, 0x00	; 0
 152:	f2 d1       	rcall	.+996    	; 0x538 <__divmodhi4>
 154:	f6 2e       	mov	r15, r22
		digit3 = value % 10;
 156:	c8 2f       	mov	r28, r24
 158:	d9 2f       	mov	r29, r25

void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
	int digit2 = -1;
 15a:	0f ef       	ldi	r16, 0xFF	; 255
 15c:	1f ef       	ldi	r17, 0xFF	; 255
}

void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
 15e:	6f ef       	ldi	r22, 0xFF	; 255
 160:	7f ef       	ldi	r23, 0xFF	; 255
 162:	8b c0       	rjmp	.+278    	; 0x27a <writeLedDisplay+0x158>
	if (value < 10 && value >= 0){
		digit4 = value;
		} else if (value >= 10 && value < 100){
		digit4 = value / 10;
		digit3 = value % 10;
		} else if (value >= 100 && value < 1000){
 164:	c9 01       	movw	r24, r18
 166:	84 56       	subi	r24, 0x64	; 100
 168:	91 09       	sbc	r25, r1
 16a:	84 38       	cpi	r24, 0x84	; 132
 16c:	93 40       	sbci	r25, 0x03	; 3
 16e:	a8 f4       	brcc	.+42     	; 0x19a <writeLedDisplay+0x78>
		digit4 = value / 100;
 170:	c9 01       	movw	r24, r18
 172:	64 e6       	ldi	r22, 0x64	; 100
 174:	70 e0       	ldi	r23, 0x00	; 0
 176:	e0 d1       	rcall	.+960    	; 0x538 <__divmodhi4>
 178:	f6 2e       	mov	r15, r22
		digit3 = (value / 10) % 10;
 17a:	ea e0       	ldi	r30, 0x0A	; 10
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	c9 01       	movw	r24, r18
 180:	bf 01       	movw	r22, r30
 182:	da d1       	rcall	.+948    	; 0x538 <__divmodhi4>
 184:	38 2f       	mov	r19, r24
 186:	29 2f       	mov	r18, r25
 188:	cb 01       	movw	r24, r22
 18a:	bf 01       	movw	r22, r30
 18c:	d5 d1       	rcall	.+938    	; 0x538 <__divmodhi4>
 18e:	ec 01       	movw	r28, r24
		digit2 = value % 10;
 190:	03 2f       	mov	r16, r19
 192:	12 2f       	mov	r17, r18
}

void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
 194:	6f ef       	ldi	r22, 0xFF	; 255
 196:	7f ef       	ldi	r23, 0xFF	; 255
 198:	70 c0       	rjmp	.+224    	; 0x27a <writeLedDisplay+0x158>
		digit3 = value % 10;
		} else if (value >= 100 && value < 1000){
		digit4 = value / 100;
		digit3 = (value / 10) % 10;
		digit2 = value % 10;
		} else if (value >= 1000 && value < 10000){
 19a:	c9 01       	movw	r24, r18
 19c:	88 5e       	subi	r24, 0xE8	; 232
 19e:	93 40       	sbci	r25, 0x03	; 3
 1a0:	88 32       	cpi	r24, 0x28	; 40
 1a2:	93 42       	sbci	r25, 0x23	; 35
		digit4 = value / 1000;
 1a4:	d8 f4       	brcc	.+54     	; 0x1dc <writeLedDisplay+0xba>
 1a6:	c9 01       	movw	r24, r18
 1a8:	68 ee       	ldi	r22, 0xE8	; 232
 1aa:	73 e0       	ldi	r23, 0x03	; 3
 1ac:	c5 d1       	rcall	.+906    	; 0x538 <__divmodhi4>
		digit3 = (value / 100) % 10;
 1ae:	f6 2e       	mov	r15, r22
 1b0:	c9 01       	movw	r24, r18
 1b2:	64 e6       	ldi	r22, 0x64	; 100
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	c0 d1       	rcall	.+896    	; 0x538 <__divmodhi4>
 1b8:	cb 01       	movw	r24, r22
 1ba:	ea e0       	ldi	r30, 0x0A	; 10
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	bf 01       	movw	r22, r30
 1c0:	bb d1       	rcall	.+886    	; 0x538 <__divmodhi4>
		digit2 = (value / 10) % 10;
 1c2:	ec 01       	movw	r28, r24
 1c4:	c9 01       	movw	r24, r18
 1c6:	bf 01       	movw	r22, r30
 1c8:	b7 d1       	rcall	.+878    	; 0x538 <__divmodhi4>
 1ca:	38 2f       	mov	r19, r24
 1cc:	29 2f       	mov	r18, r25
 1ce:	cb 01       	movw	r24, r22
 1d0:	bf 01       	movw	r22, r30
 1d2:	b2 d1       	rcall	.+868    	; 0x538 <__divmodhi4>
 1d4:	8c 01       	movw	r16, r24
		digit1 = value % 10;
 1d6:	63 2f       	mov	r22, r19
 1d8:	72 2f       	mov	r23, r18
 1da:	4f c0       	rjmp	.+158    	; 0x27a <writeLedDisplay+0x158>
		}  else if (value < 0 && value > -10){
 1dc:	c9 01       	movw	r24, r18
 1de:	09 96       	adiw	r24, 0x09	; 9
 1e0:	09 97       	sbiw	r24, 0x09	; 9
 1e2:	68 f4       	brcc	.+26     	; 0x1fe <writeLedDisplay+0xdc>
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
		value = (value * -1);
 1e4:	cc 27       	eor	r28, r28
 1e6:	dd 27       	eor	r29, r29
 1e8:	c2 1b       	sub	r28, r18
 1ea:	d3 0b       	sbc	r29, r19
		digit4 = value / 1000;
		digit3 = (value / 100) % 10;
		digit2 = (value / 10) % 10;
		digit1 = value % 10;
		}  else if (value < 0 && value > -10){
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
 1ec:	0f 2e       	mov	r0, r31
 1ee:	ff e0       	ldi	r31, 0x0F	; 15
 1f0:	ff 2e       	mov	r15, r31
 1f2:	f0 2d       	mov	r31, r0

void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
	int digit2 = -1;
 1f4:	0f ef       	ldi	r16, 0xFF	; 255
 1f6:	1f ef       	ldi	r17, 0xFF	; 255
}

void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
 1f8:	6f ef       	ldi	r22, 0xFF	; 255
 1fa:	7f ef       	ldi	r23, 0xFF	; 255
 1fc:	3e c0       	rjmp	.+124    	; 0x27a <writeLedDisplay+0x158>
		digit1 = value % 10;
		}  else if (value < 0 && value > -10){
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
		value = (value * -1);
		digit3 = value;
		} else if (value <= -10 && value > -100){
 1fe:	c9 01       	movw	r24, r18
 200:	8d 59       	subi	r24, 0x9D	; 157
 202:	9f 4f       	sbci	r25, 0xFF	; 255
 204:	8a 35       	cpi	r24, 0x5A	; 90
 206:	91 05       	cpc	r25, r1
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
		value = (value * -1);
 208:	80 f4       	brcc	.+32     	; 0x22a <writeLedDisplay+0x108>
 20a:	88 27       	eor	r24, r24
 20c:	99 27       	eor	r25, r25
 20e:	82 1b       	sub	r24, r18
		digit3 = value / 10;
		digit2 = value % 10;
 210:	93 0b       	sbc	r25, r19
 212:	6a e0       	ldi	r22, 0x0A	; 10
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	90 d1       	rcall	.+800    	; 0x538 <__divmodhi4>
 218:	eb 01       	movw	r28, r22
 21a:	8c 01       	movw	r16, r24
		}  else if (value < 0 && value > -10){
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
		value = (value * -1);
		digit3 = value;
		} else if (value <= -10 && value > -100){
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
 21c:	0f 2e       	mov	r0, r31
 21e:	ff e0       	ldi	r31, 0x0F	; 15
 220:	ff 2e       	mov	r15, r31
 222:	f0 2d       	mov	r31, r0
}

void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
 224:	6f ef       	ldi	r22, 0xFF	; 255
 226:	7f ef       	ldi	r23, 0xFF	; 255
 228:	28 c0       	rjmp	.+80     	; 0x27a <writeLedDisplay+0x158>
		} else if (value <= -10 && value > -100){
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
		value = (value * -1);
		digit3 = value / 10;
		digit2 = value % 10;
		} else if (value <= -100 && value > -1000){
 22a:	c9 01       	movw	r24, r18
 22c:	89 51       	subi	r24, 0x19	; 25
 22e:	9c 4f       	sbci	r25, 0xFC	; 252
 230:	84 38       	cpi	r24, 0x84	; 132
 232:	93 40       	sbci	r25, 0x03	; 3
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
		value = (value * -1);
 234:	d0 f4       	brcc	.+52     	; 0x26a <writeLedDisplay+0x148>
 236:	31 95       	neg	r19
		digit3 = value / 100;
 238:	21 95       	neg	r18
 23a:	31 09       	sbc	r19, r1
 23c:	c9 01       	movw	r24, r18
 23e:	64 e6       	ldi	r22, 0x64	; 100
 240:	70 e0       	ldi	r23, 0x00	; 0
		digit2 = (value / 10) % 10;
 242:	7a d1       	rcall	.+756    	; 0x538 <__divmodhi4>
 244:	eb 01       	movw	r28, r22
 246:	ea e0       	ldi	r30, 0x0A	; 10
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	c9 01       	movw	r24, r18
 24c:	bf 01       	movw	r22, r30
 24e:	74 d1       	rcall	.+744    	; 0x538 <__divmodhi4>
 250:	38 2f       	mov	r19, r24
 252:	29 2f       	mov	r18, r25
 254:	cb 01       	movw	r24, r22
 256:	bf 01       	movw	r22, r30
 258:	6f d1       	rcall	.+734    	; 0x538 <__divmodhi4>
 25a:	8c 01       	movw	r16, r24
		digit1 = value % 10;
 25c:	63 2f       	mov	r22, r19
 25e:	72 2f       	mov	r23, r18
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
		value = (value * -1);
		digit3 = value / 10;
		digit2 = value % 10;
		} else if (value <= -100 && value > -1000){
		digit4 = 0x0F; // hier moet eigenlijk een - teken staan
 260:	0f 2e       	mov	r0, r31
 262:	ff e0       	ldi	r31, 0x0F	; 15
 264:	ff 2e       	mov	r15, r31
 266:	f0 2d       	mov	r31, r0
 268:	08 c0       	rjmp	.+16     	; 0x27a <writeLedDisplay+0x158>
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
	int digit2 = -1;
	int digit3 = -1;
	char digit4 = -1;
 26a:	ff 24       	eor	r15, r15
void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
	int digit2 = -1;
	int digit3 = -1;
 26c:	fa 94       	dec	r15
 26e:	cf ef       	ldi	r28, 0xFF	; 255

void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
	int digit2 = -1;
 270:	df ef       	ldi	r29, 0xFF	; 255
 272:	0f ef       	ldi	r16, 0xFF	; 255
}

void writeLedDisplay(int value){
	
	// alle digits op -1 zodat je straks kan kijken of deze veranderd worden
	int digit1 = -1;
 274:	1f ef       	ldi	r17, 0xFF	; 255
 276:	6f ef       	ldi	r22, 0xFF	; 255
		digit2 = (value / 10) % 10;
		digit1 = value % 10;
	}
	
	// check of de digits zijn veranderd en print ze dan
	if (digit1 != -1){
 278:	7f ef       	ldi	r23, 0xFF	; 255
 27a:	6f 3f       	cpi	r22, 0xFF	; 255
 27c:	8f ef       	ldi	r24, 0xFF	; 255
		spi_writeWord(1, digit1);
 27e:	78 07       	cpc	r23, r24
 280:	49 f0       	breq	.+18     	; 0x294 <writeLedDisplay+0x172>
 282:	81 e0       	ldi	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 284:	32 df       	rcall	.-412    	; 0xea <spi_writeWord>
 286:	8f e1       	ldi	r24, 0x1F	; 31
 288:	9e e4       	ldi	r25, 0x4E	; 78
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <writeLedDisplay+0x168>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <writeLedDisplay+0x16e>
 290:	00 00       	nop
		_delay_ms(10);
		} else {
		spi_writeWord(1, 0x0F);
 292:	09 c0       	rjmp	.+18     	; 0x2a6 <writeLedDisplay+0x184>
 294:	6f e0       	ldi	r22, 0x0F	; 15
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	28 df       	rcall	.-432    	; 0xea <spi_writeWord>
 29a:	8f e1       	ldi	r24, 0x1F	; 31
 29c:	9e e4       	ldi	r25, 0x4E	; 78
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <writeLedDisplay+0x17c>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <writeLedDisplay+0x182>
		_delay_ms(10);
	}
	if (digit2 != -1){
 2a4:	00 00       	nop
 2a6:	0f 3f       	cpi	r16, 0xFF	; 255
 2a8:	9f ef       	ldi	r25, 0xFF	; 255
		spi_writeWord(2, digit2);
 2aa:	19 07       	cpc	r17, r25
 2ac:	51 f0       	breq	.+20     	; 0x2c2 <writeLedDisplay+0x1a0>
 2ae:	60 2f       	mov	r22, r16
 2b0:	82 e0       	ldi	r24, 0x02	; 2
 2b2:	1b df       	rcall	.-458    	; 0xea <spi_writeWord>
 2b4:	8f e1       	ldi	r24, 0x1F	; 31
 2b6:	9e e4       	ldi	r25, 0x4E	; 78
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <writeLedDisplay+0x196>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <writeLedDisplay+0x19c>
		_delay_ms(10);
		} else {
		spi_writeWord(2, 0x0F);
 2be:	00 00       	nop
 2c0:	09 c0       	rjmp	.+18     	; 0x2d4 <writeLedDisplay+0x1b2>
 2c2:	6f e0       	ldi	r22, 0x0F	; 15
 2c4:	82 e0       	ldi	r24, 0x02	; 2
 2c6:	11 df       	rcall	.-478    	; 0xea <spi_writeWord>
 2c8:	8f e1       	ldi	r24, 0x1F	; 31
 2ca:	9e e4       	ldi	r25, 0x4E	; 78
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <writeLedDisplay+0x1aa>
		_delay_ms(10);
	}
	if (digit3 != -1){
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <writeLedDisplay+0x1b0>
 2d2:	00 00       	nop
 2d4:	cf 3f       	cpi	r28, 0xFF	; 255
 2d6:	9f ef       	ldi	r25, 0xFF	; 255
		spi_writeWord(3, digit3);
 2d8:	d9 07       	cpc	r29, r25
 2da:	51 f0       	breq	.+20     	; 0x2f0 <writeLedDisplay+0x1ce>
 2dc:	6c 2f       	mov	r22, r28
 2de:	83 e0       	ldi	r24, 0x03	; 3
 2e0:	04 df       	rcall	.-504    	; 0xea <spi_writeWord>
 2e2:	8f e1       	ldi	r24, 0x1F	; 31
 2e4:	9e e4       	ldi	r25, 0x4E	; 78
 2e6:	01 97       	sbiw	r24, 0x01	; 1
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <writeLedDisplay+0x1c4>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <writeLedDisplay+0x1ca>
		_delay_ms(10);
		} else {
		spi_writeWord(3, 0x0F);
 2ec:	00 00       	nop
 2ee:	09 c0       	rjmp	.+18     	; 0x302 <writeLedDisplay+0x1e0>
 2f0:	6f e0       	ldi	r22, 0x0F	; 15
 2f2:	83 e0       	ldi	r24, 0x03	; 3
 2f4:	fa de       	rcall	.-524    	; 0xea <spi_writeWord>
 2f6:	8f e1       	ldi	r24, 0x1F	; 31
 2f8:	9e e4       	ldi	r25, 0x4E	; 78
 2fa:	01 97       	sbiw	r24, 0x01	; 1
 2fc:	f1 f7       	brne	.-4      	; 0x2fa <writeLedDisplay+0x1d8>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <writeLedDisplay+0x1de>
		_delay_ms(10);
	}
	if (digit4 != -1){
		spi_writeWord(4, digit4);
 300:	00 00       	nop
 302:	6f 2d       	mov	r22, r15
 304:	84 e0       	ldi	r24, 0x04	; 4
 306:	f1 de       	rcall	.-542    	; 0xea <spi_writeWord>
 308:	8f e1       	ldi	r24, 0x1F	; 31
 30a:	9e e4       	ldi	r25, 0x4E	; 78
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <writeLedDisplay+0x1ea>
 310:	00 c0       	rjmp	.+0      	; 0x312 <writeLedDisplay+0x1f0>
 312:	00 00       	nop
		_delay_ms(10);
		} else {
		spi_writeWord(4, 0x0F);
		_delay_ms(10);
	}
}
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	1f 91       	pop	r17
 31a:	0f 91       	pop	r16
 31c:	ff 90       	pop	r15
 31e:	08 95       	ret

00000320 <main>:

int main()
{
	// inilialize
	DDRB=0x01;					  	// Set PB0 pin as output for display select
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	87 bb       	out	0x17, r24	; 23
	spi_masterInit();              	// Initialize spi module
 324:	bc de       	rcall	.-648    	; 0x9e <spi_masterInit>
	displayDriverInit();            // Initialize display chip
 326:	f0 de       	rcall	.-544    	; 0x108 <displayDriverInit>
 328:	87 b3       	in	r24, 0x17	; 23
	
	DDRB |= (1 << 0) ; // Set LED as output
 32a:	81 60       	ori	r24, 0x01	; 1
 32c:	87 bb       	out	0x17, r24	; 23
 32e:	8e b5       	in	r24, 0x2e	; 46
	TCCR1B |= ((1 << CS10 ) | (1 << CS11 )); // maak timer Fcpu/64
 330:	83 60       	ori	r24, 0x03	; 3
 332:	8e bd       	out	0x2e, r24	; 46
 334:	c1 2c       	mov	r12, r1
	double seconden = 0;
 336:	d1 2c       	mov	r13, r1
 338:	76 01       	movw	r14, r12
 33a:	8c b5       	in	r24, 0x2c	; 44

	for (;;) {
		// Wacht tot de timer op 1 seconden zit, dan true
		if (TCNT1 >= 62496) {
 33c:	9d b5       	in	r25, 0x2d	; 45
 33e:	80 32       	cpi	r24, 0x20	; 32
 340:	94 4f       	sbci	r25, 0xF4	; 244
 342:	d8 f3       	brcs	.-10     	; 0x33a <main+0x1a>
 344:	98 b3       	in	r25, 0x18	; 24
			PORTB ^= (1 << 0) ; // Toggle the LED
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	89 27       	eor	r24, r25
 34a:	88 bb       	out	0x18, r24	; 24
 34c:	1d bc       	out	0x2d, r1	; 45
			TCNT1 = 0; // Reset timer
 34e:	1c bc       	out	0x2c, r1	; 44
 350:	20 e0       	ldi	r18, 0x00	; 0
			seconden+=0.5;
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	40 e0       	ldi	r20, 0x00	; 0
 356:	5f e3       	ldi	r21, 0x3F	; 63
 358:	c7 01       	movw	r24, r14
 35a:	b6 01       	movw	r22, r12
 35c:	07 d0       	rcall	.+14     	; 0x36c <__addsf3>
 35e:	6b 01       	movw	r12, r22
 360:	7c 01       	movw	r14, r24
			writeLedDisplay(seconden);
 362:	68 d0       	rcall	.+208    	; 0x434 <__fixsfsi>
 364:	cb 01       	movw	r24, r22
 366:	dd de       	rcall	.-582    	; 0x122 <writeLedDisplay>
 368:	e8 cf       	rjmp	.-48     	; 0x33a <main+0x1a>

0000036a <__subsf3>:
 36a:	50 58       	subi	r21, 0x80	; 128

0000036c <__addsf3>:
 36c:	bb 27       	eor	r27, r27
 36e:	aa 27       	eor	r26, r26
 370:	0e d0       	rcall	.+28     	; 0x38e <__addsf3x>
 372:	a8 c0       	rjmp	.+336    	; 0x4c4 <__fp_round>
 374:	99 d0       	rcall	.+306    	; 0x4a8 <__fp_pscA>
 376:	30 f0       	brcs	.+12     	; 0x384 <__addsf3+0x18>
 378:	9e d0       	rcall	.+316    	; 0x4b6 <__fp_pscB>
 37a:	20 f0       	brcs	.+8      	; 0x384 <__addsf3+0x18>
 37c:	31 f4       	brne	.+12     	; 0x38a <__addsf3+0x1e>
 37e:	9f 3f       	cpi	r25, 0xFF	; 255
 380:	11 f4       	brne	.+4      	; 0x386 <__addsf3+0x1a>
 382:	1e f4       	brtc	.+6      	; 0x38a <__addsf3+0x1e>
 384:	8e c0       	rjmp	.+284    	; 0x4a2 <__fp_nan>
 386:	0e f4       	brtc	.+2      	; 0x38a <__addsf3+0x1e>
 388:	e0 95       	com	r30
 38a:	e7 fb       	bst	r30, 7
 38c:	84 c0       	rjmp	.+264    	; 0x496 <__fp_inf>

0000038e <__addsf3x>:
 38e:	e9 2f       	mov	r30, r25
 390:	aa d0       	rcall	.+340    	; 0x4e6 <__fp_split3>
 392:	80 f3       	brcs	.-32     	; 0x374 <__addsf3+0x8>
 394:	ba 17       	cp	r27, r26
 396:	62 07       	cpc	r22, r18
 398:	73 07       	cpc	r23, r19
 39a:	84 07       	cpc	r24, r20
 39c:	95 07       	cpc	r25, r21
 39e:	18 f0       	brcs	.+6      	; 0x3a6 <__addsf3x+0x18>
 3a0:	71 f4       	brne	.+28     	; 0x3be <__addsf3x+0x30>
 3a2:	9e f5       	brtc	.+102    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3a4:	c2 c0       	rjmp	.+388    	; 0x52a <__fp_zero>
 3a6:	0e f4       	brtc	.+2      	; 0x3aa <__addsf3x+0x1c>
 3a8:	e0 95       	com	r30
 3aa:	0b 2e       	mov	r0, r27
 3ac:	ba 2f       	mov	r27, r26
 3ae:	a0 2d       	mov	r26, r0
 3b0:	0b 01       	movw	r0, r22
 3b2:	b9 01       	movw	r22, r18
 3b4:	90 01       	movw	r18, r0
 3b6:	0c 01       	movw	r0, r24
 3b8:	ca 01       	movw	r24, r20
 3ba:	a0 01       	movw	r20, r0
 3bc:	11 24       	eor	r1, r1
 3be:	ff 27       	eor	r31, r31
 3c0:	59 1b       	sub	r21, r25
 3c2:	99 f0       	breq	.+38     	; 0x3ea <__addsf3x+0x5c>
 3c4:	59 3f       	cpi	r21, 0xF9	; 249
 3c6:	50 f4       	brcc	.+20     	; 0x3dc <__addsf3x+0x4e>
 3c8:	50 3e       	cpi	r21, 0xE0	; 224
 3ca:	68 f1       	brcs	.+90     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3cc:	1a 16       	cp	r1, r26
 3ce:	f0 40       	sbci	r31, 0x00	; 0
 3d0:	a2 2f       	mov	r26, r18
 3d2:	23 2f       	mov	r18, r19
 3d4:	34 2f       	mov	r19, r20
 3d6:	44 27       	eor	r20, r20
 3d8:	58 5f       	subi	r21, 0xF8	; 248
 3da:	f3 cf       	rjmp	.-26     	; 0x3c2 <__addsf3x+0x34>
 3dc:	46 95       	lsr	r20
 3de:	37 95       	ror	r19
 3e0:	27 95       	ror	r18
 3e2:	a7 95       	ror	r26
 3e4:	f0 40       	sbci	r31, 0x00	; 0
 3e6:	53 95       	inc	r21
 3e8:	c9 f7       	brne	.-14     	; 0x3dc <__addsf3x+0x4e>
 3ea:	7e f4       	brtc	.+30     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3ec:	1f 16       	cp	r1, r31
 3ee:	ba 0b       	sbc	r27, r26
 3f0:	62 0b       	sbc	r22, r18
 3f2:	73 0b       	sbc	r23, r19
 3f4:	84 0b       	sbc	r24, r20
 3f6:	ba f0       	brmi	.+46     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3f8:	91 50       	subi	r25, 0x01	; 1
 3fa:	a1 f0       	breq	.+40     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 3fc:	ff 0f       	add	r31, r31
 3fe:	bb 1f       	adc	r27, r27
 400:	66 1f       	adc	r22, r22
 402:	77 1f       	adc	r23, r23
 404:	88 1f       	adc	r24, r24
 406:	c2 f7       	brpl	.-16     	; 0x3f8 <__addsf3x+0x6a>
 408:	0e c0       	rjmp	.+28     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 40a:	ba 0f       	add	r27, r26
 40c:	62 1f       	adc	r22, r18
 40e:	73 1f       	adc	r23, r19
 410:	84 1f       	adc	r24, r20
 412:	48 f4       	brcc	.+18     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 414:	87 95       	ror	r24
 416:	77 95       	ror	r23
 418:	67 95       	ror	r22
 41a:	b7 95       	ror	r27
 41c:	f7 95       	ror	r31
 41e:	9e 3f       	cpi	r25, 0xFE	; 254
 420:	08 f0       	brcs	.+2      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 422:	b3 cf       	rjmp	.-154    	; 0x38a <__addsf3+0x1e>
 424:	93 95       	inc	r25
 426:	88 0f       	add	r24, r24
 428:	08 f0       	brcs	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 42a:	99 27       	eor	r25, r25
 42c:	ee 0f       	add	r30, r30
 42e:	97 95       	ror	r25
 430:	87 95       	ror	r24
 432:	08 95       	ret

00000434 <__fixsfsi>:
 434:	04 d0       	rcall	.+8      	; 0x43e <__fixunssfsi>
 436:	68 94       	set
 438:	b1 11       	cpse	r27, r1
 43a:	78 c0       	rjmp	.+240    	; 0x52c <__fp_szero>
 43c:	08 95       	ret

0000043e <__fixunssfsi>:
 43e:	5b d0       	rcall	.+182    	; 0x4f6 <__fp_splitA>
 440:	88 f0       	brcs	.+34     	; 0x464 <__fixunssfsi+0x26>
 442:	9f 57       	subi	r25, 0x7F	; 127
 444:	90 f0       	brcs	.+36     	; 0x46a <__fixunssfsi+0x2c>
 446:	b9 2f       	mov	r27, r25
 448:	99 27       	eor	r25, r25
 44a:	b7 51       	subi	r27, 0x17	; 23
 44c:	a0 f0       	brcs	.+40     	; 0x476 <__fixunssfsi+0x38>
 44e:	d1 f0       	breq	.+52     	; 0x484 <__fixunssfsi+0x46>
 450:	66 0f       	add	r22, r22
 452:	77 1f       	adc	r23, r23
 454:	88 1f       	adc	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	1a f0       	brmi	.+6      	; 0x460 <__fixunssfsi+0x22>
 45a:	ba 95       	dec	r27
 45c:	c9 f7       	brne	.-14     	; 0x450 <__fixunssfsi+0x12>
 45e:	12 c0       	rjmp	.+36     	; 0x484 <__fixunssfsi+0x46>
 460:	b1 30       	cpi	r27, 0x01	; 1
 462:	81 f0       	breq	.+32     	; 0x484 <__fixunssfsi+0x46>
 464:	62 d0       	rcall	.+196    	; 0x52a <__fp_zero>
 466:	b1 e0       	ldi	r27, 0x01	; 1
 468:	08 95       	ret
 46a:	5f c0       	rjmp	.+190    	; 0x52a <__fp_zero>
 46c:	67 2f       	mov	r22, r23
 46e:	78 2f       	mov	r23, r24
 470:	88 27       	eor	r24, r24
 472:	b8 5f       	subi	r27, 0xF8	; 248
 474:	39 f0       	breq	.+14     	; 0x484 <__fixunssfsi+0x46>
 476:	b9 3f       	cpi	r27, 0xF9	; 249
 478:	cc f3       	brlt	.-14     	; 0x46c <__fixunssfsi+0x2e>
 47a:	86 95       	lsr	r24
 47c:	77 95       	ror	r23
 47e:	67 95       	ror	r22
 480:	b3 95       	inc	r27
 482:	d9 f7       	brne	.-10     	; 0x47a <__fixunssfsi+0x3c>
 484:	3e f4       	brtc	.+14     	; 0x494 <__fixunssfsi+0x56>
 486:	90 95       	com	r25
 488:	80 95       	com	r24
 48a:	70 95       	com	r23
 48c:	61 95       	neg	r22
 48e:	7f 4f       	sbci	r23, 0xFF	; 255
 490:	8f 4f       	sbci	r24, 0xFF	; 255
 492:	9f 4f       	sbci	r25, 0xFF	; 255
 494:	08 95       	ret

00000496 <__fp_inf>:
 496:	97 f9       	bld	r25, 7
 498:	9f 67       	ori	r25, 0x7F	; 127
 49a:	80 e8       	ldi	r24, 0x80	; 128
 49c:	70 e0       	ldi	r23, 0x00	; 0
 49e:	60 e0       	ldi	r22, 0x00	; 0
 4a0:	08 95       	ret

000004a2 <__fp_nan>:
 4a2:	9f ef       	ldi	r25, 0xFF	; 255
 4a4:	80 ec       	ldi	r24, 0xC0	; 192
 4a6:	08 95       	ret

000004a8 <__fp_pscA>:
 4a8:	00 24       	eor	r0, r0
 4aa:	0a 94       	dec	r0
 4ac:	16 16       	cp	r1, r22
 4ae:	17 06       	cpc	r1, r23
 4b0:	18 06       	cpc	r1, r24
 4b2:	09 06       	cpc	r0, r25
 4b4:	08 95       	ret

000004b6 <__fp_pscB>:
 4b6:	00 24       	eor	r0, r0
 4b8:	0a 94       	dec	r0
 4ba:	12 16       	cp	r1, r18
 4bc:	13 06       	cpc	r1, r19
 4be:	14 06       	cpc	r1, r20
 4c0:	05 06       	cpc	r0, r21
 4c2:	08 95       	ret

000004c4 <__fp_round>:
 4c4:	09 2e       	mov	r0, r25
 4c6:	03 94       	inc	r0
 4c8:	00 0c       	add	r0, r0
 4ca:	11 f4       	brne	.+4      	; 0x4d0 <__fp_round+0xc>
 4cc:	88 23       	and	r24, r24
 4ce:	52 f0       	brmi	.+20     	; 0x4e4 <__fp_round+0x20>
 4d0:	bb 0f       	add	r27, r27
 4d2:	40 f4       	brcc	.+16     	; 0x4e4 <__fp_round+0x20>
 4d4:	bf 2b       	or	r27, r31
 4d6:	11 f4       	brne	.+4      	; 0x4dc <__fp_round+0x18>
 4d8:	60 ff       	sbrs	r22, 0
 4da:	04 c0       	rjmp	.+8      	; 0x4e4 <__fp_round+0x20>
 4dc:	6f 5f       	subi	r22, 0xFF	; 255
 4de:	7f 4f       	sbci	r23, 0xFF	; 255
 4e0:	8f 4f       	sbci	r24, 0xFF	; 255
 4e2:	9f 4f       	sbci	r25, 0xFF	; 255
 4e4:	08 95       	ret

000004e6 <__fp_split3>:
 4e6:	57 fd       	sbrc	r21, 7
 4e8:	90 58       	subi	r25, 0x80	; 128
 4ea:	44 0f       	add	r20, r20
 4ec:	55 1f       	adc	r21, r21
 4ee:	59 f0       	breq	.+22     	; 0x506 <__fp_splitA+0x10>
 4f0:	5f 3f       	cpi	r21, 0xFF	; 255
 4f2:	71 f0       	breq	.+28     	; 0x510 <__fp_splitA+0x1a>
 4f4:	47 95       	ror	r20

000004f6 <__fp_splitA>:
 4f6:	88 0f       	add	r24, r24
 4f8:	97 fb       	bst	r25, 7
 4fa:	99 1f       	adc	r25, r25
 4fc:	61 f0       	breq	.+24     	; 0x516 <__fp_splitA+0x20>
 4fe:	9f 3f       	cpi	r25, 0xFF	; 255
 500:	79 f0       	breq	.+30     	; 0x520 <__fp_splitA+0x2a>
 502:	87 95       	ror	r24
 504:	08 95       	ret
 506:	12 16       	cp	r1, r18
 508:	13 06       	cpc	r1, r19
 50a:	14 06       	cpc	r1, r20
 50c:	55 1f       	adc	r21, r21
 50e:	f2 cf       	rjmp	.-28     	; 0x4f4 <__fp_split3+0xe>
 510:	46 95       	lsr	r20
 512:	f1 df       	rcall	.-30     	; 0x4f6 <__fp_splitA>
 514:	08 c0       	rjmp	.+16     	; 0x526 <__fp_splitA+0x30>
 516:	16 16       	cp	r1, r22
 518:	17 06       	cpc	r1, r23
 51a:	18 06       	cpc	r1, r24
 51c:	99 1f       	adc	r25, r25
 51e:	f1 cf       	rjmp	.-30     	; 0x502 <__fp_splitA+0xc>
 520:	86 95       	lsr	r24
 522:	71 05       	cpc	r23, r1
 524:	61 05       	cpc	r22, r1
 526:	08 94       	sec
 528:	08 95       	ret

0000052a <__fp_zero>:
 52a:	e8 94       	clt

0000052c <__fp_szero>:
 52c:	bb 27       	eor	r27, r27
 52e:	66 27       	eor	r22, r22
 530:	77 27       	eor	r23, r23
 532:	cb 01       	movw	r24, r22
 534:	97 f9       	bld	r25, 7
 536:	08 95       	ret

00000538 <__divmodhi4>:
 538:	97 fb       	bst	r25, 7
 53a:	07 2e       	mov	r0, r23
 53c:	16 f4       	brtc	.+4      	; 0x542 <__divmodhi4+0xa>
 53e:	00 94       	com	r0
 540:	06 d0       	rcall	.+12     	; 0x54e <__divmodhi4_neg1>
 542:	77 fd       	sbrc	r23, 7
 544:	08 d0       	rcall	.+16     	; 0x556 <__divmodhi4_neg2>
 546:	0b d0       	rcall	.+22     	; 0x55e <__udivmodhi4>
 548:	07 fc       	sbrc	r0, 7
 54a:	05 d0       	rcall	.+10     	; 0x556 <__divmodhi4_neg2>
 54c:	3e f4       	brtc	.+14     	; 0x55c <__divmodhi4_exit>

0000054e <__divmodhi4_neg1>:
 54e:	90 95       	com	r25
 550:	81 95       	neg	r24
 552:	9f 4f       	sbci	r25, 0xFF	; 255
 554:	08 95       	ret

00000556 <__divmodhi4_neg2>:
 556:	70 95       	com	r23
 558:	61 95       	neg	r22
 55a:	7f 4f       	sbci	r23, 0xFF	; 255

0000055c <__divmodhi4_exit>:
 55c:	08 95       	ret

0000055e <__udivmodhi4>:
 55e:	aa 1b       	sub	r26, r26
 560:	bb 1b       	sub	r27, r27
 562:	51 e1       	ldi	r21, 0x11	; 17
 564:	07 c0       	rjmp	.+14     	; 0x574 <__udivmodhi4_ep>

00000566 <__udivmodhi4_loop>:
 566:	aa 1f       	adc	r26, r26
 568:	bb 1f       	adc	r27, r27
 56a:	a6 17       	cp	r26, r22
 56c:	b7 07       	cpc	r27, r23
 56e:	10 f0       	brcs	.+4      	; 0x574 <__udivmodhi4_ep>
 570:	a6 1b       	sub	r26, r22
 572:	b7 0b       	sbc	r27, r23

00000574 <__udivmodhi4_ep>:
 574:	88 1f       	adc	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	5a 95       	dec	r21
 57a:	a9 f7       	brne	.-22     	; 0x566 <__udivmodhi4_loop>
 57c:	80 95       	com	r24
 57e:	90 95       	com	r25
 580:	bc 01       	movw	r22, r24
 582:	cd 01       	movw	r24, r26
 584:	08 95       	ret

00000586 <_exit>:
 586:	f8 94       	cli

00000588 <__stop_program>:
 588:	ff cf       	rjmp	.-2      	; 0x588 <__stop_program>
