
1.B.5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000022e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008d1  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000806  00000000  00000000  00000b8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030c  00000000  00000000  00001393  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000038  00000000  00000000  000016a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041a  00000000  00000000  000016d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  00001af2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001ba6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	9d c0       	rjmp	.+314    	; 0x1d6 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <avr/io.h>
#include <util/delay.h>


int main(void)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
  a6:	c0 58       	subi	r28, 0x80	; 128
  a8:	d1 09       	sbc	r29, r1
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	f8 94       	cli
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	cd bf       	out	0x3d, r28	; 61
	// Instellen van alle poorten als uitgangen
	DDRA = 0xFF;
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  b8:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
  ba:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF;
  bc:	81 bb       	out	0x11, r24	; 17
	DDRE = 0xFF;
  be:	82 b9       	out	0x02, r24	; 2
	DDRF = 0xFF;
  c0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRG = 0xFF;
  c4:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>

	// Definitie van een 2D-array om pinconfiguraties op te slaan
	int pinArray[8][8] = {
  c8:	fe 01       	movw	r30, r28
  ca:	31 96       	adiw	r30, 0x01	; 1
  cc:	80 e8       	ldi	r24, 0x80	; 128
  ce:	df 01       	movw	r26, r30
  d0:	1d 92       	st	X+, r1
  d2:	8a 95       	dec	r24
  d4:	e9 f7       	brne	.-6      	; 0xd0 <main+0x32>
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	9a 83       	std	Y+2, r25	; 0x02
  dc:	89 83       	std	Y+1, r24	; 0x01
  de:	9c 83       	std	Y+4, r25	; 0x04
  e0:	8b 83       	std	Y+3, r24	; 0x03
  e2:	9a 87       	std	Y+10, r25	; 0x0a
  e4:	89 87       	std	Y+9, r24	; 0x09
  e6:	9c 87       	std	Y+12, r25	; 0x0c
  e8:	8b 87       	std	Y+11, r24	; 0x0b
  ea:	9c 8b       	std	Y+20, r25	; 0x14
  ec:	8b 8b       	std	Y+19, r24	; 0x13
  ee:	9e 8b       	std	Y+22, r25	; 0x16
  f0:	8d 8b       	std	Y+21, r24	; 0x15
  f2:	9c 8f       	std	Y+28, r25	; 0x1c
  f4:	8b 8f       	std	Y+27, r24	; 0x1b
  f6:	9e 8f       	std	Y+30, r25	; 0x1e
  f8:	8d 8f       	std	Y+29, r24	; 0x1d
  fa:	9a a3       	std	Y+34, r25	; 0x22
  fc:	89 a3       	std	Y+33, r24	; 0x21
  fe:	9e a3       	std	Y+38, r25	; 0x26
 100:	8d a3       	std	Y+37, r24	; 0x25
 102:	98 a7       	std	Y+40, r25	; 0x28
 104:	8f a3       	std	Y+39, r24	; 0x27
 106:	9e a7       	std	Y+46, r25	; 0x2e
 108:	8d a7       	std	Y+45, r24	; 0x2d
 10a:	9a ab       	std	Y+50, r25	; 0x32
 10c:	89 ab       	std	Y+49, r24	; 0x31
 10e:	9c ab       	std	Y+52, r25	; 0x34
 110:	8b ab       	std	Y+51, r24	; 0x33
 112:	98 af       	std	Y+56, r25	; 0x38
 114:	8f ab       	std	Y+55, r24	; 0x37
 116:	9a af       	std	Y+58, r25	; 0x3a
 118:	89 af       	std	Y+57, r24	; 0x39
 11a:	25 96       	adiw	r28, 0x05	; 5
 11c:	9f af       	std	Y+63, r25	; 0x3f
 11e:	8e af       	std	Y+62, r24	; 0x3e
 120:	25 97       	sbiw	r28, 0x05	; 5
 122:	27 96       	adiw	r28, 0x07	; 7
 124:	9f af       	std	Y+63, r25	; 0x3f
 126:	8e af       	std	Y+62, r24	; 0x3e
 128:	27 97       	sbiw	r28, 0x07	; 7
 12a:	2b 96       	adiw	r28, 0x0b	; 11
 12c:	9f af       	std	Y+63, r25	; 0x3f
 12e:	8e af       	std	Y+62, r24	; 0x3e
 130:	2b 97       	sbiw	r28, 0x0b	; 11
 132:	2d 96       	adiw	r28, 0x0d	; 13
 134:	9f af       	std	Y+63, r25	; 0x3f
 136:	8e af       	std	Y+62, r24	; 0x3e
 138:	2d 97       	sbiw	r28, 0x0d	; 13
 13a:	67 96       	adiw	r28, 0x17	; 23
 13c:	9f af       	std	Y+63, r25	; 0x3f
 13e:	8e af       	std	Y+62, r24	; 0x3e
 140:	67 97       	sbiw	r28, 0x17	; 23
 142:	69 96       	adiw	r28, 0x19	; 25
 144:	9f af       	std	Y+63, r25	; 0x3f
 146:	8e af       	std	Y+62, r24	; 0x3e
 148:	69 97       	sbiw	r28, 0x19	; 25
 14a:	6d 96       	adiw	r28, 0x1d	; 29
 14c:	9f af       	std	Y+63, r25	; 0x3f
 14e:	8e af       	std	Y+62, r24	; 0x3e
 150:	6d 97       	sbiw	r28, 0x1d	; 29
 152:	6f 96       	adiw	r28, 0x1f	; 31
 154:	9f af       	std	Y+63, r25	; 0x3f
 156:	8e af       	std	Y+62, r24	; 0x3e
 158:	6f 97       	sbiw	r28, 0x1f	; 31
 15a:	a3 96       	adiw	r28, 0x23	; 35
 15c:	9f af       	std	Y+63, r25	; 0x3f
 15e:	8e af       	std	Y+62, r24	; 0x3e
 160:	a3 97       	sbiw	r28, 0x23	; 35
 162:	a9 96       	adiw	r28, 0x29	; 41
 164:	9f af       	std	Y+63, r25	; 0x3f
 166:	8e af       	std	Y+62, r24	; 0x3e
 168:	a9 97       	sbiw	r28, 0x29	; 41
 16a:	ab 96       	adiw	r28, 0x2b	; 43
 16c:	9f af       	std	Y+63, r25	; 0x3f
 16e:	8e af       	std	Y+62, r24	; 0x3e
 170:	ab 97       	sbiw	r28, 0x2b	; 43
 172:	af 96       	adiw	r28, 0x2f	; 47
 174:	9f af       	std	Y+63, r25	; 0x3f
 176:	8e af       	std	Y+62, r24	; 0x3e
 178:	af 97       	sbiw	r28, 0x2f	; 47
	};

	while (1)
	{
		// Itereer door elke rij in pinArray
		for(int row = 0; row <= 6; row ++)
 17a:	80 e0       	ldi	r24, 0x00	; 0
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	27 c0       	rjmp	.+78     	; 0x1ce <main+0x130>
		{
			// Stel de uitgangen van elke poort in op basis van de huidige rij in pinArray
			PORTA = pinArray[row][0];
 180:	fc 01       	movw	r30, r24
 182:	e2 95       	swap	r30
 184:	f2 95       	swap	r31
 186:	f0 7f       	andi	r31, 0xF0	; 240
 188:	fe 27       	eor	r31, r30
 18a:	e0 7f       	andi	r30, 0xF0	; 240
 18c:	fe 27       	eor	r31, r30
 18e:	21 e0       	ldi	r18, 0x01	; 1
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	2c 0f       	add	r18, r28
 194:	3d 1f       	adc	r19, r29
 196:	e2 0f       	add	r30, r18
 198:	f3 1f       	adc	r31, r19
 19a:	20 81       	ld	r18, Z
 19c:	2b bb       	out	0x1b, r18	; 27
			PORTB = pinArray[row][1];
 19e:	22 81       	ldd	r18, Z+2	; 0x02
 1a0:	28 bb       	out	0x18, r18	; 24
			PORTC = pinArray[row][2];
 1a2:	24 81       	ldd	r18, Z+4	; 0x04
 1a4:	25 bb       	out	0x15, r18	; 21
			PORTD = pinArray[row][3];
 1a6:	26 81       	ldd	r18, Z+6	; 0x06
 1a8:	22 bb       	out	0x12, r18	; 18
			PORTE = pinArray[row][4];
 1aa:	20 85       	ldd	r18, Z+8	; 0x08
 1ac:	23 b9       	out	0x03, r18	; 3
			PORTF = pinArray[row][5];
 1ae:	22 85       	ldd	r18, Z+10	; 0x0a
 1b0:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
			PORTG = pinArray[row][6];
 1b4:	24 85       	ldd	r18, Z+12	; 0x0c
 1b6:	20 93 65 00 	sts	0x0065, r18	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ba:	3f e7       	ldi	r19, 0x7F	; 127
 1bc:	49 ea       	ldi	r20, 0xA9	; 169
 1be:	a3 e0       	ldi	r26, 0x03	; 3
 1c0:	31 50       	subi	r19, 0x01	; 1
 1c2:	40 40       	sbci	r20, 0x00	; 0
 1c4:	a0 40       	sbci	r26, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <main+0x122>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <main+0x12c>
 1ca:	00 00       	nop
	};

	while (1)
	{
		// Itereer door elke rij in pinArray
		for(int row = 0; row <= 6; row ++)
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	87 30       	cpi	r24, 0x07	; 7
 1d0:	91 05       	cpc	r25, r1
 1d2:	b4 f2       	brlt	.-84     	; 0x180 <main+0xe2>
 1d4:	d2 cf       	rjmp	.-92     	; 0x17a <main+0xdc>

000001d6 <_exit>:
 1d6:	f8 94       	cli

000001d8 <__stop_program>:
 1d8:	ff cf       	rjmp	.-2      	; 0x1d8 <__stop_program>
