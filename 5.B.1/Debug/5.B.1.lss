
5.B.1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000348  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e0b  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008da  00000000  00000000  0000128b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000537  00000000  00000000  00001b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  0000209c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f7  00000000  00000000  0000219c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000628  00000000  00000000  00002693  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002cbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	21 d1       	rcall	.+578    	; 0x2dc <main>
  9a:	54 c1       	rjmp	.+680    	; 0x344 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <wait>:
}

// Set display off ('shut down')
void displayOff()
{
	spi_writeWord(0x0C, 0x00); // Afsluiten -> 1 = normaal
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	08 c0       	rjmp	.+16     	; 0xb4 <wait+0x16>
  a4:	ef ec       	ldi	r30, 0xCF	; 207
  a6:	f7 e0       	ldi	r31, 0x07	; 7
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <wait+0xa>
  ac:	00 c0       	rjmp	.+0      	; 0xae <wait+0x10>
  ae:	00 00       	nop
  b0:	2f 5f       	subi	r18, 0xFF	; 255
  b2:	3f 4f       	sbci	r19, 0xFF	; 255
  b4:	28 17       	cp	r18, r24
  b6:	39 07       	cpc	r19, r25
  b8:	ac f3       	brlt	.-22     	; 0xa4 <wait+0x6>
  ba:	08 95       	ret

000000bc <spi_masterInit>:
  bc:	8f ef       	ldi	r24, 0xFF	; 255
  be:	87 bb       	out	0x17, r24	; 23
  c0:	87 b3       	in	r24, 0x17	; 23
  c2:	87 7f       	andi	r24, 0xF7	; 247
  c4:	87 bb       	out	0x17, r24	; 23
  c6:	88 b3       	in	r24, 0x18	; 24
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	88 bb       	out	0x18, r24	; 24
  cc:	82 e5       	ldi	r24, 0x52	; 82
  ce:	8d b9       	out	0x0d, r24	; 13
  d0:	08 95       	ret

000000d2 <spi_write>:
  d2:	8f b9       	out	0x0f, r24	; 15
  d4:	77 9b       	sbis	0x0e, 7	; 14
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <spi_write+0x2>
  d8:	08 95       	ret

000000da <spi_slaveSelect>:
  da:	98 b3       	in	r25, 0x18	; 24
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <spi_slaveSelect+0xc>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	8a 95       	dec	r24
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <spi_slaveSelect+0x8>
  ea:	20 95       	com	r18
  ec:	29 23       	and	r18, r25
  ee:	28 bb       	out	0x18, r18	; 24
  f0:	08 95       	ret

000000f2 <spi_slaveDeSelect>:
  f2:	98 b3       	in	r25, 0x18	; 24
  f4:	21 e0       	ldi	r18, 0x01	; 1
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	02 c0       	rjmp	.+4      	; 0xfe <spi_slaveDeSelect+0xc>
  fa:	22 0f       	add	r18, r18
  fc:	33 1f       	adc	r19, r19
  fe:	8a 95       	dec	r24
 100:	e2 f7       	brpl	.-8      	; 0xfa <spi_slaveDeSelect+0x8>
 102:	29 2b       	or	r18, r25
 104:	28 bb       	out	0x18, r18	; 24
 106:	08 95       	ret

00000108 <spi_writeWord>:
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	d8 2f       	mov	r29, r24
 10e:	c6 2f       	mov	r28, r22
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	e3 df       	rcall	.-58     	; 0xda <spi_slaveSelect>
 114:	8d 2f       	mov	r24, r29
 116:	dd df       	rcall	.-70     	; 0xd2 <spi_write>
 118:	8c 2f       	mov	r24, r28
 11a:	db df       	rcall	.-74     	; 0xd2 <spi_write>
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	e9 df       	rcall	.-46     	; 0xf2 <spi_slaveDeSelect>
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <displayDriverInit>:
 126:	6f ef       	ldi	r22, 0xFF	; 255
 128:	89 e0       	ldi	r24, 0x09	; 9
 12a:	ee df       	rcall	.-36     	; 0x108 <spi_writeWord>
 12c:	6f e0       	ldi	r22, 0x0F	; 15
 12e:	8a e0       	ldi	r24, 0x0A	; 10
 130:	eb df       	rcall	.-42     	; 0x108 <spi_writeWord>
 132:	6f e0       	ldi	r22, 0x0F	; 15
 134:	8b e0       	ldi	r24, 0x0B	; 11
 136:	e8 df       	rcall	.-48     	; 0x108 <spi_writeWord>
 138:	61 e0       	ldi	r22, 0x01	; 1
 13a:	8c e0       	ldi	r24, 0x0C	; 12
 13c:	e5 cf       	rjmp	.-54     	; 0x108 <spi_writeWord>
 13e:	08 95       	ret

00000140 <writeLedDisplay>:
}

void writeLedDisplay(int value){
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
	int digit1 = -1;
	int digit2 = -1;
	int digit3 = -1;
	int digit4 = -1;
	
	if (value < 10 && value >= 0){
 14e:	8a 30       	cpi	r24, 0x0A	; 10
 150:	91 05       	cpc	r25, r1
 152:	08 f4       	brcc	.+2      	; 0x156 <writeLedDisplay+0x16>
 154:	50 c0       	rjmp	.+160    	; 0x1f6 <writeLedDisplay+0xb6>
		digit4 = value;
		} else if (value >= 10 && value < 100){
 156:	9c 01       	movw	r18, r24
 158:	2a 50       	subi	r18, 0x0A	; 10
 15a:	31 09       	sbc	r19, r1
 15c:	2a 35       	cpi	r18, 0x5A	; 90
 15e:	31 05       	cpc	r19, r1
 160:	50 f4       	brcc	.+20     	; 0x176 <writeLedDisplay+0x36>
		digit4 = value / 10;
 162:	6a e0       	ldi	r22, 0x0A	; 10
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	c7 d0       	rcall	.+398    	; 0x2f6 <__divmodhi4>
 168:	eb 01       	movw	r28, r22
 16a:	7c 01       	movw	r14, r24
}

void writeLedDisplay(int value){
	
	int digit1 = -1;
	int digit2 = -1;
 16c:	0f ef       	ldi	r16, 0xFF	; 255
 16e:	1f ef       	ldi	r17, 0xFF	; 255
	spi_writeWord(0x0C, 0x00); // Afsluiten -> 1 = normaal
}

void writeLedDisplay(int value){
	
	int digit1 = -1;
 170:	6f ef       	ldi	r22, 0xFF	; 255
 172:	7f ef       	ldi	r23, 0xFF	; 255
 174:	51 c0       	rjmp	.+162    	; 0x218 <writeLedDisplay+0xd8>
	if (value < 10 && value >= 0){
		digit4 = value;
		} else if (value >= 10 && value < 100){
		digit4 = value / 10;
		digit3 = value % 10;
		} else if (value >= 100 && value < 1000){
 176:	9c 01       	movw	r18, r24
 178:	24 56       	subi	r18, 0x64	; 100
 17a:	31 09       	sbc	r19, r1
 17c:	24 38       	cpi	r18, 0x84	; 132
 17e:	33 40       	sbci	r19, 0x03	; 3
 180:	b8 f4       	brcc	.+46     	; 0x1b0 <writeLedDisplay+0x70>
		digit4 = value / 100;
 182:	64 e6       	ldi	r22, 0x64	; 100
 184:	70 e0       	ldi	r23, 0x00	; 0
 186:	b7 d0       	rcall	.+366    	; 0x2f6 <__divmodhi4>
 188:	e6 2f       	mov	r30, r22
 18a:	47 2f       	mov	r20, r23
		digit3 = (value / 10) % 10;
 18c:	2a e0       	ldi	r18, 0x0A	; 10
 18e:	30 e0       	ldi	r19, 0x00	; 0
 190:	ce 01       	movw	r24, r28
 192:	b9 01       	movw	r22, r18
 194:	b0 d0       	rcall	.+352    	; 0x2f6 <__divmodhi4>
 196:	c8 2f       	mov	r28, r24
 198:	f9 2f       	mov	r31, r25
 19a:	cb 01       	movw	r24, r22
 19c:	b9 01       	movw	r22, r18
 19e:	ab d0       	rcall	.+342    	; 0x2f6 <__divmodhi4>
 1a0:	7c 01       	movw	r14, r24
		digit2 = value % 10;
 1a2:	0c 2f       	mov	r16, r28
 1a4:	1f 2f       	mov	r17, r31
		digit4 = value;
		} else if (value >= 10 && value < 100){
		digit4 = value / 10;
		digit3 = value % 10;
		} else if (value >= 100 && value < 1000){
		digit4 = value / 100;
 1a6:	ce 2f       	mov	r28, r30
 1a8:	d4 2f       	mov	r29, r20
	spi_writeWord(0x0C, 0x00); // Afsluiten -> 1 = normaal
}

void writeLedDisplay(int value){
	
	int digit1 = -1;
 1aa:	6f ef       	ldi	r22, 0xFF	; 255
 1ac:	7f ef       	ldi	r23, 0xFF	; 255
 1ae:	34 c0       	rjmp	.+104    	; 0x218 <writeLedDisplay+0xd8>
		digit3 = value % 10;
		} else if (value >= 100 && value < 1000){
		digit4 = value / 100;
		digit3 = (value / 10) % 10;
		digit2 = value % 10;
		} else if (value >= 1000 && value < 10000){
 1b0:	88 5e       	subi	r24, 0xE8	; 232
 1b2:	93 40       	sbci	r25, 0x03	; 3
 1b4:	88 32       	cpi	r24, 0x28	; 40
 1b6:	93 42       	sbci	r25, 0x23	; 35
		digit4 = value / 1000;
 1b8:	30 f5       	brcc	.+76     	; 0x206 <writeLedDisplay+0xc6>
 1ba:	ce 01       	movw	r24, r28
 1bc:	68 ee       	ldi	r22, 0xE8	; 232
 1be:	73 e0       	ldi	r23, 0x03	; 3
 1c0:	9a d0       	rcall	.+308    	; 0x2f6 <__divmodhi4>
 1c2:	e6 2f       	mov	r30, r22
		digit3 = (value / 100) % 10;
 1c4:	47 2f       	mov	r20, r23
 1c6:	ce 01       	movw	r24, r28
 1c8:	64 e6       	ldi	r22, 0x64	; 100
 1ca:	70 e0       	ldi	r23, 0x00	; 0
 1cc:	94 d0       	rcall	.+296    	; 0x2f6 <__divmodhi4>
 1ce:	cb 01       	movw	r24, r22
 1d0:	2a e0       	ldi	r18, 0x0A	; 10
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	b9 01       	movw	r22, r18
 1d6:	8f d0       	rcall	.+286    	; 0x2f6 <__divmodhi4>
		digit2 = (value / 10) % 10;
 1d8:	7c 01       	movw	r14, r24
 1da:	ce 01       	movw	r24, r28
 1dc:	b9 01       	movw	r22, r18
 1de:	8b d0       	rcall	.+278    	; 0x2f6 <__divmodhi4>
 1e0:	c8 2f       	mov	r28, r24
 1e2:	f9 2f       	mov	r31, r25
 1e4:	cb 01       	movw	r24, r22
 1e6:	b9 01       	movw	r22, r18
 1e8:	86 d0       	rcall	.+268    	; 0x2f6 <__divmodhi4>
 1ea:	8c 01       	movw	r16, r24
		digit1 = value % 10;
 1ec:	6c 2f       	mov	r22, r28
 1ee:	7f 2f       	mov	r23, r31
		} else if (value >= 100 && value < 1000){
		digit4 = value / 100;
		digit3 = (value / 10) % 10;
		digit2 = value % 10;
		} else if (value >= 1000 && value < 10000){
		digit4 = value / 1000;
 1f0:	ce 2f       	mov	r28, r30
 1f2:	d4 2f       	mov	r29, r20
 1f4:	11 c0       	rjmp	.+34     	; 0x218 <writeLedDisplay+0xd8>

void writeLedDisplay(int value){
	
	int digit1 = -1;
	int digit2 = -1;
	int digit3 = -1;
 1f6:	ee 24       	eor	r14, r14
 1f8:	ea 94       	dec	r14
 1fa:	fe 2c       	mov	r15, r14
}

void writeLedDisplay(int value){
	
	int digit1 = -1;
	int digit2 = -1;
 1fc:	0f ef       	ldi	r16, 0xFF	; 255
 1fe:	1f ef       	ldi	r17, 0xFF	; 255
	spi_writeWord(0x0C, 0x00); // Afsluiten -> 1 = normaal
}

void writeLedDisplay(int value){
	
	int digit1 = -1;
 200:	6f ef       	ldi	r22, 0xFF	; 255
 202:	7f ef       	ldi	r23, 0xFF	; 255
 204:	09 c0       	rjmp	.+18     	; 0x218 <writeLedDisplay+0xd8>
	int digit2 = -1;
	int digit3 = -1;
	int digit4 = -1;
 206:	cf ef       	ldi	r28, 0xFF	; 255
 208:	df ef       	ldi	r29, 0xFF	; 255

void writeLedDisplay(int value){
	
	int digit1 = -1;
	int digit2 = -1;
	int digit3 = -1;
 20a:	ee 24       	eor	r14, r14
 20c:	ea 94       	dec	r14
 20e:	fe 2c       	mov	r15, r14
}

void writeLedDisplay(int value){
	
	int digit1 = -1;
	int digit2 = -1;
 210:	0f ef       	ldi	r16, 0xFF	; 255
	spi_writeWord(0x0C, 0x00); // Afsluiten -> 1 = normaal
}

void writeLedDisplay(int value){
	
	int digit1 = -1;
 212:	1f ef       	ldi	r17, 0xFF	; 255
 214:	6f ef       	ldi	r22, 0xFF	; 255
		digit3 = (value / 100) % 10;
		digit2 = (value / 10) % 10;
		digit1 = value % 10;
	}
	
	if (digit1 != -1){
 216:	7f ef       	ldi	r23, 0xFF	; 255
 218:	6f 3f       	cpi	r22, 0xFF	; 255
 21a:	4f ef       	ldi	r20, 0xFF	; 255
 21c:	74 07       	cpc	r23, r20
		spi_writeWord(1, digit1);
 21e:	49 f0       	breq	.+18     	; 0x232 <writeLedDisplay+0xf2>
 220:	81 e0       	ldi	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 222:	72 df       	rcall	.-284    	; 0x108 <spi_writeWord>
 224:	8f e1       	ldi	r24, 0x1F	; 31
 226:	9e e4       	ldi	r25, 0x4E	; 78
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <writeLedDisplay+0xe8>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <writeLedDisplay+0xee>
 22e:	00 00       	nop
		_delay_ms(10);
		} else {
		spi_writeWord(1, 0x0F);
 230:	09 c0       	rjmp	.+18     	; 0x244 <writeLedDisplay+0x104>
 232:	6f e0       	ldi	r22, 0x0F	; 15
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	68 df       	rcall	.-304    	; 0x108 <spi_writeWord>
 238:	8f e1       	ldi	r24, 0x1F	; 31
 23a:	9e e4       	ldi	r25, 0x4E	; 78
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <writeLedDisplay+0xfc>
 240:	00 c0       	rjmp	.+0      	; 0x242 <writeLedDisplay+0x102>
		_delay_ms(10);
	}
	if (digit2 != -1){
 242:	00 00       	nop
 244:	0f 3f       	cpi	r16, 0xFF	; 255
 246:	9f ef       	ldi	r25, 0xFF	; 255
 248:	19 07       	cpc	r17, r25
		spi_writeWord(2, digit2);
 24a:	51 f0       	breq	.+20     	; 0x260 <writeLedDisplay+0x120>
 24c:	60 2f       	mov	r22, r16
 24e:	82 e0       	ldi	r24, 0x02	; 2
 250:	5b df       	rcall	.-330    	; 0x108 <spi_writeWord>
 252:	8f e1       	ldi	r24, 0x1F	; 31
 254:	9e e4       	ldi	r25, 0x4E	; 78
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <writeLedDisplay+0x116>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <writeLedDisplay+0x11c>
 25c:	00 00       	nop
		_delay_ms(10);
		} else {
		spi_writeWord(2, 0x0F);
 25e:	09 c0       	rjmp	.+18     	; 0x272 <writeLedDisplay+0x132>
 260:	6f e0       	ldi	r22, 0x0F	; 15
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	51 df       	rcall	.-350    	; 0x108 <spi_writeWord>
 266:	8f e1       	ldi	r24, 0x1F	; 31
 268:	9e e4       	ldi	r25, 0x4E	; 78
 26a:	01 97       	sbiw	r24, 0x01	; 1
 26c:	f1 f7       	brne	.-4      	; 0x26a <writeLedDisplay+0x12a>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <writeLedDisplay+0x130>
		_delay_ms(10);
	}
	if (digit3 != -1){
 270:	00 00       	nop
 272:	9f ef       	ldi	r25, 0xFF	; 255
 274:	e9 16       	cp	r14, r25
		spi_writeWord(3, digit3);
 276:	f9 06       	cpc	r15, r25
 278:	51 f0       	breq	.+20     	; 0x28e <writeLedDisplay+0x14e>
 27a:	6e 2d       	mov	r22, r14
 27c:	83 e0       	ldi	r24, 0x03	; 3
 27e:	44 df       	rcall	.-376    	; 0x108 <spi_writeWord>
 280:	8f e1       	ldi	r24, 0x1F	; 31
 282:	9e e4       	ldi	r25, 0x4E	; 78
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <writeLedDisplay+0x144>
 288:	00 c0       	rjmp	.+0      	; 0x28a <writeLedDisplay+0x14a>
 28a:	00 00       	nop
		_delay_ms(10);
		} else {
		spi_writeWord(3, 0x0F);
 28c:	09 c0       	rjmp	.+18     	; 0x2a0 <writeLedDisplay+0x160>
 28e:	6f e0       	ldi	r22, 0x0F	; 15
 290:	83 e0       	ldi	r24, 0x03	; 3
 292:	3a df       	rcall	.-396    	; 0x108 <spi_writeWord>
 294:	8f e1       	ldi	r24, 0x1F	; 31
 296:	9e e4       	ldi	r25, 0x4E	; 78
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <writeLedDisplay+0x158>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <writeLedDisplay+0x15e>
		_delay_ms(10);
	}
	if (digit4 != -1){
 29e:	00 00       	nop
 2a0:	cf 3f       	cpi	r28, 0xFF	; 255
 2a2:	9f ef       	ldi	r25, 0xFF	; 255
		spi_writeWord(4, digit4);
 2a4:	d9 07       	cpc	r29, r25
 2a6:	51 f0       	breq	.+20     	; 0x2bc <writeLedDisplay+0x17c>
 2a8:	6c 2f       	mov	r22, r28
 2aa:	84 e0       	ldi	r24, 0x04	; 4
 2ac:	2d df       	rcall	.-422    	; 0x108 <spi_writeWord>
 2ae:	8f e1       	ldi	r24, 0x1F	; 31
 2b0:	9e e4       	ldi	r25, 0x4E	; 78
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <writeLedDisplay+0x172>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <writeLedDisplay+0x178>
 2b8:	00 00       	nop
		_delay_ms(10);
		} else {
		spi_writeWord(4, 0x0F);
 2ba:	09 c0       	rjmp	.+18     	; 0x2ce <writeLedDisplay+0x18e>
 2bc:	6f e0       	ldi	r22, 0x0F	; 15
 2be:	84 e0       	ldi	r24, 0x04	; 4
 2c0:	23 df       	rcall	.-442    	; 0x108 <spi_writeWord>
 2c2:	8f e1       	ldi	r24, 0x1F	; 31
 2c4:	9e e4       	ldi	r25, 0x4E	; 78
 2c6:	01 97       	sbiw	r24, 0x01	; 1
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <writeLedDisplay+0x186>
 2ca:	00 c0       	rjmp	.+0      	; 0x2cc <writeLedDisplay+0x18c>
 2cc:	00 00       	nop
		_delay_ms(10);
	}
}
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	1f 91       	pop	r17
 2d4:	0f 91       	pop	r16
 2d6:	ff 90       	pop	r15
 2d8:	ef 90       	pop	r14
 2da:	08 95       	ret

000002dc <main>:


int main()
{
	// inilialize
	DDRB=0x01;					  	// Set PB0 pin as output for display select
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	87 bb       	out	0x17, r24	; 23
	spi_masterInit();              	// Initialize spi module
 2e0:	ed de       	rcall	.-550    	; 0xbc <spi_masterInit>
	displayDriverInit();            // Initialize display chip
 2e2:	21 df       	rcall	.-446    	; 0x126 <displayDriverInit>
 2e4:	8d e0       	ldi	r24, 0x0D	; 13

	
	writeLedDisplay(13);
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	2b df       	rcall	.-426    	; 0x140 <writeLedDisplay>
 2ea:	88 ee       	ldi	r24, 0xE8	; 232
	wait(1000);
 2ec:	93 e0       	ldi	r25, 0x03	; 3
 2ee:	d7 de       	rcall	.-594    	; 0x9e <wait>
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	90 e0       	ldi	r25, 0x00	; 0
	return (1);
}
 2f4:	08 95       	ret

000002f6 <__divmodhi4>:
 2f6:	97 fb       	bst	r25, 7
 2f8:	07 2e       	mov	r0, r23
 2fa:	16 f4       	brtc	.+4      	; 0x300 <__divmodhi4+0xa>
 2fc:	00 94       	com	r0
 2fe:	06 d0       	rcall	.+12     	; 0x30c <__divmodhi4_neg1>
 300:	77 fd       	sbrc	r23, 7
 302:	08 d0       	rcall	.+16     	; 0x314 <__divmodhi4_neg2>
 304:	0b d0       	rcall	.+22     	; 0x31c <__udivmodhi4>
 306:	07 fc       	sbrc	r0, 7
 308:	05 d0       	rcall	.+10     	; 0x314 <__divmodhi4_neg2>
 30a:	3e f4       	brtc	.+14     	; 0x31a <__divmodhi4_exit>

0000030c <__divmodhi4_neg1>:
 30c:	90 95       	com	r25
 30e:	81 95       	neg	r24
 310:	9f 4f       	sbci	r25, 0xFF	; 255
 312:	08 95       	ret

00000314 <__divmodhi4_neg2>:
 314:	70 95       	com	r23
 316:	61 95       	neg	r22
 318:	7f 4f       	sbci	r23, 0xFF	; 255

0000031a <__divmodhi4_exit>:
 31a:	08 95       	ret

0000031c <__udivmodhi4>:
 31c:	aa 1b       	sub	r26, r26
 31e:	bb 1b       	sub	r27, r27
 320:	51 e1       	ldi	r21, 0x11	; 17
 322:	07 c0       	rjmp	.+14     	; 0x332 <__udivmodhi4_ep>

00000324 <__udivmodhi4_loop>:
 324:	aa 1f       	adc	r26, r26
 326:	bb 1f       	adc	r27, r27
 328:	a6 17       	cp	r26, r22
 32a:	b7 07       	cpc	r27, r23
 32c:	10 f0       	brcs	.+4      	; 0x332 <__udivmodhi4_ep>
 32e:	a6 1b       	sub	r26, r22
 330:	b7 0b       	sbc	r27, r23

00000332 <__udivmodhi4_ep>:
 332:	88 1f       	adc	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	5a 95       	dec	r21
 338:	a9 f7       	brne	.-22     	; 0x324 <__udivmodhi4_loop>
 33a:	80 95       	com	r24
 33c:	90 95       	com	r25
 33e:	bc 01       	movw	r22, r24
 340:	cd 01       	movw	r24, r26
 342:	08 95       	ret

00000344 <_exit>:
 344:	f8 94       	cli

00000346 <__stop_program>:
 346:	ff cf       	rjmp	.-2      	; 0x346 <__stop_program>
