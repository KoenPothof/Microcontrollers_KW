
1.B.6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000162  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000094e  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f4  00000000  00000000  00000b92  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000325  00000000  00000000  00001386  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000016ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000408  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000208  00000000  00000000  00001ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001ce0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	61 c0       	rjmp	.+194    	; 0x15e <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRD = 0xFF; // Stel alle pinnen van Port D in als uitgangen
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x01; // Stel de eerste pin van Port D hoog, de rest laag
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	82 bb       	out	0x12, r24	; 18
	int t = 0;
	int i = 0;
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	70 e0       	ldi	r23, 0x00	; 0

int main(void)
{
	DDRD = 0xFF; // Stel alle pinnen van Port D in als uitgangen
	PORTD = 0x01; // Stel de eerste pin van Port D hoog, de rest laag
	int t = 0;
  aa:	40 e0       	ldi	r20, 0x00	; 0
  ac:	50 e0       	ldi	r21, 0x00	; 0
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <main+0x14>
		if(PINC == 1){ // Controleer of de waarde op pin 0 van Port C gelijk is aan 1
			t = 1;
		}
		
		if(t == 1){ // Als t gelijk is aan 1 (knop is ingedrukt)
			t = 0;
  b0:	a9 01       	movw	r20, r18
	int t = 0;
	int i = 0;

	while (1)
	{
		if(PINC == 1){ // Controleer of de waarde op pin 0 van Port C gelijk is aan 1
  b2:	83 b3       	in	r24, 0x13	; 19
  b4:	81 30       	cpi	r24, 0x01	; 1
  b6:	11 f4       	brne	.+4      	; 0xbc <main+0x1e>
			t = 1;
  b8:	41 e0       	ldi	r20, 0x01	; 1
  ba:	50 e0       	ldi	r21, 0x00	; 0
		}
		
		if(t == 1){ // Als t gelijk is aan 1 (knop is ingedrukt)
  bc:	41 30       	cpi	r20, 0x01	; 1
  be:	51 05       	cpc	r21, r1
  c0:	c1 f7       	brne	.-16     	; 0xb2 <main+0x14>
			t = 0;
			if (i == 0) // Controleer of de modus i gelijk is aan 0
  c2:	61 15       	cp	r22, r1
  c4:	71 05       	cpc	r23, r1
  c6:	19 f5       	brne	.+70     	; 0x10e <main+0x70>
  c8:	1a c0       	rjmp	.+52     	; 0xfe <main+0x60>
			{
				i = 1;
				while(t == 0){ // Voer een knipperende lus uit zolang t gelijk is aan 0 (knop niet ingedrukt)
					PORTD = 0b10000000; // Zet de meest significante bit van Port D hoog, andere pinnen laag
  ca:	80 e8       	ldi	r24, 0x80	; 128
  cc:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ce:	6f ef       	ldi	r22, 0xFF	; 255
  d0:	89 e6       	ldi	r24, 0x69	; 105
  d2:	98 e1       	ldi	r25, 0x18	; 24
  d4:	61 50       	subi	r22, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x36>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x40>
  de:	00 00       	nop
					_delay_ms(1000); // Wacht 1000 milliseconden
					PORTD = 0b00000000; // Zet alle pinnen van Port D laag
  e0:	12 ba       	out	0x12, r1	; 18
  e2:	6f ef       	ldi	r22, 0xFF	; 255
  e4:	89 e6       	ldi	r24, 0x69	; 105
  e6:	98 e1       	ldi	r25, 0x18	; 24
  e8:	61 50       	subi	r22, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x4a>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x54>
  f2:	00 00       	nop
					_delay_ms(1000); // Wacht 1000 milliseconden
					if(PINC == 1){ // Controleer of de knop is ingedrukt
  f4:	83 b3       	in	r24, 0x13	; 19
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	21 f4       	brne	.+8      	; 0x102 <main+0x64>
						t = 1;
  fa:	9a 01       	movw	r18, r20
  fc:	02 c0       	rjmp	.+4      	; 0x102 <main+0x64>
  fe:	20 e0       	ldi	r18, 0x00	; 0
 100:	30 e0       	ldi	r19, 0x00	; 0
		if(t == 1){ // Als t gelijk is aan 1 (knop is ingedrukt)
			t = 0;
			if (i == 0) // Controleer of de modus i gelijk is aan 0
			{
				i = 1;
				while(t == 0){ // Voer een knipperende lus uit zolang t gelijk is aan 0 (knop niet ingedrukt)
 102:	21 15       	cp	r18, r1
 104:	31 05       	cpc	r19, r1
 106:	09 f3       	breq	.-62     	; 0xca <main+0x2c>
		
		if(t == 1){ // Als t gelijk is aan 1 (knop is ingedrukt)
			t = 0;
			if (i == 0) // Controleer of de modus i gelijk is aan 0
			{
				i = 1;
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	d1 cf       	rjmp	.-94     	; 0xb0 <main+0x12>
					if(PINC == 1){ // Controleer of de knop is ingedrukt
						t = 1;
					}
				}
			}
			else if (i == 1) // Als i gelijk is aan 1
 10e:	61 30       	cpi	r22, 0x01	; 1
 110:	71 05       	cpc	r23, r1
 112:	e9 f0       	breq	.+58     	; 0x14e <main+0xb0>
		if(PINC == 1){ // Controleer of de waarde op pin 0 van Port C gelijk is aan 1
			t = 1;
		}
		
		if(t == 1){ // Als t gelijk is aan 1 (knop is ingedrukt)
			t = 0;
 114:	20 e0       	ldi	r18, 0x00	; 0
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	cb cf       	rjmp	.-106    	; 0xb0 <main+0x12>
			}
			else if (i == 1) // Als i gelijk is aan 1
			{
				i = 0;
				while(t == 0){ // Voer een knipperende lus uit zolang t gelijk is aan 0 (knop niet ingedrukt)
					PORTD = 0b10000000; // Zet de meest significante bit van Port D hoog, andere pinnen laag
 11a:	80 e8       	ldi	r24, 0x80	; 128
 11c:	82 bb       	out	0x12, r24	; 18
 11e:	6f e7       	ldi	r22, 0x7F	; 127
 120:	8a e1       	ldi	r24, 0x1A	; 26
 122:	96 e0       	ldi	r25, 0x06	; 6
 124:	61 50       	subi	r22, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x86>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x90>
 12e:	00 00       	nop
					_delay_ms(250); // Wacht 250 milliseconden
					PORTD = 0b00000000; // Zet alle pinnen van Port D laag
 130:	12 ba       	out	0x12, r1	; 18
 132:	6f e7       	ldi	r22, 0x7F	; 127
 134:	8a e1       	ldi	r24, 0x1A	; 26
 136:	96 e0       	ldi	r25, 0x06	; 6
 138:	61 50       	subi	r22, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <main+0x9a>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0xa4>
 142:	00 00       	nop
					_delay_ms(250); // Wacht 250 milliseconden
					if(PINC == 1){ // Controleer of de knop is ingedrukt
 144:	83 b3       	in	r24, 0x13	; 19
 146:	81 30       	cpi	r24, 0x01	; 1
 148:	21 f4       	brne	.+8      	; 0x152 <main+0xb4>
						t = 1;
 14a:	9a 01       	movw	r18, r20
 14c:	02 c0       	rjmp	.+4      	; 0x152 <main+0xb4>
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	30 e0       	ldi	r19, 0x00	; 0
				}
			}
			else if (i == 1) // Als i gelijk is aan 1
			{
				i = 0;
				while(t == 0){ // Voer een knipperende lus uit zolang t gelijk is aan 0 (knop niet ingedrukt)
 152:	21 15       	cp	r18, r1
 154:	31 05       	cpc	r19, r1
 156:	09 f3       	breq	.-62     	; 0x11a <main+0x7c>
					}
				}
			}
			else if (i == 1) // Als i gelijk is aan 1
			{
				i = 0;
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	a9 cf       	rjmp	.-174    	; 0xb0 <main+0x12>

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
