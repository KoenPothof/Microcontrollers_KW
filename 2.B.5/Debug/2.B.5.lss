
2.B.5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000018c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c05  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000095b  00000000  00000000  00000eb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f2  00000000  00000000  00001814  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001d08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046f  00000000  00000000  00001db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000240  00000000  00000000  0000221f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  0000245f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	4d d0       	rcall	.+154    	; 0x134 <main>
  9a:	76 c0       	rjmp	.+236    	; 0x188 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <lcd_strobe_lcd_e>:
	lcd_clear(); // Wis het LCD-scherm
}

// Functie om het stuursignaal E van het LCD-scherm te activeren
void lcd_strobe_lcd_e(void) {
	PORTC |= (1 << LCD_E); // Zet de E-pin van het LCD-scherm hoog
  9e:	85 b3       	in	r24, 0x15	; 21
  a0:	88 60       	ori	r24, 0x08	; 8
  a2:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	8f ec       	ldi	r24, 0xCF	; 207
  a6:	97 e0       	ldi	r25, 0x07	; 7
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <lcd_strobe_lcd_e+0xa>
  ac:	00 c0       	rjmp	.+0      	; 0xae <lcd_strobe_lcd_e+0x10>
  ae:	00 00       	nop
	_delay_ms(1); // Wacht 1 milliseconde
	PORTC &= ~(1 << LCD_E); // Zet de E-pin van het LCD-scherm laag
  b0:	85 b3       	in	r24, 0x15	; 21
  b2:	87 7f       	andi	r24, 0xF7	; 247
  b4:	85 bb       	out	0x15, r24	; 21
  b6:	8f ec       	ldi	r24, 0xCF	; 207
  b8:	97 e0       	ldi	r25, 0x07	; 7
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <lcd_strobe_lcd_e+0x1c>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <lcd_strobe_lcd_e+0x22>
  c0:	00 00       	nop
  c2:	08 95       	ret

000000c4 <init_4bits_mode>:
	_delay_ms(1); // Wacht 1 milliseconde
}

// Functie om het LCD-scherm in 4-bits modus te initialiseren
void init_4bits_mode(void) {
  c4:	cf 93       	push	r28
	PORTC = 0x00; // Zet alle pinnen van Port C laag
  c6:	15 ba       	out	0x15, r1	; 21

	// Initialisatie volgens 4-bits mode
	PORTC = 0x20; // Verzend instructie voor 4-bits mode
  c8:	c0 e2       	ldi	r28, 0x20	; 32
  ca:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e(); // Stuur E-signaal om de instructie te bevestigen
  cc:	e8 df       	rcall	.-48     	; 0x9e <lcd_strobe_lcd_e>
	PORTC = 0x20; // Herhaal de instructie
	lcd_strobe_lcd_e(); // Stuur E-signaal om de instructie te bevestigen
  ce:	c5 bb       	out	0x15, r28	; 21
  d0:	e6 df       	rcall	.-52     	; 0x9e <lcd_strobe_lcd_e>
	PORTC = 0x80; // Stel LCD-scherm in op 2 regels, 5x7 matrix
  d2:	80 e8       	ldi	r24, 0x80	; 128
	lcd_strobe_lcd_e(); // Stuur E-signaal om de instructie te bevestigen
  d4:	85 bb       	out	0x15, r24	; 21
	PORTC = 0x00; // Schakel display uit
  d6:	e3 df       	rcall	.-58     	; 0x9e <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e(); // Stuur E-signaal om de instructie te bevestigen
  d8:	15 ba       	out	0x15, r1	; 21
	PORTC = 0xF0; // Schakel 4-bits modus in
  da:	e1 df       	rcall	.-62     	; 0x9e <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e(); // Stuur E-signaal om de instructie te bevestigen
  dc:	80 ef       	ldi	r24, 0xF0	; 240
	PORTC = 0x00; // Zet alle pinnen van Port C laag
  de:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e(); // Stuur E-signaal om de instructie te bevestigen
  e0:	de df       	rcall	.-68     	; 0x9e <lcd_strobe_lcd_e>
  e2:	15 ba       	out	0x15, r1	; 21
	PORTC = 0x60; // Verzend functie instructie
  e4:	dc df       	rcall	.-72     	; 0x9e <lcd_strobe_lcd_e>
  e6:	80 e6       	ldi	r24, 0x60	; 96
	lcd_strobe_lcd_e(); // Stuur E-signaal om de instructie te bevestigen
  e8:	85 bb       	out	0x15, r24	; 21
  ea:	d9 df       	rcall	.-78     	; 0x9e <lcd_strobe_lcd_e>
}
  ec:	cf 91       	pop	r28
  ee:	08 95       	ret

000000f0 <lcd_write_command>:

// Functie om een commando naar het LCD-scherm te schrijven
void lcd_write_command(unsigned char byte) {
  f0:	cf 93       	push	r28
  f2:	c8 2f       	mov	r28, r24
	// Eerste nibble
	PORTC = byte; // Schrijf de eerste nibble naar Port C
  f4:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1 << LCD_RS); // Stel RS-pin laag voor commandotransmissie
  f6:	85 b3       	in	r24, 0x15	; 21
  f8:	8b 7f       	andi	r24, 0xFB	; 251
  fa:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e(); // Activeer het E-signaal om het commando te schrijven
  fc:	d0 df       	rcall	.-96     	; 0x9e <lcd_strobe_lcd_e>

	// Tweede nibble
	PORTC = (byte << 4); // Verschuif de tweede nibble naar links
  fe:	c2 95       	swap	r28
 100:	c0 7f       	andi	r28, 0xF0	; 240
 102:	c5 bb       	out	0x15, r28	; 21
	PORTC &= ~(1 << LCD_RS); // Stel RS-pin laag voor commandotransmissie
 104:	85 b3       	in	r24, 0x15	; 21
 106:	8b 7f       	andi	r24, 0xFB	; 251
	lcd_strobe_lcd_e(); // Activeer het E-signaal om het commando te schrijven
 108:	85 bb       	out	0x15, r24	; 21
 10a:	c9 df       	rcall	.-110    	; 0x9e <lcd_strobe_lcd_e>
}
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <lcd_clear>:

// Functie om het LCD-scherm te wissen
void lcd_clear(void) {
	lcd_write_command(0x01); // Stuur het commando om het LCD-scherm te wissen
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	ee df       	rcall	.-36     	; 0xf0 <lcd_write_command>
 114:	8f e9       	ldi	r24, 0x9F	; 159
 116:	9f e0       	ldi	r25, 0x0F	; 15
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <lcd_clear+0x8>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <lcd_clear+0xe>
 11e:	00 00       	nop
 120:	08 95       	ret

00000122 <init>:
void lcd_write_command(unsigned char byte);
void lcd_clear(void);  

// Functie om de initialisatie uit te voeren
void init() {
	DDRC = 0xFF; // Stel alle pinnen van Port C in als uitgangen voor het LCD-scherm
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF; // Stel alle pinnen van Port D in als uitgangen voor het LCD-scherm
 126:	81 bb       	out	0x11, r24	; 17
	init_4bits_mode(); // Initialiseer het LCD-scherm in 4-bits modus
 128:	cd df       	rcall	.-102    	; 0xc4 <init_4bits_mode>
	lcd_clear(); // Wis het LCD-scherm
 12a:	f2 cf       	rjmp	.-28     	; 0x110 <lcd_clear>
 12c:	08 95       	ret

0000012e <set_cursor>:
 12e:	80 68       	ori	r24, 0x80	; 128
	_delay_ms(2); // Wacht 2 milliseconden
}

// Functie om de cursorpositie in te stellen op het LCD-scherm
void set_cursor(int position) {
	lcd_write_command(0x80 | (position & 0x7F)); // Stel de cursorpositie in op het LCD-scherm
 130:	df cf       	rjmp	.-66     	; 0xf0 <lcd_write_command>
 132:	08 95       	ret

00000134 <main>:
#include <util/delay.h>
#include "main.h"

int main(void) {
	// Initialisatie en weergave van de tekst "Dirk" op positie 2 van het LCD-scherm
	init(); // Initialiseer het LCD-scherm
 134:	f6 df       	rcall	.-20     	; 0x122 <init>
	set_cursor(2); // Stel de cursorpositie in op 2
 136:	82 e0       	ldi	r24, 0x02	; 2
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	f9 df       	rcall	.-14     	; 0x12e <set_cursor>
 13c:	2f ef       	ldi	r18, 0xFF	; 255
 13e:	88 e0       	ldi	r24, 0x08	; 8
 140:	9d e3       	ldi	r25, 0x3D	; 61
 142:	21 50       	subi	r18, 0x01	; 1
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0xe>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x18>
	//display_text("Dirk");
	_delay_ms(20000); // Wacht 20 seconden

	// Initialisatie en weergave van de tekst "Frans" op positie 5 van het LCD-scherm
	init(); // Initialiseer het LCD-scherm opnieuw (elke keer opnieuw om zeker te zijn van de staat)
 14c:	00 00       	nop
	set_cursor(5); // Stel de cursorpositie in op 5
 14e:	e9 df       	rcall	.-46     	; 0x122 <init>
 150:	85 e0       	ldi	r24, 0x05	; 5
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	ec df       	rcall	.-40     	; 0x12e <set_cursor>
 156:	2f ef       	ldi	r18, 0xFF	; 255
 158:	88 e0       	ldi	r24, 0x08	; 8
 15a:	9d e3       	ldi	r25, 0x3D	; 61
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0x28>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0x32>
	//display_text("Frans");
	_delay_ms(20000); // Wacht 20 seconden

	// Initialisatie en weergave van de tekst "Geert" op positie 1 van het LCD-scherm
	init(); // Initialiseer het LCD-scherm opnieuw
 166:	00 00       	nop
 168:	dc df       	rcall	.-72     	; 0x122 <init>
	set_cursor(1); // Stel de cursorpositie in op 1
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	df df       	rcall	.-66     	; 0x12e <set_cursor>
 170:	2f ef       	ldi	r18, 0xFF	; 255
 172:	88 e0       	ldi	r24, 0x08	; 8
 174:	9d e3       	ldi	r25, 0x3D	; 61
 176:	21 50       	subi	r18, 0x01	; 1
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0x42>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0x4c>
 180:	00 00       	nop
 182:	81 e0       	ldi	r24, 0x01	; 1
	//display_text("Geert");
	_delay_ms(20000); // Wacht 20 seconden

	return 1;
}
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	08 95       	ret

00000188 <_exit>:
 188:	f8 94       	cli

0000018a <__stop_program>:
 18a:	ff cf       	rjmp	.-2      	; 0x18a <__stop_program>
